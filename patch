diff --git a/composer.json b/composer.json
index 77ccb2b..22e0f03 100644
--- a/composer.json
+++ b/composer.json
@@ -22,10 +22,10 @@
         "files": ["lib/_autoload_modules.php"]
     },
     "require": {
-        "php": "~5.3",
-        "simplesamlphp/saml2": "~0.3",
-        "simplesamlphp/xmlseclibs": "~1.3.2",
-        "openid/php-openid": "dev-master#ee669c6a9d4d95b58ecd9b6945627276807694fb as 2.2.2"
+        "php": "~7.2",
+        "simplesamlphp/saml2": "~0.8",
+        "simplesamlphp/xmlseclibs": "~1.4",
+        "openid/php-openid": "~2.3"
     },
     "support": {
         "issues": "https://github.com/simplesamlphp/simplesamlphp/issues",
diff --git a/composer.lock b/composer.lock
index 35a002b..7229a52 100644
--- a/composer.lock
+++ b/composer.lock
@@ -1,23 +1,23 @@
 {
     "_readme": [
         "This file locks the dependencies of your project to a known state",
-        "Read more about it at http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
+        "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
         "This file is @generated automatically"
     ],
-    "hash": "e609dc6172b06d1dd51be10f92c4d18b",
+    "content-hash": "d2259fcc69fcaca89249a42cac1a999b",
     "packages": [
         {
             "name": "openid/php-openid",
-            "version": "dev-master",
+            "version": "2.3.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/openid/php-openid.git",
-                "reference": "ee669c6a9d4d95b58ecd9b6945627276807694fb"
+                "reference": "924f9aa42453cd0f9dba72587b4e2cdf7f4de874"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/openid/php-openid/zipball/fff9217fb1acda132702730b66b10981ea9d4cac",
-                "reference": "ee669c6a9d4d95b58ecd9b6945627276807694fb",
+                "url": "https://api.github.com/repos/openid/php-openid/zipball/924f9aa42453cd0f9dba72587b4e2cdf7f4de874",
+                "reference": "924f9aa42453cd0f9dba72587b4e2cdf7f4de874",
                 "shasum": ""
             },
             "require": {
@@ -53,26 +53,34 @@
                 "auth",
                 "yadis"
             ],
-            "time": "2013-10-03 21:21:20"
+            "time": "2015-07-30T18:07:43+00:00"
         },
         {
             "name": "psr/log",
-            "version": "1.0.0",
+            "version": "1.1.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/php-fig/log.git",
-                "reference": "fe0936ee26643249e916849d48e3a51d5f5e278b"
+                "reference": "6c001f1daafa3a3ac1d8ff69ee4db8e799a654dd"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/php-fig/log/zipball/fe0936ee26643249e916849d48e3a51d5f5e278b",
-                "reference": "fe0936ee26643249e916849d48e3a51d5f5e278b",
+                "url": "https://api.github.com/repos/php-fig/log/zipball/6c001f1daafa3a3ac1d8ff69ee4db8e799a654dd",
+                "reference": "6c001f1daafa3a3ac1d8ff69ee4db8e799a654dd",
                 "shasum": ""
             },
+            "require": {
+                "php": ">=5.3.0"
+            },
             "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
             "autoload": {
-                "psr-0": {
-                    "Psr\\Log\\": ""
+                "psr-4": {
+                    "Psr\\Log\\": "Psr/Log/"
                 }
             },
             "notification-url": "https://packagist.org/downloads/",
@@ -86,38 +94,81 @@
                 }
             ],
             "description": "Common interface for logging libraries",
+            "homepage": "https://github.com/php-fig/log",
             "keywords": [
                 "log",
                 "psr",
                 "psr-3"
             ],
-            "time": "2012-12-21 11:40:51"
+            "time": "2018-11-20T15:27:04+00:00"
+        },
+        {
+            "name": "robrichards/xmlseclibs",
+            "version": "1.4.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/robrichards/xmlseclibs.git",
+                "reference": "79fb5e03c4ee4dc3ec77e4b2628231374364a017"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/robrichards/xmlseclibs/zipball/79fb5e03c4ee4dc3ec77e4b2628231374364a017",
+                "reference": "79fb5e03c4ee4dc3ec77e4b2628231374364a017",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">= 5.2"
+            },
+            "suggest": {
+                "ext/mcrypt": "MCrypt extension",
+                "ext/openssl": "OpenSSL extension"
+            },
+            "type": "library",
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "description": "A PHP library for XML Security",
+            "homepage": "https://github.com/robrichards/xmlseclibs",
+            "keywords": [
+                "security",
+                "signature",
+                "xml",
+                "xmldsig"
+            ],
+            "time": "2016-09-08T13:31:44+00:00"
         },
         {
             "name": "simplesamlphp/saml2",
-            "version": "v0.5.0",
+            "version": "v0.8.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/simplesamlphp/saml2.git",
-                "reference": "497152245ec73c3f96c84306dcddf850017b84a8"
+                "reference": "4e360ddbefe04f1cf7a90eb417ca4a36c89a7ee2"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/simplesamlphp/saml2/zipball/497152245ec73c3f96c84306dcddf850017b84a8",
-                "reference": "497152245ec73c3f96c84306dcddf850017b84a8",
+                "url": "https://api.github.com/repos/simplesamlphp/saml2/zipball/4e360ddbefe04f1cf7a90eb417ca4a36c89a7ee2",
+                "reference": "4e360ddbefe04f1cf7a90eb417ca4a36c89a7ee2",
                 "shasum": ""
             },
             "require": {
                 "ext-dom": "*",
-                "ext-mcrypt": "*",
                 "ext-openssl": "*",
                 "php": ">=5.3.3",
-                "psr/log": "1.0.0",
-                "simplesamlphp/xmlseclibs": "~1.3.1"
+                "psr/log": "~1.0",
+                "robrichards/xmlseclibs": "^1.3"
             },
             "require-dev": {
+                "mockery/mockery": "~0.9",
                 "phpmd/phpmd": "~1.5",
                 "phpunit/phpunit": "~3.7",
+                "satooshi/php-coveralls": "~0.6.1",
                 "sebastian/phpcpd": "~1.4",
                 "sensiolabs/security-checker": "~1.1",
                 "squizlabs/php_codesniffer": "~1.4"
@@ -139,76 +190,58 @@
                 }
             ],
             "description": "SAML2 PHP library from SimpleSAMLphp",
-            "time": "2014-10-07 13:40:34"
+            "time": "2015-12-17T09:02:34+00:00"
         },
         {
             "name": "simplesamlphp/xmlseclibs",
-            "version": "v1.3.2",
+            "version": "1.4.2",
             "source": {
                 "type": "git",
-                "url": "https://github.com/simplesamlphp/xmlseclibs.git",
-                "reference": "734e80899ade295b979de08553161cad63c2dd98"
+                "url": "https://github.com/simplesamlphp/xmlsec.git",
+                "reference": "79fb5e03c4ee4dc3ec77e4b2628231374364a017"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/robrichards/xmlseclibs/zipball/734e80899ade295b979de08553161cad63c2dd98",
-                "reference": "734e80899ade295b979de08553161cad63c2dd98",
+                "url": "https://api.github.com/repos/simplesamlphp/xmlsec/zipball/79fb5e03c4ee4dc3ec77e4b2628231374364a017",
+                "reference": "79fb5e03c4ee4dc3ec77e4b2628231374364a017",
                 "shasum": ""
             },
-            "replace": {
-                "cdatazone/xmlseclibs": "self.version",
-                "fr3d/xmlseclibs": "self.version",
-                "robrichards/xmlseclibs": "self.version"
+            "require": {
+                "php": ">= 5.2"
             },
             "suggest": {
-                "ext/mcrypt": "",
-                "ext/openssl": ""
+                "ext/mcrypt": "MCrypt extension",
+                "ext/openssl": "OpenSSL extension"
             },
             "type": "library",
             "autoload": {
-                "files": [
-                    "xmlseclibs.php"
+                "classmap": [
+                    "src/"
                 ]
             },
             "notification-url": "https://packagist.org/downloads/",
             "license": [
                 "BSD-3-Clause"
             ],
-            "authors": [
-                {
-                    "name": "Rob Richards"
-                }
-            ],
             "description": "A PHP library for XML Security",
-            "homepage": "http://code.google.com/p/xmlseclibs/",
+            "homepage": "https://github.com/robrichards/xmlseclibs",
             "keywords": [
-                "certificate",
                 "security",
                 "signature",
-                "signing",
-                "x.509",
                 "xml",
-                "xmlsec"
+                "xmldsig"
             ],
-            "time": "2013-06-19 00:00:00"
+            "time": "2016-09-08T13:31:44+00:00"
         }
     ],
     "packages-dev": [],
-    "aliases": [
-        {
-            "alias": "2.2.2",
-            "alias_normalized": "2.2.2.0",
-            "version": "9999999-dev",
-            "package": "openid/php-openid"
-        }
-    ],
+    "aliases": [],
     "minimum-stability": "stable",
-    "stability-flags": {
-        "openid/php-openid": 20
-    },
+    "stability-flags": [],
     "prefer-stable": false,
+    "prefer-lowest": false,
     "platform": {
-        "php": "~5.3"
+        "php": "~7.2"
     },
     "platform-dev": []
 }
diff --git a/vendor/autoload.php b/vendor/autoload.php
index 548f798..f619e8c 100644
--- a/vendor/autoload.php
+++ b/vendor/autoload.php
@@ -2,6 +2,6 @@
 
 // autoload.php @generated by Composer
 
-require_once __DIR__ . '/composer' . '/autoload_real.php';
+require_once __DIR__ . '/composer/autoload_real.php';
 
 return ComposerAutoloaderInitc51d1a269dc0bf801361b22d46ca6214::getLoader();
diff --git a/vendor/composer/ClassLoader.php b/vendor/composer/ClassLoader.php
index 4433649..fce8549 100644
--- a/vendor/composer/ClassLoader.php
+++ b/vendor/composer/ClassLoader.php
@@ -13,9 +13,7 @@
 namespace Composer\Autoload;
 
 /**
- * ClassLoader implements a PSR-0 class loader
- *
- * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md
+ * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
  *
  *     $loader = new \Composer\Autoload\ClassLoader();
  *
@@ -39,6 +37,8 @@ namespace Composer\Autoload;
  *
  * @author Fabien Potencier <fabien@symfony.com>
  * @author Jordi Boggiano <j.boggiano@seld.be>
+ * @see    http://www.php-fig.org/psr/psr-0/
+ * @see    http://www.php-fig.org/psr/psr-4/
  */
 class ClassLoader
 {
@@ -53,10 +53,17 @@ class ClassLoader
 
     private $useIncludePath = false;
     private $classMap = array();
+    private $classMapAuthoritative = false;
+    private $missingClasses = array();
+    private $apcuPrefix;
 
     public function getPrefixes()
     {
-        return call_user_func_array('array_merge', $this->prefixesPsr0);
+        if (!empty($this->prefixesPsr0)) {
+            return call_user_func_array('array_merge', $this->prefixesPsr0);
+        }
+
+        return array();
     }
 
     public function getPrefixesPsr4()
@@ -141,7 +148,7 @@ class ClassLoader
      * appending or prepending to the ones previously set for this namespace.
      *
      * @param string       $prefix  The prefix/namespace, with trailing '\\'
-     * @param array|string $paths   The PSR-0 base directories
+     * @param array|string $paths   The PSR-4 base directories
      * @param bool         $prepend Whether to prepend the directories
      *
      * @throws \InvalidArgumentException
@@ -244,6 +251,47 @@ class ClassLoader
         return $this->useIncludePath;
     }
 
+    /**
+     * Turns off searching the prefix and fallback directories for classes
+     * that have not been registered with the class map.
+     *
+     * @param bool $classMapAuthoritative
+     */
+    public function setClassMapAuthoritative($classMapAuthoritative)
+    {
+        $this->classMapAuthoritative = $classMapAuthoritative;
+    }
+
+    /**
+     * Should class lookup fail if not found in the current class map?
+     *
+     * @return bool
+     */
+    public function isClassMapAuthoritative()
+    {
+        return $this->classMapAuthoritative;
+    }
+
+    /**
+     * APCu prefix to use to cache found/not-found classes, if the extension is enabled.
+     *
+     * @param string|null $apcuPrefix
+     */
+    public function setApcuPrefix($apcuPrefix)
+    {
+        $this->apcuPrefix = function_exists('apcu_fetch') && filter_var(ini_get('apc.enabled'), FILTER_VALIDATE_BOOLEAN) ? $apcuPrefix : null;
+    }
+
+    /**
+     * The APCu prefix in use, or null if APCu caching is not enabled.
+     *
+     * @return string|null
+     */
+    public function getApcuPrefix()
+    {
+        return $this->apcuPrefix;
+    }
+
     /**
      * Registers this instance as an autoloader.
      *
@@ -286,26 +334,34 @@ class ClassLoader
      */
     public function findFile($class)
     {
-        // work around for PHP 5.3.0 - 5.3.2 https://bugs.php.net/50731
-        if ('\\' == $class[0]) {
-            $class = substr($class, 1);
-        }
-
         // class map lookup
         if (isset($this->classMap[$class])) {
             return $this->classMap[$class];
         }
+        if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {
+            return false;
+        }
+        if (null !== $this->apcuPrefix) {
+            $file = apcu_fetch($this->apcuPrefix.$class, $hit);
+            if ($hit) {
+                return $file;
+            }
+        }
 
         $file = $this->findFileWithExtension($class, '.php');
 
         // Search for Hack files if we are running on HHVM
-        if ($file === null && defined('HHVM_VERSION')) {
+        if (false === $file && defined('HHVM_VERSION')) {
             $file = $this->findFileWithExtension($class, '.hh');
         }
 
-        if ($file === null) {
+        if (null !== $this->apcuPrefix) {
+            apcu_add($this->apcuPrefix.$class, $file);
+        }
+
+        if (false === $file) {
             // Remember that this class does not exist.
-            return $this->classMap[$class] = false;
+            $this->missingClasses[$class] = true;
         }
 
         return $file;
@@ -318,10 +374,14 @@ class ClassLoader
 
         $first = $class[0];
         if (isset($this->prefixLengthsPsr4[$first])) {
-            foreach ($this->prefixLengthsPsr4[$first] as $prefix => $length) {
-                if (0 === strpos($class, $prefix)) {
-                    foreach ($this->prefixDirsPsr4[$prefix] as $dir) {
-                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) {
+            $subPath = $class;
+            while (false !== $lastPos = strrpos($subPath, '\\')) {
+                $subPath = substr($subPath, 0, $lastPos);
+                $search = $subPath . '\\';
+                if (isset($this->prefixDirsPsr4[$search])) {
+                    $pathEnd = DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $lastPos + 1);
+                    foreach ($this->prefixDirsPsr4[$search] as $dir) {
+                        if (file_exists($file = $dir . $pathEnd)) {
                             return $file;
                         }
                     }
@@ -369,6 +429,8 @@ class ClassLoader
         if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {
             return $file;
         }
+
+        return false;
     }
 }
 
diff --git a/vendor/composer/autoload_classmap.php b/vendor/composer/autoload_classmap.php
index 996149e..ddb0cbc 100644
--- a/vendor/composer/autoload_classmap.php
+++ b/vendor/composer/autoload_classmap.php
@@ -101,151 +101,7 @@ return array(
     'Auth_Yadis_Yadis' => $vendorDir . '/openid/php-openid/Auth/Yadis/Yadis.php',
     'Auth_Yadis_dom' => $vendorDir . '/openid/php-openid/Auth/Yadis/XML.php',
     'Auth_Yadis_domxml' => $vendorDir . '/openid/php-openid/Auth/Yadis/XML.php',
-    'Psr\\Log\\AbstractLogger' => $vendorDir . '/psr/log/Psr/Log/AbstractLogger.php',
-    'Psr\\Log\\InvalidArgumentException' => $vendorDir . '/psr/log/Psr/Log/InvalidArgumentException.php',
-    'Psr\\Log\\LogLevel' => $vendorDir . '/psr/log/Psr/Log/LogLevel.php',
-    'Psr\\Log\\LoggerAwareInterface' => $vendorDir . '/psr/log/Psr/Log/LoggerAwareInterface.php',
-    'Psr\\Log\\LoggerAwareTrait' => $vendorDir . '/psr/log/Psr/Log/LoggerAwareTrait.php',
-    'Psr\\Log\\LoggerInterface' => $vendorDir . '/psr/log/Psr/Log/LoggerInterface.php',
-    'Psr\\Log\\LoggerTrait' => $vendorDir . '/psr/log/Psr/Log/LoggerTrait.php',
-    'Psr\\Log\\NullLogger' => $vendorDir . '/psr/log/Psr/Log/NullLogger.php',
-    'SAML2_ArtifactResolve' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/ArtifactResolve.php',
-    'SAML2_ArtifactResponse' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/ArtifactResponse.php',
-    'SAML2_Assertion' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Assertion.php',
-    'SAML2_AttributeQuery' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/AttributeQuery.php',
-    'SAML2_AuthnRequest' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/AuthnRequest.php',
-    'SAML2_Binding' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Binding.php',
-    'SAML2_Compat_AbstractContainer' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Compat/AbstractContainer.php',
-    'SAML2_Compat_ContainerSingleton' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Compat/ContainerSingleton.php',
-    'SAML2_Compat_MockContainer' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Compat/MockContainer.php',
-    'SAML2_Compat_Ssp_Container' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Compat/Ssp/Container.php',
-    'SAML2_Compat_Ssp_Logger' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Compat/Ssp/Logger.php',
-    'SAML2_Const' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Const.php',
-    'SAML2_EncryptedAssertion' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/EncryptedAssertion.php',
-    'SAML2_HTTPArtifact' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/HTTPArtifact.php',
-    'SAML2_HTTPPost' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/HTTPPost.php',
-    'SAML2_HTTPRedirect' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/HTTPRedirect.php',
-    'SAML2_LogoutRequest' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/LogoutRequest.php',
-    'SAML2_LogoutResponse' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/LogoutResponse.php',
-    'SAML2_Message' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Message.php',
-    'SAML2_Request' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Request.php',
-    'SAML2_Response' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Response.php',
-    'SAML2_SOAP' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/SOAP.php',
-    'SAML2_SOAPClient' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/SOAPClient.php',
-    'SAML2_SignedElement' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/SignedElement.php',
-    'SAML2_SignedElementHelper' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/SignedElementHelper.php',
-    'SAML2_StatusResponse' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/StatusResponse.php',
-    'SAML2_SubjectQuery' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/SubjectQuery.php',
-    'SAML2_Utils' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/Utils.php',
-    'SAML2_XML_Chunk' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/Chunk.php',
-    'SAML2_XML_ds_KeyInfo' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/ds/KeyInfo.php',
-    'SAML2_XML_ds_KeyName' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/ds/KeyName.php',
-    'SAML2_XML_ds_X509Certificate' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/ds/X509Certificate.php',
-    'SAML2_XML_ds_X509Data' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/ds/X509Data.php',
-    'SAML2_XML_md_AdditionalMetadataLocation' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/AdditionalMetadataLocation.php',
-    'SAML2_XML_md_AffiliationDescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/AffiliationDescriptor.php',
-    'SAML2_XML_md_AttributeAuthorityDescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/AttributeAuthorityDescriptor.php',
-    'SAML2_XML_md_AttributeConsumingService' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/AttributeConsumingService.php',
-    'SAML2_XML_md_AuthnAuthorityDescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/AuthnAuthorityDescriptor.php',
-    'SAML2_XML_md_ContactPerson' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/ContactPerson.php',
-    'SAML2_XML_md_EndpointType' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/EndpointType.php',
-    'SAML2_XML_md_EntitiesDescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/EntitiesDescriptor.php',
-    'SAML2_XML_md_EntityDescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/EntityDescriptor.php',
-    'SAML2_XML_md_Extensions' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/Extensions.php',
-    'SAML2_XML_md_IDPSSODescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/IDPSSODescriptor.php',
-    'SAML2_XML_md_IndexedEndpointType' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/IndexedEndpointType.php',
-    'SAML2_XML_md_KeyDescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/KeyDescriptor.php',
-    'SAML2_XML_md_Organization' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/Organization.php',
-    'SAML2_XML_md_PDPDescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/PDPDescriptor.php',
-    'SAML2_XML_md_RequestedAttribute' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/RequestedAttribute.php',
-    'SAML2_XML_md_RoleDescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/RoleDescriptor.php',
-    'SAML2_XML_md_SPSSODescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/SPSSODescriptor.php',
-    'SAML2_XML_md_SSODescriptorType' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/SSODescriptorType.php',
-    'SAML2_XML_md_UnknownRoleDescriptor' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/md/UnknownRoleDescriptor.php',
-    'SAML2_XML_mdattr_EntityAttributes' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/mdattr/EntityAttributes.php',
-    'SAML2_XML_mdrpi_Common' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/mdrpi/Common.php',
-    'SAML2_XML_mdrpi_PublicationInfo' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/mdrpi/PublicationInfo.php',
-    'SAML2_XML_mdrpi_RegistrationInfo' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/mdrpi/RegistrationInfo.php',
-    'SAML2_XML_mdui_DiscoHints' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/mdui/DiscoHints.php',
-    'SAML2_XML_mdui_Keywords' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/mdui/Keywords.php',
-    'SAML2_XML_mdui_Logo' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/mdui/Logo.php',
-    'SAML2_XML_mdui_UIInfo' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/mdui/UIInfo.php',
-    'SAML2_XML_saml_Attribute' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/saml/Attribute.php',
-    'SAML2_XML_saml_AttributeValue' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/saml/AttributeValue.php',
-    'SAML2_XML_saml_NameID' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/saml/NameID.php',
-    'SAML2_XML_saml_SubjectConfirmation' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/saml/SubjectConfirmation.php',
-    'SAML2_XML_saml_SubjectConfirmationData' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/saml/SubjectConfirmationData.php',
-    'SAML2_XML_samlp_Extensions' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/samlp/Extensions.php',
-    'SAML2_XML_shibmd_Scope' => $vendorDir . '/simplesamlphp/saml2/src/SAML2/XML/shibmd/Scope.php',
-    'SimpleSAML_AuthMemCookie' => $baseDir . '/lib/SimpleSAML/AuthMemCookie.php',
-    'SimpleSAML_Auth_BWC' => $baseDir . '/lib/SimpleSAML/Auth/BWC.php',
-    'SimpleSAML_Auth_Default' => $baseDir . '/lib/SimpleSAML/Auth/Default.php',
-    'SimpleSAML_Auth_LDAP' => $baseDir . '/lib/SimpleSAML/Auth/LDAP.php',
-    'SimpleSAML_Auth_ProcessingChain' => $baseDir . '/lib/SimpleSAML/Auth/ProcessingChain.php',
-    'SimpleSAML_Auth_ProcessingFilter' => $baseDir . '/lib/SimpleSAML/Auth/ProcessingFilter.php',
-    'SimpleSAML_Auth_Simple' => $baseDir . '/lib/SimpleSAML/Auth/Simple.php',
-    'SimpleSAML_Auth_Source' => $baseDir . '/lib/SimpleSAML/Auth/Source.php',
-    'SimpleSAML_Auth_State' => $baseDir . '/lib/SimpleSAML/Auth/State.php',
-    'SimpleSAML_Auth_TimeLimitedToken' => $baseDir . '/lib/SimpleSAML/Auth/TimeLimitedToken.php',
-    'SimpleSAML_Bindings_Shib13_Artifact' => $baseDir . '/lib/SimpleSAML/Bindings/Shib13/Artifact.php',
-    'SimpleSAML_Bindings_Shib13_HTTPPost' => $baseDir . '/lib/SimpleSAML/Bindings/Shib13/HTTPPost.php',
-    'SimpleSAML_Configuration' => $baseDir . '/lib/SimpleSAML/Configuration.php',
-    'SimpleSAML_Error_Assertion' => $baseDir . '/lib/SimpleSAML/Error/Assertion.php',
-    'SimpleSAML_Error_AuthSource' => $baseDir . '/lib/SimpleSAML/Error/AuthSource.php',
-    'SimpleSAML_Error_BadRequest' => $baseDir . '/lib/SimpleSAML/Error/BadRequest.php',
-    'SimpleSAML_Error_BadUserInnput' => $baseDir . '/lib/SimpleSAML/Error/BadUserInnput.php',
-    'SimpleSAML_Error_Error' => $baseDir . '/lib/SimpleSAML/Error/Error.php',
-    'SimpleSAML_Error_Exception' => $baseDir . '/lib/SimpleSAML/Error/Exception.php',
-    'SimpleSAML_Error_InvalidCredential' => $baseDir . '/lib/SimpleSAML/Error/InvalidCredential.php',
-    'SimpleSAML_Error_MetadataNotFound' => $baseDir . '/lib/SimpleSAML/Error/MetadataNotFound.php',
-    'SimpleSAML_Error_NoPassive' => $baseDir . '/lib/SimpleSAML/Error/NoPassive.php',
-    'SimpleSAML_Error_NoState' => $baseDir . '/lib/SimpleSAML/Error/NoState.php',
-    'SimpleSAML_Error_NotFound' => $baseDir . '/lib/SimpleSAML/Error/NotFound.php',
-    'SimpleSAML_Error_ProxyCountExceeded' => $baseDir . '/lib/SimpleSAML/Error/ProxyCountExceeded.php',
-    'SimpleSAML_Error_UnserializableException' => $baseDir . '/lib/SimpleSAML/Error/UnserializableException.php',
-    'SimpleSAML_Error_User' => $baseDir . '/lib/SimpleSAML/Error/User.php',
-    'SimpleSAML_Error_UserAborted' => $baseDir . '/lib/SimpleSAML/Error/UserAborted.php',
-    'SimpleSAML_Error_UserNotFound' => $baseDir . '/lib/SimpleSAML/Error/UserNotFound.php',
-    'SimpleSAML_IdP' => $baseDir . '/lib/SimpleSAML/IdP.php',
-    'SimpleSAML_IdP_LogoutHandler' => $baseDir . '/lib/SimpleSAML/IdP/LogoutHandler.php',
-    'SimpleSAML_IdP_LogoutIFrame' => $baseDir . '/lib/SimpleSAML/IdP/LogoutIFrame.php',
-    'SimpleSAML_IdP_LogoutTraditional' => $baseDir . '/lib/SimpleSAML/IdP/LogoutTraditional.php',
-    'SimpleSAML_Logger' => $baseDir . '/lib/SimpleSAML/Logger.php',
-    'SimpleSAML_Logger_LoggingHandler' => $baseDir . '/lib/SimpleSAML/Logger/LoggingHandler.php',
-    'SimpleSAML_Logger_LoggingHandlerErrorLog' => $baseDir . '/lib/SimpleSAML/Logger/LoggingHandlerErrorLog.php',
-    'SimpleSAML_Logger_LoggingHandlerFile' => $baseDir . '/lib/SimpleSAML/Logger/LoggingHandlerFile.php',
-    'SimpleSAML_Logger_LoggingHandlerSyslog' => $baseDir . '/lib/SimpleSAML/Logger/LoggingHandlerSyslog.php',
-    'SimpleSAML_Memcache' => $baseDir . '/lib/SimpleSAML/Memcache.php',
-    'SimpleSAML_MemcacheStore' => $baseDir . '/lib/SimpleSAML/MemcacheStore.php',
-    'SimpleSAML_Metadata_MetaDataStorageHandler' => $baseDir . '/lib/SimpleSAML/Metadata/MetaDataStorageHandler.php',
-    'SimpleSAML_Metadata_MetaDataStorageHandlerDynamicXML' => $baseDir . '/lib/SimpleSAML/Metadata/MetaDataStorageHandlerDynamicXML.php',
-    'SimpleSAML_Metadata_MetaDataStorageHandlerFlatFile' => $baseDir . '/lib/SimpleSAML/Metadata/MetaDataStorageHandlerFlatFile.php',
-    'SimpleSAML_Metadata_MetaDataStorageHandlerSerialize' => $baseDir . '/lib/SimpleSAML/Metadata/MetaDataStorageHandlerSerialize.php',
-    'SimpleSAML_Metadata_MetaDataStorageHandlerXML' => $baseDir . '/lib/SimpleSAML/Metadata/MetaDataStorageHandlerXML.php',
-    'SimpleSAML_Metadata_MetaDataStorageSource' => $baseDir . '/lib/SimpleSAML/Metadata/MetaDataStorageSource.php',
-    'SimpleSAML_Metadata_SAMLBuilder' => $baseDir . '/lib/SimpleSAML/Metadata/SAMLBuilder.php',
-    'SimpleSAML_Metadata_SAMLParser' => $baseDir . '/lib/SimpleSAML/Metadata/SAMLParser.php',
-    'SimpleSAML_Metadata_Signer' => $baseDir . '/lib/SimpleSAML/Metadata/Signer.php',
-    'SimpleSAML_Module' => $baseDir . '/lib/SimpleSAML/Module.php',
-    'SimpleSAML_Session' => $baseDir . '/lib/SimpleSAML/Session.php',
-    'SimpleSAML_SessionHandler' => $baseDir . '/lib/SimpleSAML/SessionHandler.php',
-    'SimpleSAML_SessionHandlerCookie' => $baseDir . '/lib/SimpleSAML/SessionHandlerCookie.php',
-    'SimpleSAML_SessionHandlerPHP' => $baseDir . '/lib/SimpleSAML/SessionHandlerPHP.php',
-    'SimpleSAML_SessionHandlerStore' => $baseDir . '/lib/SimpleSAML/SessionHandlerStore.php',
-    'SimpleSAML_Stats' => $baseDir . '/lib/SimpleSAML/Stats.php',
-    'SimpleSAML_Stats_Output' => $baseDir . '/lib/SimpleSAML/Stats/Output.php',
-    'SimpleSAML_Store' => $baseDir . '/lib/SimpleSAML/Store.php',
-    'SimpleSAML_Store_Memcache' => $baseDir . '/lib/SimpleSAML/Store/Memcache.php',
-    'SimpleSAML_Store_SQL' => $baseDir . '/lib/SimpleSAML/Store/SQL.php',
-    'SimpleSAML_Utilities' => $baseDir . '/lib/SimpleSAML/Utilities.php',
-    'SimpleSAML_Utils_Crypto' => $baseDir . '/lib/SimpleSAML/Utils/Crypto.php',
-    'SimpleSAML_XHTML_EMail' => $baseDir . '/lib/SimpleSAML/XHTML/EMail.php',
-    'SimpleSAML_XHTML_IdPDisco' => $baseDir . '/lib/SimpleSAML/XHTML/IdPDisco.php',
-    'SimpleSAML_XHTML_Template' => $baseDir . '/lib/SimpleSAML/XHTML/Template.php',
-    'SimpleSAML_XML_Errors' => $baseDir . '/lib/SimpleSAML/XML/Errors.php',
-    'SimpleSAML_XML_Parser' => $baseDir . '/lib/SimpleSAML/XML/Parser.php',
-    'SimpleSAML_XML_Shib13_AuthnRequest' => $baseDir . '/lib/SimpleSAML/XML/Shib13/AuthnRequest.php',
-    'SimpleSAML_XML_Shib13_AuthnResponse' => $baseDir . '/lib/SimpleSAML/XML/Shib13/AuthnResponse.php',
-    'SimpleSAML_XML_Signer' => $baseDir . '/lib/SimpleSAML/XML/Signer.php',
-    'SimpleSAML_XML_Validator' => $baseDir . '/lib/SimpleSAML/XML/Validator.php',
+    'XMLSecEnc' => $vendorDir . '/simplesamlphp/xmlseclibs/src/XMLSecEnc.php',
+    'XMLSecurityDSig' => $vendorDir . '/simplesamlphp/xmlseclibs/src/XMLSecurityDSig.php',
+    'XMLSecurityKey' => $vendorDir . '/simplesamlphp/xmlseclibs/src/XMLSecurityKey.php',
 );
diff --git a/vendor/composer/autoload_files.php b/vendor/composer/autoload_files.php
index 03adddf..ec41e88 100644
--- a/vendor/composer/autoload_files.php
+++ b/vendor/composer/autoload_files.php
@@ -6,6 +6,5 @@ $vendorDir = dirname(dirname(__FILE__));
 $baseDir = dirname($vendorDir);
 
 return array(
-    $vendorDir . '/simplesamlphp/xmlseclibs/xmlseclibs.php',
-    $baseDir . '/lib/_autoload_modules.php',
+    '5abda994d126976858eb25d2546ee3c9' => $baseDir . '/lib/_autoload_modules.php',
 );
diff --git a/vendor/composer/autoload_namespaces.php b/vendor/composer/autoload_namespaces.php
index e68bde8..50b68df 100644
--- a/vendor/composer/autoload_namespaces.php
+++ b/vendor/composer/autoload_namespaces.php
@@ -8,5 +8,4 @@ $baseDir = dirname($vendorDir);
 return array(
     'SimpleSAML_' => array($baseDir . '/lib'),
     'SAML2_' => array($vendorDir . '/simplesamlphp/saml2/src'),
-    'Psr\\Log\\' => array($vendorDir . '/psr/log'),
 );
diff --git a/vendor/composer/autoload_psr4.php b/vendor/composer/autoload_psr4.php
index b265c64..d15f8ff 100644
--- a/vendor/composer/autoload_psr4.php
+++ b/vendor/composer/autoload_psr4.php
@@ -6,4 +6,5 @@ $vendorDir = dirname(dirname(__FILE__));
 $baseDir = dirname($vendorDir);
 
 return array(
+    'Psr\\Log\\' => array($vendorDir . '/psr/log/Psr/Log'),
 );
diff --git a/vendor/composer/autoload_real.php b/vendor/composer/autoload_real.php
index a2d9b2a..b478c75 100644
--- a/vendor/composer/autoload_real.php
+++ b/vendor/composer/autoload_real.php
@@ -24,36 +24,51 @@ class ComposerAutoloaderInitc51d1a269dc0bf801361b22d46ca6214
         spl_autoload_unregister(array('ComposerAutoloaderInitc51d1a269dc0bf801361b22d46ca6214', 'loadClassLoader'));
 
         $includePaths = require __DIR__ . '/include_paths.php';
-        array_push($includePaths, get_include_path());
-        set_include_path(join(PATH_SEPARATOR, $includePaths));
+        $includePaths[] = get_include_path();
+        set_include_path(implode(PATH_SEPARATOR, $includePaths));
 
-        $map = require __DIR__ . '/autoload_namespaces.php';
-        foreach ($map as $namespace => $path) {
-            $loader->set($namespace, $path);
-        }
+        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
+        if ($useStaticLoader) {
+            require_once __DIR__ . '/autoload_static.php';
 
-        $map = require __DIR__ . '/autoload_psr4.php';
-        foreach ($map as $namespace => $path) {
-            $loader->setPsr4($namespace, $path);
-        }
+            call_user_func(\Composer\Autoload\ComposerStaticInitc51d1a269dc0bf801361b22d46ca6214::getInitializer($loader));
+        } else {
+            $map = require __DIR__ . '/autoload_namespaces.php';
+            foreach ($map as $namespace => $path) {
+                $loader->set($namespace, $path);
+            }
+
+            $map = require __DIR__ . '/autoload_psr4.php';
+            foreach ($map as $namespace => $path) {
+                $loader->setPsr4($namespace, $path);
+            }
 
-        $classMap = require __DIR__ . '/autoload_classmap.php';
-        if ($classMap) {
-            $loader->addClassMap($classMap);
+            $classMap = require __DIR__ . '/autoload_classmap.php';
+            if ($classMap) {
+                $loader->addClassMap($classMap);
+            }
         }
 
         $loader->register(true);
 
-        $includeFiles = require __DIR__ . '/autoload_files.php';
-        foreach ($includeFiles as $file) {
-            composerRequirec51d1a269dc0bf801361b22d46ca6214($file);
+        if ($useStaticLoader) {
+            $includeFiles = Composer\Autoload\ComposerStaticInitc51d1a269dc0bf801361b22d46ca6214::$files;
+        } else {
+            $includeFiles = require __DIR__ . '/autoload_files.php';
+        }
+        foreach ($includeFiles as $fileIdentifier => $file) {
+            composerRequirec51d1a269dc0bf801361b22d46ca6214($fileIdentifier, $file);
         }
 
         return $loader;
     }
 }
 
-function composerRequirec51d1a269dc0bf801361b22d46ca6214($file)
+function composerRequirec51d1a269dc0bf801361b22d46ca6214($fileIdentifier, $file)
 {
-    require $file;
+    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
+        require $file;
+
+        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
+    }
 }
diff --git a/vendor/composer/installed.json b/vendor/composer/installed.json
index 3495420..0720ef8 100644
--- a/vendor/composer/installed.json
+++ b/vendor/composer/installed.json
@@ -1,17 +1,17 @@
 [
     {
         "name": "openid/php-openid",
-        "version": "dev-master",
-        "version_normalized": "9999999-dev",
+        "version": "2.3.0",
+        "version_normalized": "2.3.0.0",
         "source": {
             "type": "git",
             "url": "https://github.com/openid/php-openid.git",
-            "reference": "ee669c6a9d4d95b58ecd9b6945627276807694fb"
+            "reference": "924f9aa42453cd0f9dba72587b4e2cdf7f4de874"
         },
         "dist": {
             "type": "zip",
-            "url": "https://api.github.com/repos/openid/php-openid/zipball/fff9217fb1acda132702730b66b10981ea9d4cac",
-            "reference": "ee669c6a9d4d95b58ecd9b6945627276807694fb",
+            "url": "https://api.github.com/repos/openid/php-openid/zipball/924f9aa42453cd0f9dba72587b4e2cdf7f4de874",
+            "reference": "924f9aa42453cd0f9dba72587b4e2cdf7f4de874",
             "shasum": ""
         },
         "require": {
@@ -20,9 +20,9 @@
             "ext-gmp": "*",
             "php": ">=4.3"
         },
-        "time": "2013-10-03 21:21:20",
+        "time": "2015-07-30T18:07:43+00:00",
         "type": "library",
-        "installation-source": "dist",
+        "installation-source": "source",
         "autoload": {
             "classmap": [
                 "Auth"
@@ -51,129 +51,129 @@
         ]
     },
     {
-        "name": "simplesamlphp/xmlseclibs",
-        "version": "v1.3.2",
-        "version_normalized": "1.3.2.0",
+        "name": "psr/log",
+        "version": "1.1.0",
+        "version_normalized": "1.1.0.0",
         "source": {
             "type": "git",
-            "url": "https://github.com/simplesamlphp/xmlseclibs.git",
-            "reference": "734e80899ade295b979de08553161cad63c2dd98"
+            "url": "https://github.com/php-fig/log.git",
+            "reference": "6c001f1daafa3a3ac1d8ff69ee4db8e799a654dd"
         },
         "dist": {
             "type": "zip",
-            "url": "https://api.github.com/repos/robrichards/xmlseclibs/zipball/734e80899ade295b979de08553161cad63c2dd98",
-            "reference": "734e80899ade295b979de08553161cad63c2dd98",
+            "url": "https://api.github.com/repos/php-fig/log/zipball/6c001f1daafa3a3ac1d8ff69ee4db8e799a654dd",
+            "reference": "6c001f1daafa3a3ac1d8ff69ee4db8e799a654dd",
             "shasum": ""
         },
-        "replace": {
-            "cdatazone/xmlseclibs": "self.version",
-            "fr3d/xmlseclibs": "self.version",
-            "robrichards/xmlseclibs": "self.version"
-        },
-        "suggest": {
-            "ext/mcrypt": "",
-            "ext/openssl": ""
+        "require": {
+            "php": ">=5.3.0"
         },
-        "time": "2013-06-19 00:00:00",
+        "time": "2018-11-20T15:27:04+00:00",
         "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "1.0.x-dev"
+            }
+        },
         "installation-source": "dist",
         "autoload": {
-            "files": [
-                "xmlseclibs.php"
-            ]
+            "psr-4": {
+                "Psr\\Log\\": "Psr/Log/"
+            }
         },
         "notification-url": "https://packagist.org/downloads/",
         "license": [
-            "BSD-3-Clause"
+            "MIT"
         ],
         "authors": [
             {
-                "name": "Rob Richards"
+                "name": "PHP-FIG",
+                "homepage": "http://www.php-fig.org/"
             }
         ],
-        "description": "A PHP library for XML Security",
-        "homepage": "http://code.google.com/p/xmlseclibs/",
+        "description": "Common interface for logging libraries",
+        "homepage": "https://github.com/php-fig/log",
         "keywords": [
-            "certificate",
-            "security",
-            "signature",
-            "signing",
-            "x.509",
-            "xml",
-            "xmlsec"
+            "log",
+            "psr",
+            "psr-3"
         ]
     },
     {
-        "name": "psr/log",
-        "version": "1.0.0",
-        "version_normalized": "1.0.0.0",
+        "name": "robrichards/xmlseclibs",
+        "version": "1.4.2",
+        "version_normalized": "1.4.2.0",
         "source": {
             "type": "git",
-            "url": "https://github.com/php-fig/log.git",
-            "reference": "fe0936ee26643249e916849d48e3a51d5f5e278b"
+            "url": "https://github.com/robrichards/xmlseclibs.git",
+            "reference": "79fb5e03c4ee4dc3ec77e4b2628231374364a017"
         },
         "dist": {
             "type": "zip",
-            "url": "https://api.github.com/repos/php-fig/log/zipball/fe0936ee26643249e916849d48e3a51d5f5e278b",
-            "reference": "fe0936ee26643249e916849d48e3a51d5f5e278b",
+            "url": "https://api.github.com/repos/robrichards/xmlseclibs/zipball/79fb5e03c4ee4dc3ec77e4b2628231374364a017",
+            "reference": "79fb5e03c4ee4dc3ec77e4b2628231374364a017",
             "shasum": ""
         },
-        "time": "2012-12-21 11:40:51",
+        "require": {
+            "php": ">= 5.2"
+        },
+        "suggest": {
+            "ext/mcrypt": "MCrypt extension",
+            "ext/openssl": "OpenSSL extension"
+        },
+        "time": "2016-09-08T13:31:44+00:00",
         "type": "library",
         "installation-source": "dist",
         "autoload": {
-            "psr-0": {
-                "Psr\\Log\\": ""
-            }
+            "classmap": [
+                "src/"
+            ]
         },
         "notification-url": "https://packagist.org/downloads/",
         "license": [
-            "MIT"
-        ],
-        "authors": [
-            {
-                "name": "PHP-FIG",
-                "homepage": "http://www.php-fig.org/"
-            }
+            "BSD-3-Clause"
         ],
-        "description": "Common interface for logging libraries",
+        "description": "A PHP library for XML Security",
+        "homepage": "https://github.com/robrichards/xmlseclibs",
         "keywords": [
-            "log",
-            "psr",
-            "psr-3"
+            "security",
+            "signature",
+            "xml",
+            "xmldsig"
         ]
     },
     {
         "name": "simplesamlphp/saml2",
-        "version": "v0.5.0",
-        "version_normalized": "0.5.0.0",
+        "version": "v0.8.1",
+        "version_normalized": "0.8.1.0",
         "source": {
             "type": "git",
             "url": "https://github.com/simplesamlphp/saml2.git",
-            "reference": "497152245ec73c3f96c84306dcddf850017b84a8"
+            "reference": "4e360ddbefe04f1cf7a90eb417ca4a36c89a7ee2"
         },
         "dist": {
             "type": "zip",
-            "url": "https://api.github.com/repos/simplesamlphp/saml2/zipball/497152245ec73c3f96c84306dcddf850017b84a8",
-            "reference": "497152245ec73c3f96c84306dcddf850017b84a8",
+            "url": "https://api.github.com/repos/simplesamlphp/saml2/zipball/4e360ddbefe04f1cf7a90eb417ca4a36c89a7ee2",
+            "reference": "4e360ddbefe04f1cf7a90eb417ca4a36c89a7ee2",
             "shasum": ""
         },
         "require": {
             "ext-dom": "*",
-            "ext-mcrypt": "*",
             "ext-openssl": "*",
             "php": ">=5.3.3",
-            "psr/log": "1.0.0",
-            "simplesamlphp/xmlseclibs": "~1.3.1"
+            "psr/log": "~1.0",
+            "robrichards/xmlseclibs": "^1.3"
         },
         "require-dev": {
+            "mockery/mockery": "~0.9",
             "phpmd/phpmd": "~1.5",
             "phpunit/phpunit": "~3.7",
+            "satooshi/php-coveralls": "~0.6.1",
             "sebastian/phpcpd": "~1.4",
             "sensiolabs/security-checker": "~1.1",
             "squizlabs/php_codesniffer": "~1.4"
         },
-        "time": "2014-10-07 13:40:34",
+        "time": "2015-12-17T09:02:34+00:00",
         "type": "library",
         "installation-source": "dist",
         "autoload": {
@@ -192,5 +192,48 @@
             }
         ],
         "description": "SAML2 PHP library from SimpleSAMLphp"
+    },
+    {
+        "name": "simplesamlphp/xmlseclibs",
+        "version": "1.4.2",
+        "version_normalized": "1.4.2.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/simplesamlphp/xmlsec.git",
+            "reference": "79fb5e03c4ee4dc3ec77e4b2628231374364a017"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/simplesamlphp/xmlsec/zipball/79fb5e03c4ee4dc3ec77e4b2628231374364a017",
+            "reference": "79fb5e03c4ee4dc3ec77e4b2628231374364a017",
+            "shasum": ""
+        },
+        "require": {
+            "php": ">= 5.2"
+        },
+        "suggest": {
+            "ext/mcrypt": "MCrypt extension",
+            "ext/openssl": "OpenSSL extension"
+        },
+        "time": "2016-09-08T13:31:44+00:00",
+        "type": "library",
+        "installation-source": "dist",
+        "autoload": {
+            "classmap": [
+                "src/"
+            ]
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "BSD-3-Clause"
+        ],
+        "description": "A PHP library for XML Security",
+        "homepage": "https://github.com/robrichards/xmlseclibs",
+        "keywords": [
+            "security",
+            "signature",
+            "xml",
+            "xmldsig"
+        ]
     }
 ]
diff --git a/vendor/openid/php-openid/Auth/OpenID/Consumer.php b/vendor/openid/php-openid/Auth/OpenID/Consumer.php
index d562e33..9ac0c50 100644
--- a/vendor/openid/php-openid/Auth/OpenID/Consumer.php
+++ b/vendor/openid/php-openid/Auth/OpenID/Consumer.php
@@ -29,7 +29,7 @@
  * identity check.
  *
  * LIBRARY DESIGN
- * 
+ *
  * This consumer library is designed with that flow in mind.  The goal
  * is to make it as easy as possible to perform the above steps
  * securely.
@@ -427,7 +427,7 @@ class Auth_OpenID_Consumer {
             $loader->fromSession($endpoint_data);
 
         $message = Auth_OpenID_Message::fromPostArgs($query);
-        $response = $this->consumer->complete($message, $endpoint, 
+        $response = $this->consumer->complete($message, $endpoint,
                                               $current_url);
         $this->session->del($this->_token_key);
 
@@ -616,6 +616,9 @@ class Auth_OpenID_GenericConsumer {
         $this->store = $store;
         $this->negotiator = Auth_OpenID_getDefaultNegotiator();
         $this->_use_assocs = (is_null($this->store) ? false : true);
+        if (get_class($this->store) == "Auth_OpenID_DumbStore") {
+            $this->_use_assocs = false;
+        }
 
         $this->fetcher = Auth_Yadis_Yadis::getHTTPFetcher();
 
@@ -666,7 +669,7 @@ class Auth_OpenID_GenericConsumer {
                                         '_completeInvalid');
 
         return call_user_func_array(array($this, $method),
-                                    array($message, &$endpoint, $return_to));
+                                    array($message, $endpoint, $return_to));
     }
 
     /**
@@ -1186,7 +1189,7 @@ class Auth_OpenID_GenericConsumer {
         list($unused, $services) = call_user_func_array($this->discoverMethod,
                                                         array(
                                                             $claimed_id,
-                                                            &$this->fetcher,
+                                                            $this->fetcher,
                                                         ));
 
         if (!$services) {
@@ -1202,7 +1205,7 @@ class Auth_OpenID_GenericConsumer {
     /**
      * @access private
      */
-    function _verifyDiscoveryServices($claimed_id, 
+    function _verifyDiscoveryServices($claimed_id,
                                       $services, $to_match_endpoints)
     {
         // Search the services resulting from discovery to find one
@@ -1210,7 +1213,7 @@ class Auth_OpenID_GenericConsumer {
 
         foreach ($services as $endpoint) {
             foreach ($to_match_endpoints as $to_match_endpoint) {
-                $result = $this->_verifyDiscoverySingle($endpoint, 
+                $result = $this->_verifyDiscoverySingle($endpoint,
                                                         $to_match_endpoint);
 
                 if (!Auth_OpenID::isFailure($result)) {
@@ -1368,7 +1371,7 @@ class Auth_OpenID_GenericConsumer {
             }
         }
         $ca_message = $message->copy();
-        $ca_message->setArg(Auth_OpenID_OPENID_NS, 'mode', 
+        $ca_message->setArg(Auth_OpenID_OPENID_NS, 'mode',
                             'check_authentication');
         return $ca_message;
     }
@@ -1606,7 +1609,7 @@ class Auth_OpenID_GenericConsumer {
 
         $expires_in = Auth_OpenID::intval($expires_in_str);
         if ($expires_in === false) {
-            
+
             $err = sprintf("Could not parse expires_in from association ".
                            "response %s", print_r($assoc_response, true));
             return new Auth_OpenID_FailureResponse(null, $err);
@@ -1953,7 +1956,7 @@ class Auth_OpenID_AuthRequest {
     function htmlMarkup($realm, $return_to=null, $immediate=false,
                         $form_tag_attrs=null)
     {
-        $form = $this->formMarkup($realm, $return_to, $immediate, 
+        $form = $this->formMarkup($realm, $return_to, $immediate,
                                   $form_tag_attrs);
 
         if (Auth_OpenID::isFailure($form)) {
diff --git a/vendor/openid/php-openid/Auth/OpenID/FileStore.php b/vendor/openid/php-openid/Auth/OpenID/FileStore.php
index 7eec791..d74f83d 100644
--- a/vendor/openid/php-openid/Auth/OpenID/FileStore.php
+++ b/vendor/openid/php-openid/Auth/OpenID/FileStore.php
@@ -482,7 +482,7 @@ class Auth_OpenID_FileStore extends Auth_OpenID_OpenIDStore {
         }
 
         if ($handle = opendir($dir)) {
-            while ($item = readdir($handle)) {
+            while (false !== ($item = readdir($handle))) {
                 if (!in_array($item, array('.', '..'))) {
                     if (is_dir($dir . $item)) {
 
diff --git a/vendor/openid/php-openid/Auth/OpenID/PredisStore.php b/vendor/openid/php-openid/Auth/OpenID/PredisStore.php
index 7108c2f..14ecbbd 100644
--- a/vendor/openid/php-openid/Auth/OpenID/PredisStore.php
+++ b/vendor/openid/php-openid/Auth/OpenID/PredisStore.php
@@ -104,8 +104,11 @@ class Auth_OpenID_PredisStore extends Auth_OpenID_OpenIDStore {
         
         // no handle given, receiving the latest issued
         $serverKey = $this->associationServerKey($server_url);
-        $lastKey = $this->redis->lpop($serverKey);
-        if (!$lastKey) { return null; }
+        $lastKey = $this->redis->lindex($serverKey, -1);
+        if (!$lastKey) { 
+            // no previous association with this server
+            return null; 
+        }
 
         // get association, return null if failed
         return $this->getAssociationFromServer($lastKey);
@@ -156,10 +159,10 @@ class Auth_OpenID_PredisStore extends Auth_OpenID_OpenIDStore {
         
         // SETNX will set the value only of the key doesn't exist yet.
         $nonceKey = $this->nonceKey($server_url, $salt);
-        $added = $this->predis->setnx($nonceKey);
+        $added = $this->redis->setnx($nonceKey, "1");
         if ($added) {
             // Will set expiration
-            $this->predis->expire($nonceKey, $Auth_OpenID_SKEW);
+            $this->redis->expire($nonceKey, $Auth_OpenID_SKEW);
             return true;
         } else {
             return false;
diff --git a/vendor/openid/php-openid/Auth/OpenID/TrustRoot.php b/vendor/openid/php-openid/Auth/OpenID/TrustRoot.php
index 000440b..5e69490 100644
--- a/vendor/openid/php-openid/Auth/OpenID/TrustRoot.php
+++ b/vendor/openid/php-openid/Auth/OpenID/TrustRoot.php
@@ -210,7 +210,7 @@ class Auth_OpenID_TrustRoot {
         if ($parts['host'] == 'localhost') {
             return true;
         }
-        
+
         $host_parts = explode('.', $parts['host']);
         if ($parts['wildcard']) {
             // Remove the empty string from the beginning of the array
@@ -413,7 +413,7 @@ function Auth_OpenID_getAllowedReturnURLs($relying_party_url, $fetcher,
     }
 
     call_user_func_array($discover_function,
-                         array($relying_party_url, &$fetcher));
+                         array($relying_party_url, $fetcher));
 
     $return_to_urls = array();
     $matching_endpoints = Auth_OpenID_extractReturnURL($endpoints);
diff --git a/vendor/openid/php-openid/Auth/OpenID/URINorm.php b/vendor/openid/php-openid/Auth/OpenID/URINorm.php
index c051b55..32e8458 100644
--- a/vendor/openid/php-openid/Auth/OpenID/URINorm.php
+++ b/vendor/openid/php-openid/Auth/OpenID/URINorm.php
@@ -93,7 +93,17 @@ function Auth_OpenID_pct_encoded_replace_unreserved($mo)
 
 function Auth_OpenID_pct_encoded_replace($mo)
 {
-    return chr(intval($mo[1], 16));
+    $code = intval($mo[1], 16);
+
+    // Prevent request splitting by ignoring newline and space characters
+    if($code === 0xA || $code === 0xD || $code === ord(' '))
+    {
+        return $mo[0];
+    }
+    else
+    {
+        return chr($code);
+    }
 }
 
 function Auth_OpenID_remove_dot_segments($path)
diff --git a/vendor/openid/php-openid/Auth/Yadis/Manager.php b/vendor/openid/php-openid/Auth/Yadis/Manager.php
index 15e6907..664521c 100644
--- a/vendor/openid/php-openid/Auth/Yadis/Manager.php
+++ b/vendor/openid/php-openid/Auth/Yadis/Manager.php
@@ -414,7 +414,7 @@ class Auth_Yadis_Discovery {
             list($yadis_url, $services) = call_user_func_array($discover_cb,
                                                                array(
                                                                 $this->url,
-                                                                &$fetcher,
+                                                                $fetcher,
                                                                ));
 
             $manager = $this->createManager($services, $yadis_url);
diff --git a/vendor/openid/php-openid/Auth/Yadis/ParanoidHTTPFetcher.php b/vendor/openid/php-openid/Auth/Yadis/ParanoidHTTPFetcher.php
index 125029c..627ea9a 100644
--- a/vendor/openid/php-openid/Auth/Yadis/ParanoidHTTPFetcher.php
+++ b/vendor/openid/php-openid/Auth/Yadis/ParanoidHTTPFetcher.php
@@ -90,6 +90,15 @@ class Auth_Yadis_ParanoidHTTPFetcher extends Auth_Yadis_HTTPFetcher {
             $this->reset();
 
             $c = curl_init();
+            if (defined('Auth_OpenID_DISABLE_SSL_VERIFYPEER')
+                    && Auth_OpenID_DISABLE_SSL_VERIFYPEER === true) {
+                trigger_error(
+                    'You have disabled SSL verifcation, this is a TERRIBLE ' .
+                    'idea in almost all cases. Set Auth_OpenID_DISABLE_SSL_' .
+                    'VERIFYPEER to false if you want to be safe again',
+                    E_USER_WARNING);
+                curl_setopt($c, CURLOPT_SSL_VERIFYPEER, false);
+            }
 
             if ($c === false) {
                 Auth_OpenID::log(
diff --git a/vendor/openid/php-openid/Auth/Yadis/ParseHTML.php b/vendor/openid/php-openid/Auth/Yadis/ParseHTML.php
index 6f0f8b7..255d7cd 100644
--- a/vendor/openid/php-openid/Auth/Yadis/ParseHTML.php
+++ b/vendor/openid/php-openid/Auth/Yadis/ParseHTML.php
@@ -65,29 +65,6 @@ class Auth_Yadis_ParseHTML {
                                       $this->_entity_replacements));
     }
 
-    /**
-     * Replace HTML entities (amp, lt, gt, and quot) as well as
-     * numeric entities (e.g. #x9f;) with their actual values and
-     * return the new string.
-     *
-     * @access private
-     * @param string $str The string in which to look for entities
-     * @return string $new_str The new string entities decoded
-     */
-    function replaceEntities($str)
-    {
-        foreach ($this->_entity_replacements as $old => $new) {
-            $str = preg_replace(sprintf("/&%s;/", $old), $new, $str);
-        }
-
-        // Replace numeric entities because html_entity_decode doesn't
-        // do it for us.
-        $str = preg_replace('~&#x([0-9a-f]+);~ei', 'chr(hexdec("\\1"))', $str);
-        $str = preg_replace('~&#([0-9]+);~e', 'chr(\\1)', $str);
-
-        return $str;
-    }
-
     /**
      * Strip single and double quotes off of a string, if they are
      * present.
@@ -216,7 +193,7 @@ class Auth_Yadis_ParseHTML {
             $link_attrs = array();
             foreach ($attr_matches[0] as $index => $full_match) {
                 $name = $attr_matches[1][$index];
-                $value = $this->replaceEntities(
+                $value = html_entity_decode(
                               $this->removeQuotes($attr_matches[2][$index]));
 
                 $link_attrs[strtolower($name)] = $value;
diff --git a/vendor/openid/php-openid/Auth/Yadis/XML.php b/vendor/openid/php-openid/Auth/Yadis/XML.php
index 39a9942..2b8a20e 100644
--- a/vendor/openid/php-openid/Auth/Yadis/XML.php
+++ b/vendor/openid/php-openid/Auth/Yadis/XML.php
@@ -250,6 +250,10 @@ class Auth_Yadis_dom extends Auth_Yadis_XMLParser {
             return false;
         }
 
+        if (isset($this->doc->doctype)) {
+            return false;
+        }
+
         $this->xpath = new DOMXPath($this->doc);
 
         if ($this->xpath) {
@@ -343,11 +347,11 @@ function Auth_Yadis_getSupportedExtensions()
 function Auth_Yadis_getXMLParser()
 {
     global $__Auth_Yadis_defaultParser;
-    
+
     if (isset($__Auth_Yadis_defaultParser)) {
         return $__Auth_Yadis_defaultParser;
     }
-    
+
     foreach(Auth_Yadis_getSupportedExtensions() as $extension => $classname)
     {
       if (extension_loaded($extension))
@@ -357,7 +361,7 @@ function Auth_Yadis_getXMLParser()
         return $p;
       }
     }
-    
+
     return false;
 }
 
diff --git a/vendor/openid/php-openid/Auth/Yadis/XRDS.php b/vendor/openid/php-openid/Auth/Yadis/XRDS.php
index 1f5af96..044d1e7 100644
--- a/vendor/openid/php-openid/Auth/Yadis/XRDS.php
+++ b/vendor/openid/php-openid/Auth/Yadis/XRDS.php
@@ -429,7 +429,7 @@ class Auth_Yadis_XRDS {
 
                 foreach ($filters as $filter) {
 
-                    if (call_user_func_array($filter, array(&$service))) {
+                    if (call_user_func_array($filter, array($service))) {
                         $matches++;
 
                         if ($filter_mode == SERVICES_YADIS_MATCH_ANY) {
diff --git a/vendor/openid/php-openid/Auth/Yadis/Yadis.php b/vendor/openid/php-openid/Auth/Yadis/Yadis.php
index 9ea2db7..f885367 100644
--- a/vendor/openid/php-openid/Auth/Yadis/Yadis.php
+++ b/vendor/openid/php-openid/Auth/Yadis/Yadis.php
@@ -141,7 +141,7 @@ function Auth_Yadis_getServiceEndpoints($input_url, $xrds_parse_func,
     }
 
     $yadis_result = call_user_func_array($discover_func,
-                                         array($input_url, &$fetcher));
+                                         array($input_url, $fetcher));
 
     if ($yadis_result === null) {
         return array($input_url, array());
diff --git a/vendor/openid/php-openid/README b/vendor/openid/php-openid/README
index 54b873f..2c8f31e 100644
--- a/vendor/openid/php-openid/README
+++ b/vendor/openid/php-openid/README
@@ -33,10 +33,10 @@ Follow these steps:
    - Enable the CURL extension.
 
    - If you plan to use SQLite, PostgreSQL, or MySQL to store OpenID
-     data, you'll need PEAR DB.  You can install this by running this
+     data, you'll need PEAR MDB2.  You can install this by running this
      as root:
 
-     # pear install DB
+     # pear install MDB2
 
      You'll also need to install and enable the appropriate PHP
      database extension.  Alternatively, you can store OpenID data on
diff --git a/vendor/openid/php-openid/composer.json b/vendor/openid/php-openid/composer.json
index 3af0be5..e136b3b 100644
--- a/vendor/openid/php-openid/composer.json
+++ b/vendor/openid/php-openid/composer.json
@@ -1,6 +1,6 @@
 {
     "name": "openid/php-openid",
-    "version": "2.2.2",
+    "version": "2.3.0",
     "description": "OpenID library for PHP5",
     "keywords": ["openid", "authentication", "yadis", "auth"],
     "license": "Apache-2.0",
diff --git a/vendor/openid/php-openid/examples/detect.php b/vendor/openid/php-openid/examples/detect.php
index f809be2..892162f 100644
--- a/vendor/openid/php-openid/examples/detect.php
+++ b/vendor/openid/php-openid/examples/detect.php
@@ -352,7 +352,7 @@ function detect_stores($r, &$out)
     }
 
     $basedir_str = ini_get('open_basedir');
-    if (gettype($basedir_str) == 'string') {
+    if (gettype($basedir_str) == 'string' && $basedir_str) {
         $url = 'http://www.php.net/manual/en/features.safe-mode.php' .
             '#ini.open-basedir';
         $lnk = $r->link($url, 'open_basedir');
diff --git a/vendor/psr/log/Psr/Log/AbstractLogger.php b/vendor/psr/log/Psr/Log/AbstractLogger.php
index 00f9034..90e721a 100644
--- a/vendor/psr/log/Psr/Log/AbstractLogger.php
+++ b/vendor/psr/log/Psr/Log/AbstractLogger.php
@@ -15,8 +15,9 @@ abstract class AbstractLogger implements LoggerInterface
      * System is unusable.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function emergency($message, array $context = array())
     {
@@ -30,8 +31,9 @@ abstract class AbstractLogger implements LoggerInterface
      * trigger the SMS alerts and wake you up.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function alert($message, array $context = array())
     {
@@ -44,8 +46,9 @@ abstract class AbstractLogger implements LoggerInterface
      * Example: Application component unavailable, unexpected exception.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function critical($message, array $context = array())
     {
@@ -57,8 +60,9 @@ abstract class AbstractLogger implements LoggerInterface
      * be logged and monitored.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function error($message, array $context = array())
     {
@@ -72,8 +76,9 @@ abstract class AbstractLogger implements LoggerInterface
      * that are not necessarily wrong.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function warning($message, array $context = array())
     {
@@ -84,8 +89,9 @@ abstract class AbstractLogger implements LoggerInterface
      * Normal but significant events.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function notice($message, array $context = array())
     {
@@ -98,8 +104,9 @@ abstract class AbstractLogger implements LoggerInterface
      * Example: User logs in, SQL logs.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function info($message, array $context = array())
     {
@@ -110,8 +117,9 @@ abstract class AbstractLogger implements LoggerInterface
      * Detailed debug information.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function debug($message, array $context = array())
     {
diff --git a/vendor/psr/log/Psr/Log/LogLevel.php b/vendor/psr/log/Psr/Log/LogLevel.php
index e32c151..9cebcac 100644
--- a/vendor/psr/log/Psr/Log/LogLevel.php
+++ b/vendor/psr/log/Psr/Log/LogLevel.php
@@ -3,16 +3,16 @@
 namespace Psr\Log;
 
 /**
- * Describes log levels
+ * Describes log levels.
  */
 class LogLevel
 {
     const EMERGENCY = 'emergency';
-    const ALERT = 'alert';
-    const CRITICAL = 'critical';
-    const ERROR = 'error';
-    const WARNING = 'warning';
-    const NOTICE = 'notice';
-    const INFO = 'info';
-    const DEBUG = 'debug';
+    const ALERT     = 'alert';
+    const CRITICAL  = 'critical';
+    const ERROR     = 'error';
+    const WARNING   = 'warning';
+    const NOTICE    = 'notice';
+    const INFO      = 'info';
+    const DEBUG     = 'debug';
 }
diff --git a/vendor/psr/log/Psr/Log/LoggerAwareInterface.php b/vendor/psr/log/Psr/Log/LoggerAwareInterface.php
index 2eebc4e..4d64f47 100644
--- a/vendor/psr/log/Psr/Log/LoggerAwareInterface.php
+++ b/vendor/psr/log/Psr/Log/LoggerAwareInterface.php
@@ -3,15 +3,16 @@
 namespace Psr\Log;
 
 /**
- * Describes a logger-aware instance
+ * Describes a logger-aware instance.
  */
 interface LoggerAwareInterface
 {
     /**
-     * Sets a logger instance on the object
+     * Sets a logger instance on the object.
      *
      * @param LoggerInterface $logger
-     * @return null
+     *
+     * @return void
      */
     public function setLogger(LoggerInterface $logger);
 }
diff --git a/vendor/psr/log/Psr/Log/LoggerAwareTrait.php b/vendor/psr/log/Psr/Log/LoggerAwareTrait.php
index f087a3d..639f79b 100644
--- a/vendor/psr/log/Psr/Log/LoggerAwareTrait.php
+++ b/vendor/psr/log/Psr/Log/LoggerAwareTrait.php
@@ -7,12 +7,16 @@ namespace Psr\Log;
  */
 trait LoggerAwareTrait
 {
-    /** @var LoggerInterface */
+    /**
+     * The logger instance.
+     *
+     * @var LoggerInterface
+     */
     protected $logger;
 
     /**
      * Sets a logger.
-     * 
+     *
      * @param LoggerInterface $logger
      */
     public function setLogger(LoggerInterface $logger)
diff --git a/vendor/psr/log/Psr/Log/LoggerInterface.php b/vendor/psr/log/Psr/Log/LoggerInterface.php
index 476bb96..5ea7243 100644
--- a/vendor/psr/log/Psr/Log/LoggerInterface.php
+++ b/vendor/psr/log/Psr/Log/LoggerInterface.php
@@ -3,14 +3,14 @@
 namespace Psr\Log;
 
 /**
- * Describes a logger instance
+ * Describes a logger instance.
  *
  * The message MUST be a string or object implementing __toString().
  *
  * The message MAY contain placeholders in the form: {foo} where foo
  * will be replaced by the context data in key "foo".
  *
- * The context array can contain arbitrary data, the only assumption that
+ * The context array can contain arbitrary data. The only assumption that
  * can be made by implementors is that if an Exception instance is given
  * to produce a stack trace, it MUST be in a key named "exception".
  *
@@ -23,8 +23,9 @@ interface LoggerInterface
      * System is unusable.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function emergency($message, array $context = array());
 
@@ -35,8 +36,9 @@ interface LoggerInterface
      * trigger the SMS alerts and wake you up.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function alert($message, array $context = array());
 
@@ -46,8 +48,9 @@ interface LoggerInterface
      * Example: Application component unavailable, unexpected exception.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function critical($message, array $context = array());
 
@@ -56,8 +59,9 @@ interface LoggerInterface
      * be logged and monitored.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function error($message, array $context = array());
 
@@ -68,8 +72,9 @@ interface LoggerInterface
      * that are not necessarily wrong.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function warning($message, array $context = array());
 
@@ -77,8 +82,9 @@ interface LoggerInterface
      * Normal but significant events.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function notice($message, array $context = array());
 
@@ -88,8 +94,9 @@ interface LoggerInterface
      * Example: User logs in, SQL logs.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function info($message, array $context = array());
 
@@ -97,18 +104,20 @@ interface LoggerInterface
      * Detailed debug information.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function debug($message, array $context = array());
 
     /**
      * Logs with an arbitrary level.
      *
-     * @param mixed $level
+     * @param mixed  $level
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function log($level, $message, array $context = array());
 }
diff --git a/vendor/psr/log/Psr/Log/LoggerTrait.php b/vendor/psr/log/Psr/Log/LoggerTrait.php
index 5912496..867225d 100644
--- a/vendor/psr/log/Psr/Log/LoggerTrait.php
+++ b/vendor/psr/log/Psr/Log/LoggerTrait.php
@@ -6,8 +6,8 @@ namespace Psr\Log;
  * This is a simple Logger trait that classes unable to extend AbstractLogger
  * (because they extend another class, etc) can include.
  *
- * It simply delegates all log-level-specific methods to the `log` method to 
- * reduce boilerplate code that a simple Logger that does the same thing with 
+ * It simply delegates all log-level-specific methods to the `log` method to
+ * reduce boilerplate code that a simple Logger that does the same thing with
  * messages regardless of the error level has to implement.
  */
 trait LoggerTrait
@@ -16,8 +16,9 @@ trait LoggerTrait
      * System is unusable.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function emergency($message, array $context = array())
     {
@@ -31,8 +32,9 @@ trait LoggerTrait
      * trigger the SMS alerts and wake you up.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function alert($message, array $context = array())
     {
@@ -45,8 +47,9 @@ trait LoggerTrait
      * Example: Application component unavailable, unexpected exception.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function critical($message, array $context = array())
     {
@@ -58,8 +61,9 @@ trait LoggerTrait
      * be logged and monitored.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function error($message, array $context = array())
     {
@@ -73,8 +77,9 @@ trait LoggerTrait
      * that are not necessarily wrong.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function warning($message, array $context = array())
     {
@@ -85,8 +90,9 @@ trait LoggerTrait
      * Normal but significant events.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function notice($message, array $context = array())
     {
@@ -99,8 +105,9 @@ trait LoggerTrait
      * Example: User logs in, SQL logs.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function info($message, array $context = array())
     {
@@ -111,8 +118,9 @@ trait LoggerTrait
      * Detailed debug information.
      *
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function debug($message, array $context = array())
     {
@@ -122,10 +130,11 @@ trait LoggerTrait
     /**
      * Logs with an arbitrary level.
      *
-     * @param mixed $level
+     * @param mixed  $level
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     abstract public function log($level, $message, array $context = array());
 }
diff --git a/vendor/psr/log/Psr/Log/NullLogger.php b/vendor/psr/log/Psr/Log/NullLogger.php
index 553a3c5..d8cd682 100644
--- a/vendor/psr/log/Psr/Log/NullLogger.php
+++ b/vendor/psr/log/Psr/Log/NullLogger.php
@@ -3,7 +3,7 @@
 namespace Psr\Log;
 
 /**
- * This Logger can be used to avoid conditional log calls
+ * This Logger can be used to avoid conditional log calls.
  *
  * Logging should always be optional, and if no logger is provided to your
  * library creating a NullLogger instance to have something to throw logs at
@@ -15,10 +15,11 @@ class NullLogger extends AbstractLogger
     /**
      * Logs with an arbitrary level.
      *
-     * @param mixed $level
+     * @param mixed  $level
      * @param string $message
-     * @param array $context
-     * @return null
+     * @param array  $context
+     *
+     * @return void
      */
     public function log($level, $message, array $context = array())
     {
diff --git a/vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php b/vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php
index a932815..4b861c3 100644
--- a/vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php
+++ b/vendor/psr/log/Psr/Log/Test/LoggerInterfaceTest.php
@@ -2,28 +2,32 @@
 
 namespace Psr\Log\Test;
 
+use Psr\Log\LoggerInterface;
 use Psr\Log\LogLevel;
 
 /**
- * Provides a base test class for ensuring compliance with the LoggerInterface
+ * Provides a base test class for ensuring compliance with the LoggerInterface.
  *
- * Implementors can extend the class and implement abstract methods to run this as part of their test suite
+ * Implementors can extend the class and implement abstract methods to run this
+ * as part of their test suite.
  */
 abstract class LoggerInterfaceTest extends \PHPUnit_Framework_TestCase
 {
     /**
      * @return LoggerInterface
      */
-    abstract function getLogger();
+    abstract public function getLogger();
 
     /**
-     * This must return the log messages in order with a simple formatting: "<LOG LEVEL> <MESSAGE>"
+     * This must return the log messages in order.
      *
-     * Example ->error('Foo') would yield "error Foo"
+     * The simple formatting of the messages is: "<LOG LEVEL> <MESSAGE>".
+     *
+     * Example ->error('Foo') would yield "error Foo".
      *
      * @return string[]
      */
-    abstract function getLogs();
+    abstract public function getLogs();
 
     public function testImplements()
     {
@@ -61,7 +65,7 @@ abstract class LoggerInterfaceTest extends \PHPUnit_Framework_TestCase
     }
 
     /**
-     * @expectedException Psr\Log\InvalidArgumentException
+     * @expectedException \Psr\Log\InvalidArgumentException
      */
     public function testThrowsOnInvalidLevel()
     {
@@ -80,16 +84,26 @@ abstract class LoggerInterfaceTest extends \PHPUnit_Framework_TestCase
 
     public function testObjectCastToString()
     {
-        $dummy = $this->getMock('Psr\Log\Test\DummyTest', array('__toString'));
+        if (method_exists($this, 'createPartialMock')) {
+            $dummy = $this->createPartialMock('Psr\Log\Test\DummyTest', array('__toString'));
+        } else {
+            $dummy = $this->getMock('Psr\Log\Test\DummyTest', array('__toString'));
+        }
         $dummy->expects($this->once())
             ->method('__toString')
             ->will($this->returnValue('DUMMY'));
 
         $this->getLogger()->warning($dummy);
+
+        $expected = array('warning DUMMY');
+        $this->assertEquals($expected, $this->getLogs());
     }
 
     public function testContextCanContainAnything()
     {
+        $closed = fopen('php://memory', 'r');
+        fclose($closed);
+
         $context = array(
             'bool' => true,
             'null' => null,
@@ -99,18 +113,32 @@ abstract class LoggerInterfaceTest extends \PHPUnit_Framework_TestCase
             'nested' => array('with object' => new DummyTest),
             'object' => new \DateTime,
             'resource' => fopen('php://memory', 'r'),
+            'closed' => $closed,
         );
 
         $this->getLogger()->warning('Crazy context data', $context);
+
+        $expected = array('warning Crazy context data');
+        $this->assertEquals($expected, $this->getLogs());
     }
 
     public function testContextExceptionKeyCanBeExceptionOrOtherValues()
     {
-        $this->getLogger()->warning('Random message', array('exception' => 'oops'));
-        $this->getLogger()->critical('Uncaught Exception!', array('exception' => new \LogicException('Fail')));
+        $logger = $this->getLogger();
+        $logger->warning('Random message', array('exception' => 'oops'));
+        $logger->critical('Uncaught Exception!', array('exception' => new \LogicException('Fail')));
+
+        $expected = array(
+            'warning Random message',
+            'critical Uncaught Exception!'
+        );
+        $this->assertEquals($expected, $this->getLogs());
     }
 }
 
 class DummyTest
 {
-}
\ No newline at end of file
+    public function __toString()
+    {
+    }
+}
diff --git a/vendor/psr/log/README.md b/vendor/psr/log/README.md
index 574bc1c..5571a25 100644
--- a/vendor/psr/log/README.md
+++ b/vendor/psr/log/README.md
@@ -7,6 +7,13 @@ This repository holds all interfaces/classes/traits related to
 Note that this is not a logger of its own. It is merely an interface that
 describes a logger. See the specification for more details.
 
+Installation
+------------
+
+```bash
+composer require psr/log
+```
+
 Usage
 -----
 
diff --git a/vendor/psr/log/composer.json b/vendor/psr/log/composer.json
index 6bdcc21..87934d7 100644
--- a/vendor/psr/log/composer.json
+++ b/vendor/psr/log/composer.json
@@ -2,6 +2,7 @@
     "name": "psr/log",
     "description": "Common interface for logging libraries",
     "keywords": ["psr", "psr-3", "log"],
+    "homepage": "https://github.com/php-fig/log",
     "license": "MIT",
     "authors": [
         {
@@ -9,9 +10,17 @@
             "homepage": "http://www.php-fig.org/"
         }
     ],
+    "require": {
+        "php": ">=5.3.0"
+    },
     "autoload": {
-        "psr-0": {
-            "Psr\\Log\\": ""
+        "psr-4": {
+            "Psr\\Log\\": "Psr/Log/"
+        }
+    },
+    "extra": {
+        "branch-alias": {
+            "dev-master": "1.0.x-dev"
         }
     }
 }
diff --git a/vendor/simplesamlphp/saml2/.travis.yml b/vendor/simplesamlphp/saml2/.travis.yml
index f989810..921a881 100644
--- a/vendor/simplesamlphp/saml2/.travis.yml
+++ b/vendor/simplesamlphp/saml2/.travis.yml
@@ -4,6 +4,16 @@ php:
   - 5.3
   - 5.4
   - 5.5
+  - 5.6
+  - 7.0
+  - hhvm
+
+matrix:
+  allow_failures:
+    - php: hhvm
 
 script:
   - ant
+
+after_script:
+  - if [[ "$TRAVIS_PHP_VERSION" == "5.6" ]]; then php vendor/bin/coveralls -v; fi
diff --git a/vendor/simplesamlphp/saml2/LICENSE b/vendor/simplesamlphp/saml2/LICENSE
index 7620581..a48e6e3 100644
--- a/vendor/simplesamlphp/saml2/LICENSE
+++ b/vendor/simplesamlphp/saml2/LICENSE
@@ -456,47 +456,3 @@ SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
 DAMAGES.
 
                      END OF TERMS AND CONDITIONS
-
-           How to Apply These Terms to Your New Libraries
-
-  If you develop a new library, and you want it to be of the greatest
-possible use to the public, we recommend making it free software that
-everyone can redistribute and change.  You can do so by permitting
-redistribution under these terms (or, alternatively, under the terms of the
-ordinary General Public License).
-
-  To apply these terms, attach the following notices to the library.  It is
-safest to attach them to the start of each source file to most effectively
-convey the exclusion of warranty; and each file should have at least the
-"copyright" line and a pointer to where the full notice is found.
-
-    SimpleSAMLphps SAML2 library
-    Copyright (C) 2013  Boy Baukema
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Lesser General Public
-    License as published by the Free Software Foundation; either
-    version 2.1 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Lesser General Public License for more details.
-
-    You should have received a copy of the GNU Lesser General Public
-    License along with this library; if not, write to the Free Software
-    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
-
-Also add information on how to contact you by electronic and paper mail.
-
-You should also get your employer (if you work as a programmer) or your
-school, if any, to sign a "copyright disclaimer" for the library, if
-necessary.  Here is a sample; alter the names:
-
-  Yoyodyne, Inc., hereby disclaims all copyright interest in the
-  library `Frob' (a library for tweaking knobs) written by James Random Hacker.
-
-  {signature of Ty Coon}, 1 April 1990
-  Ty Coon, President of Vice
-
-That's all there is to it!
diff --git a/vendor/simplesamlphp/saml2/README-DEV.md b/vendor/simplesamlphp/saml2/README-DEV.md
index 294fe87..42249a9 100644
--- a/vendor/simplesamlphp/saml2/README-DEV.md
+++ b/vendor/simplesamlphp/saml2/README-DEV.md
@@ -13,3 +13,16 @@ Testing
 Use PHPUnit for Unit Testing.
 Test with the 2 known users: (SimpleSAMLphp)[http://www.simplesaml.org] and
 (OpenConext-engineblock)[http://www.openconext.org] .
+
+### Using Tests in Development
+
+In order to run the unittests, use `vendor/bin/phpunit -c tools/phpunit`
+
+Contributing
+------------
+Prior to contributing, please read the following documentation:
+- [Background][2]
+- [Technical Design][1]
+
+[1]: https://github.com/simplesamlphp/saml2/wiki/SAML2-v1.0-Technical-Design
+[2]: https://github.com/simplesamlphp/saml2/wiki/Background
diff --git a/vendor/simplesamlphp/saml2/README.md b/vendor/simplesamlphp/saml2/README.md
index df23de6..fe71326 100644
--- a/vendor/simplesamlphp/saml2/README.md
+++ b/vendor/simplesamlphp/saml2/README.md
@@ -5,9 +5,9 @@ SimpleSAMLphp SAML2 library
 (https://coveralls.io/r/simplesamlphp/saml2)
 
 
-A PHP library for SAML2 related functionality. Extracted from [SimpleSAMLphp](http://www.simplesamlphp.org),
-used by [OpenConext](http://www.openconext.org).
-This library is a collaboration between [UNINETT](http://uninett.no) and [SURFnet](http://surfnet.nl).
+A PHP library for SAML2 related functionality. Extracted from [SimpleSAMLphp](https://www.simplesamlphp.org),
+used by [OpenConext](https://www.openconext.org).
+This library started as a collaboration between [UNINETT](https://www.uninett.no) and [SURFnet](https://www.surfnet.nl) but everyone is invited to contribute.
 
 
 Before you use it
@@ -15,33 +15,28 @@ Before you use it
 **DO NOT USE THIS LIBRARY UNLESS YOU ARE INTIMATELY FAMILIAR WITH THE SAML2 SPECIFICATION.**
 
 If you are not familiar with the SAML2 specification and are simply looking to connect your application using SAML2,
-you should probably use [SimpleSAMLphp](http://www.simplesamlphp.org).
+you should probably use [SimpleSAMLphp](https://www.simplesamlphp.org).
 
-While this library is tagged as stable it is currently not very developer friendly and it's API is likely to change
+While this library is tagged as stable it is currently not very developer friendly and its API is likely to change
 significantly in the future. It is however a starting point for collaboration between parties.
 So let us know what you would like to see in a PHP SAML2 library.
 
-Note that the **HTTP Artifact Binding and SOAP client not work** outside of SimpleSAMLphp.
-
+Note that the **HTTP Artifact Binding and SOAP client do not work** outside of SimpleSAMLphp.
 
 Usage
 -----
 
-* Install with [Composer](http://getcomposer.org/doc/00-intro.md), add the following in your composer.json:
+* Install with [Composer](https://getcomposer.org/doc/00-intro.md), run the following command in your project:
 
-```json
-{
-    "require": {
-        "simplesamlphp/saml2": "0.1.*"
-    }
-}
+```bash
+composer require simplesamlphp/saml2
 ```
 
-Then run ```composer update```.
-
 * Provide the required external dependencies by extending and implementing the ```SAML2_Compat_AbstractContainer```
   then injecting it in the ContainerSingleton (see example below).
 
+* **Make sure you've read the security section below**
+
 * Use at will.
 Example:
 ```php
@@ -54,7 +49,7 @@ Example:
 
     // Set up an AuthnRequest
     $request = new SAML2_AuthnRequest();
-    $request->setId(SAML2_Utils::generateId());
+    $request->setId($container->generateId());
     $request->setIssuer('https://sp.example.edu');
     $request->setDestination('https://idp.example.edu');
 
@@ -63,6 +58,14 @@ Example:
     $binding->send($request);
 ```
 
+Security
+--------
+* Should you need to create a DOMDocument instance, use the `SAML2_DOMDocumentFactory` to create DOMDocuments from
+  either a string (`SAML2_DOMDocumentFactory::fromString($theXmlAsString)`), a file (`SAML2_DOMDocumentFactory::fromFile($pathToTheFile)`)
+  or just a new instance (`SAML2_DOMDocumentFactory::create()`). This in order to protect yourself against the
+  [XXE Processing Vulnerability](https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing), as well as
+  [XML Entity Expansion](https://phpsecurity.readthedocs.org/en/latest/Injection-Attacks.html#defenses-against-xml-entity-expansion) attacks
+
 License
 -------
 This library is licensed under the LGPL license version 2.1.
diff --git a/vendor/simplesamlphp/saml2/build.xml b/vendor/simplesamlphp/saml2/build.xml
index 2ca14cb..ff63ea3 100644
--- a/vendor/simplesamlphp/saml2/build.xml
+++ b/vendor/simplesamlphp/saml2/build.xml
@@ -22,7 +22,7 @@
     </target>
 
     <target name="composer-install" depends="check-composer" unless="composer.installed">
-        <get src="http://getcomposer.org/composer.phar" dest="composer.phar"/>
+        <get src="https://getcomposer.org/composer.phar" dest="composer.phar"/>
     </target>
 
     <target name="composer-update" depends="composer-install">
@@ -37,17 +37,45 @@
         </exec>
     </target>
 
-    <target name="php-lint-ci" description="Perform syntax check of sourcecode files">
-        <apply executable="php" failonerror="true">
-            <arg value="-l"/>
+    <target name="get-changeset.php.raw"
+            description="creates a list of changed php files separated by newline">
+        <pathconvert property="changeset.php.raw" pathsep="${line.separator}">
             <fileset dir="src">
                 <include name="**/*.php"/>
                 <modified/>
             </fileset>
-        </apply>
+        </pathconvert>
+
+        <!--Check if files are modified-->
+        <condition property="changeset.php.notempty">
+            <not>
+                <equals arg1="${changeset.php.raw}" arg2="" trim="true"/>
+            </not>
+        </condition>
+    </target>
+
+    <target name="get-changeset.php.spacesep" depends="get-changeset.php.raw" if="changeset.php.notempty"
+            description="Creates a quoted list of changed php files separated by spaces">
+        <loadresource property="changeset.php.spacesep">
+            <propertyresource name="changeset.php.raw"/>
+            <filterchain>
+                <tokenfilter delimoutput=" ">
+                    <linetokenizer/>
+                    <replaceregex pattern="^" replace='"'/>
+                    <replaceregex pattern="$" replace='"'/>
+                </tokenfilter>
+            </filterchain>
+        </loadresource>
     </target>
-    
-    
+
+    <target name="php-lint-ci" depends="get-changeset.php.spacesep" if="changeset.php.notempty"
+            description="Perform syntax check of sourcecode files in parallel">
+        <exec executable="sh" failonerror="true">
+            <arg value="-c"/>
+            <arg value="echo '${changeset.php.spacesep}' | xargs -n 1 -P 4 php -l 1>/dev/null"/>
+        </exec>
+    </target>
+
     <target name="php-security-checker" description="Check your composer dependencies for insecure components">
         <exec executable="vendor/bin/security-checker" failonerror="false">
             <arg value="security:check"/>
@@ -55,7 +83,7 @@
             <arg value="composer.lock"/>
         </exec>
     </target>
-    
+
     <target name="phpmd" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
         <exec executable="vendor/bin/phpmd" failonerror="true">
             <arg path="src"/>
@@ -69,12 +97,10 @@
 
     <target name="phpmd-ci"
             description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
-        <exec executable="vendor/bin/phpmd" output="/dev/null" failonerror="true">
+        <exec executable="vendor/bin/phpmd" failonerror="true">
             <arg path="src"/>
-            <arg value="xml"/>
+            <arg value="text"/>
             <arg value="tools/phpmd/ruleset.xml"/>
-            <arg value="--reportfile"/>
-            <arg value="build/artifacts/logs/pmd.xml"/>
             <!-- These classes are already messes, exclude them for now... -->
             <arg value="--exclude" />
             <arg value="${basedir}/src/SAML2/AuthnRequest.php,${basedir}/src/SAML2/Assertion.php,${basedir}/src/SAML2/SOAP.php,${basedir}/src/SAML2/SOAPClient.php,${basedir}/src/SAML2/Utils.php,${basedir}/src/SAML2/XML/md/EntityDescriptor.php,${basedir}/src/SAML2/XML/md/RoleDescriptor.php,${basedir}/src/SAML2/XML/saml/SubjectConfirmationData.php" />
@@ -92,22 +118,21 @@
 
     <target name="phpcs-ci"
             description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
-        <exec executable="vendor/bin/phpcs" output="/dev/null" failonerror="true">
-            <arg value="--report-checkstyle=build/artifacts/logs/checkstyle-php.xml"/>
+        <exec executable="vendor/bin/phpcs" failonerror="true">
+            <arg value="--report=full"/>
             <arg value="--standard=tools/phpcs/ruleset.xml"/>
+            <arg value="--warning-severity=0"/>
             <arg value="--extensions=php"/>
             <arg path="src"/>
         </exec>
     </target>
-    
+
     <target name="phpcpd-ci" description="Find duplicate code using PHPCPD">
         <exec executable="vendor/bin/phpcpd" failonerror="false">
-            <arg value="--log-pmd"/>
-            <arg value="build/artifacts/logs/pmd-cpd.xml"/>
             <arg path="src"/>
         </exec>
     </target>
-    
+
     <target name="phpunit" description="Run unit tests with PHPUnit">
         <exec executable="vendor/bin/phpunit" failonerror="true">
             <arg line="--configuration=${basedir}/tools/phpunit"/>
@@ -117,10 +142,8 @@
     <target name="phpunit-ci" description="Run unit tests with PHPUnit">
         <exec executable="vendor/bin/phpunit" failonerror="true">
             <arg line="--configuration=${basedir}/tools/phpunit"/>
-            <arg line="--coverage-html=build/artifacts/coverage"/>
-            <arg line="--log-junit=build/artifacts/logs/junit.xml"/>
-            <arg line="--coverage-clover=build/artifacts/logs/clover.xml"/>
+            <arg line="--coverage-clover=${basedir}/build/artifacts/coverage/clover.xml"/>
         </exec>
     </target>
-    
+
 </project>
diff --git a/vendor/simplesamlphp/saml2/composer.json b/vendor/simplesamlphp/saml2/composer.json
index c5c79e0..b2283ab 100644
--- a/vendor/simplesamlphp/saml2/composer.json
+++ b/vendor/simplesamlphp/saml2/composer.json
@@ -12,21 +12,27 @@
         "php": ">=5.3.3",
         "ext-openssl": "*",
         "ext-dom": "*",
-        "ext-mcrypt": "*",
-        
-        "simplesamlphp/xmlseclibs": "~1.3.1",
-        "psr/log": "1.0.0"
+
+        "robrichards/xmlseclibs": "^1.3",
+        "psr/log": "~1.0"
     },
     "require-dev": {
         "squizlabs/php_codesniffer": "~1.4",
         "phpmd/phpmd": "~1.5",
         "sensiolabs/security-checker": "~1.1",
         "phpunit/phpunit": "~3.7",
-        "sebastian/phpcpd": "~1.4"
+        "satooshi/php-coveralls": "~0.6.1",
+        "sebastian/phpcpd": "~1.4",
+        "mockery/mockery": "~0.9"
     },
     "autoload": {
         "psr-0": {
             "SAML2_": "src/"
         }
+    },
+    "autoload-dev": {
+        "psr-0": {
+            "SAML2_": "tests/"
+        }
     }
 }
diff --git a/vendor/simplesamlphp/saml2/composer.lock b/vendor/simplesamlphp/saml2/composer.lock
index 64ed2c5..51e14eb 100644
--- a/vendor/simplesamlphp/saml2/composer.lock
+++ b/vendor/simplesamlphp/saml2/composer.lock
@@ -1,9 +1,10 @@
 {
     "_readme": [
         "This file locks the dependencies of your project to a known state",
-        "Read more about it at http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file"
+        "Read more about it at http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
+        "This file is @generated automatically"
     ],
-    "hash": "d98f9045b7f7a329823de01b4d468880",
+    "hash": "7eef7fe4ad07e291e4923d53eba0a847",
     "packages": [
         {
             "name": "psr/log",
@@ -44,27 +45,22 @@
             "time": "2012-12-21 11:40:51"
         },
         {
-            "name": "simplesamlphp/xmlseclibs",
-            "version": "1.3.1",
+            "name": "robrichards/xmlseclibs",
+            "version": "1.3.2",
             "source": {
                 "type": "git",
-                "url": "https://github.com/simplesamlphp/xmlseclibs.git",
-                "reference": "9c40e9ebd753af89062fe972d4ec0d3e4a5569d9"
+                "url": "https://github.com/robrichards/xmlseclibs.git",
+                "reference": "5e3c8a03990b9a97d1ea714bcba391d2f58e5b2d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/robrichards/xmlseclibs/zipball/9c40e9ebd753af89062fe972d4ec0d3e4a5569d9",
-                "reference": "9c40e9ebd753af89062fe972d4ec0d3e4a5569d9",
+                "url": "https://api.github.com/repos/robrichards/xmlseclibs/zipball/5e3c8a03990b9a97d1ea714bcba391d2f58e5b2d",
+                "reference": "5e3c8a03990b9a97d1ea714bcba391d2f58e5b2d",
                 "shasum": ""
             },
-            "replace": {
-                "cdatazone/xmlseclibs": "self.version",
-                "fr3d/xmlseclibs": "self.version",
-                "robrichards/xmlseclibs": "self.version"
-            },
             "suggest": {
-                "ext/mcrypt": "",
-                "ext/openssl": ""
+                "ext/mcrypt": "MCrypt extension",
+                "ext/openssl": "OpenSSL extension"
             },
             "type": "library",
             "autoload": {
@@ -76,26 +72,176 @@
             "license": [
                 "BSD-3-Clause"
             ],
-            "authors": [
-                {
-                    "name": "Rob Richards"
-                }
-            ],
             "description": "A PHP library for XML Security",
-            "homepage": "http://code.google.com/p/xmlseclibs/",
+            "homepage": "https://github.com/robrichards/xmlseclibs",
             "keywords": [
-                "certificate",
                 "security",
                 "signature",
-                "signing",
-                "x.509",
                 "xml",
-                "xmlsec"
+                "xmldsig"
             ],
-            "time": "2013-06-19 00:00:00"
+            "time": "2015-05-21 19:26:03"
         }
     ],
     "packages-dev": [
+        {
+            "name": "guzzle/guzzle",
+            "version": "v3.9.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/guzzle/guzzle3.git",
+                "reference": "54991459675c1a2924122afbb0e5609ade581155"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/guzzle/guzzle3/zipball/54991459675c1a2924122afbb0e5609ade581155",
+                "reference": "54991459675c1a2924122afbb0e5609ade581155",
+                "shasum": ""
+            },
+            "require": {
+                "ext-curl": "*",
+                "php": ">=5.3.3",
+                "symfony/event-dispatcher": "~2.1"
+            },
+            "replace": {
+                "guzzle/batch": "self.version",
+                "guzzle/cache": "self.version",
+                "guzzle/common": "self.version",
+                "guzzle/http": "self.version",
+                "guzzle/inflection": "self.version",
+                "guzzle/iterator": "self.version",
+                "guzzle/log": "self.version",
+                "guzzle/parser": "self.version",
+                "guzzle/plugin": "self.version",
+                "guzzle/plugin-async": "self.version",
+                "guzzle/plugin-backoff": "self.version",
+                "guzzle/plugin-cache": "self.version",
+                "guzzle/plugin-cookie": "self.version",
+                "guzzle/plugin-curlauth": "self.version",
+                "guzzle/plugin-error-response": "self.version",
+                "guzzle/plugin-history": "self.version",
+                "guzzle/plugin-log": "self.version",
+                "guzzle/plugin-md5": "self.version",
+                "guzzle/plugin-mock": "self.version",
+                "guzzle/plugin-oauth": "self.version",
+                "guzzle/service": "self.version",
+                "guzzle/stream": "self.version"
+            },
+            "require-dev": {
+                "doctrine/cache": "~1.3",
+                "monolog/monolog": "~1.0",
+                "phpunit/phpunit": "3.7.*",
+                "psr/log": "~1.0",
+                "symfony/class-loader": "~2.1",
+                "zendframework/zend-cache": "2.*,<2.3",
+                "zendframework/zend-log": "2.*,<2.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "3.9-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Guzzle": "src/",
+                    "Guzzle\\Tests": "tests/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Michael Dowling",
+                    "email": "mtdowling@gmail.com",
+                    "homepage": "https://github.com/mtdowling"
+                },
+                {
+                    "name": "Guzzle Community",
+                    "homepage": "https://github.com/guzzle/guzzle/contributors"
+                }
+            ],
+            "description": "Guzzle is a PHP HTTP client library and framework for building RESTful web service clients",
+            "homepage": "http://guzzlephp.org/",
+            "keywords": [
+                "client",
+                "curl",
+                "framework",
+                "http",
+                "http client",
+                "rest",
+                "web service"
+            ],
+            "time": "2014-08-11 04:32:36"
+        },
+        {
+            "name": "mockery/mockery",
+            "version": "0.9.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/padraic/mockery.git",
+                "reference": "95a4855380dc70176c51807c678fb3bd6198529a"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/padraic/mockery/zipball/95a4855380dc70176c51807c678fb3bd6198529a",
+                "reference": "95a4855380dc70176c51807c678fb3bd6198529a",
+                "shasum": ""
+            },
+            "require": {
+                "lib-pcre": ">=7.0",
+                "php": ">=5.3.2"
+            },
+            "require-dev": {
+                "hamcrest/hamcrest-php": "~1.1",
+                "phpunit/phpunit": "~4.0",
+                "satooshi/php-coveralls": "~0.7@dev"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "0.9.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Mockery": "library/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "P\u00e1draic Brady",
+                    "email": "padraic.brady@gmail.com",
+                    "homepage": "http://blog.astrumfutura.com"
+                },
+                {
+                    "name": "Dave Marshall",
+                    "email": "dave.marshall@atstsolutions.co.uk",
+                    "homepage": "http://davedevelopment.co.uk"
+                }
+            ],
+            "description": "Mockery is a simple yet flexible PHP mock object framework for use in unit testing with PHPUnit, PHPSpec or any other testing framework. Its core goal is to offer a test double framework with a succint API capable of clearly defining all possible object operations and interactions using a human readable Domain Specific Language (DSL). Designed as a drop in alternative to PHPUnit's phpunit-mock-objects library, Mockery is easy to integrate with PHPUnit and can operate alongside phpunit-mock-objects without the World ending.",
+            "homepage": "http://github.com/padraic/mockery",
+            "keywords": [
+                "BDD",
+                "TDD",
+                "library",
+                "mock",
+                "mock objects",
+                "mockery",
+                "stub",
+                "test",
+                "test double",
+                "testing"
+            ],
+            "time": "2014-09-03 10:11:10"
+        },
         {
             "name": "pdepend/pdepend",
             "version": "1.1.3",
@@ -131,22 +277,26 @@
         },
         {
             "name": "phpmd/phpmd",
-            "version": "1.5.0",
+            "version": "1.5.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/phpmd/phpmd.git",
-                "reference": "692b7b1b64518091b2b1bea91b489dbb13598c07"
+                "reference": "f2d47500f4c5f80ee442d95829c62c2ece2bbeb6"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/phpmd/phpmd/zipball/692b7b1b64518091b2b1bea91b489dbb13598c07",
-                "reference": "692b7b1b64518091b2b1bea91b489dbb13598c07",
+                "url": "https://api.github.com/repos/phpmd/phpmd/zipball/f2d47500f4c5f80ee442d95829c62c2ece2bbeb6",
+                "reference": "f2d47500f4c5f80ee442d95829c62c2ece2bbeb6",
                 "shasum": ""
             },
             "require": {
-                "pdepend/pdepend": ">=1.1.1",
+                "pdepend/pdepend": "1.1.*",
                 "php": ">=5.3.0"
             },
+            "require-dev": {
+                "phpunit/phpunit": "3.*@stable",
+                "squizlabs/php_codesniffer": "@stable"
+            },
             "bin": [
                 "src/bin/phpmd"
             ],
@@ -156,28 +306,31 @@
                 "../../pdepend/pdepend/src/main/php",
                 "src/main/php"
             ],
+            "license": [
+                "BSD-3-Clause"
+            ],
             "description": "Official version of PHPMD handled with Composer.",
-            "time": "2013-07-26 14:47:02"
+            "time": "2014-09-16 14:26:49"
         },
         {
             "name": "phpunit/php-code-coverage",
-            "version": "1.2.16",
+            "version": "1.2.18",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
-                "reference": "69e55e68481cf708a6db43aff0b504e31402fe27"
+                "reference": "fe2466802556d3fe4e4d1d58ffd3ccfd0a19be0b"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/69e55e68481cf708a6db43aff0b504e31402fe27",
-                "reference": "69e55e68481cf708a6db43aff0b504e31402fe27",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/fe2466802556d3fe4e4d1d58ffd3ccfd0a19be0b",
+                "reference": "fe2466802556d3fe4e4d1d58ffd3ccfd0a19be0b",
                 "shasum": ""
             },
             "require": {
                 "php": ">=5.3.3",
                 "phpunit/php-file-iterator": ">=1.3.0@stable",
                 "phpunit/php-text-template": ">=1.2.0@stable",
-                "phpunit/php-token-stream": ">=1.1.3@stable"
+                "phpunit/php-token-stream": ">=1.1.3,<1.3.0"
             },
             "require-dev": {
                 "phpunit/phpunit": "3.7.*@dev"
@@ -218,7 +371,7 @@
                 "testing",
                 "xunit"
             ],
-            "time": "2014-02-25 03:34:05"
+            "time": "2014-09-02 10:13:14"
         },
         {
             "name": "phpunit/php-file-iterator",
@@ -405,39 +558,38 @@
         },
         {
             "name": "phpunit/phpunit",
-            "version": "3.7.32",
+            "version": "3.7.38",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/phpunit.git",
-                "reference": "2752cbb9ea5bd84c2811b34b6953f76965ec7a2f"
+                "reference": "38709dc22d519a3d1be46849868aa2ddf822bcf6"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/2752cbb9ea5bd84c2811b34b6953f76965ec7a2f",
-                "reference": "2752cbb9ea5bd84c2811b34b6953f76965ec7a2f",
+                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/38709dc22d519a3d1be46849868aa2ddf822bcf6",
+                "reference": "38709dc22d519a3d1be46849868aa2ddf822bcf6",
                 "shasum": ""
             },
             "require": {
+                "ext-ctype": "*",
                 "ext-dom": "*",
+                "ext-json": "*",
                 "ext-pcre": "*",
                 "ext-reflection": "*",
                 "ext-spl": "*",
                 "php": ">=5.3.3",
-                "phpunit/php-code-coverage": "~1.2.1",
-                "phpunit/php-file-iterator": ">=1.3.1",
-                "phpunit/php-text-template": ">=1.1.1",
-                "phpunit/php-timer": ">=1.0.4",
-                "phpunit/phpunit-mock-objects": "~1.2.0",
+                "phpunit/php-code-coverage": "~1.2",
+                "phpunit/php-file-iterator": "~1.3",
+                "phpunit/php-text-template": "~1.1",
+                "phpunit/php-timer": "~1.0",
+                "phpunit/phpunit-mock-objects": "~1.2",
                 "symfony/yaml": "~2.0"
             },
             "require-dev": {
                 "pear-pear.php.net/pear": "1.9.4"
             },
             "suggest": {
-                "ext-json": "*",
-                "ext-simplexml": "*",
-                "ext-tokenizer": "*",
-                "phpunit/php-invoker": ">=1.1.0,<1.2.0"
+                "phpunit/php-invoker": "~1.1"
             },
             "bin": [
                 "composer/bin/phpunit"
@@ -475,7 +627,7 @@
                 "testing",
                 "xunit"
             ],
-            "time": "2014-02-25 03:47:29"
+            "time": "2014-10-17 09:04:17"
         },
         {
             "name": "phpunit/phpunit-mock-objects",
@@ -526,6 +678,74 @@
             ],
             "time": "2013-01-13 10:24:48"
         },
+        {
+            "name": "satooshi/php-coveralls",
+            "version": "v0.6.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/satooshi/php-coveralls.git",
+                "reference": "dd0df95bd37a7cf5c5c50304dfe260ffe4b50760"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/satooshi/php-coveralls/zipball/dd0df95bd37a7cf5c5c50304dfe260ffe4b50760",
+                "reference": "dd0df95bd37a7cf5c5c50304dfe260ffe4b50760",
+                "shasum": ""
+            },
+            "require": {
+                "ext-curl": "*",
+                "ext-json": "*",
+                "ext-simplexml": "*",
+                "guzzle/guzzle": ">=3.0",
+                "php": ">=5.3",
+                "psr/log": "1.0.0",
+                "symfony/config": ">=2.0",
+                "symfony/console": ">=2.0",
+                "symfony/stopwatch": ">=2.2",
+                "symfony/yaml": ">=2.0"
+            },
+            "require-dev": {
+                "apigen/apigen": "2.8.*@stable",
+                "pdepend/pdepend": "dev-master",
+                "phpmd/phpmd": "dev-master",
+                "phpunit/php-invoker": ">=1.1.0,<1.2.0",
+                "phpunit/phpunit": "3.7.*@stable",
+                "sebastian/finder-facade": "dev-master",
+                "sebastian/phpcpd": "1.4.*@stable",
+                "squizlabs/php_codesniffer": "1.4.*@stable",
+                "theseer/fdomdocument": "dev-master"
+            },
+            "bin": [
+                "composer/bin/coveralls"
+            ],
+            "type": "library",
+            "autoload": {
+                "psr-0": {
+                    "Contrib\\Component": "src/",
+                    "Contrib\\Bundle": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Kitamura Satoshi",
+                    "email": "with.no.parachute@gmail.com",
+                    "homepage": "https://www.facebook.com/satooshi.jp"
+                }
+            ],
+            "description": "PHP client library for Coveralls API",
+            "homepage": "https://github.com/satooshi/php-coveralls",
+            "keywords": [
+                "ci",
+                "coverage",
+                "github",
+                "test"
+            ],
+            "time": "2013-05-04 08:07:33"
+        },
         {
             "name": "sebastian/finder-facade",
             "version": "1.1.0",
@@ -650,16 +870,16 @@
         },
         {
             "name": "sensiolabs/security-checker",
-            "version": "v1.3",
+            "version": "v1.3.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sensiolabs/security-checker.git",
-                "reference": "254540f5e6cd7fcb3b5b859a4bffbf04f8151ad6"
+                "reference": "da1f9d19c80eac2b6ae8043bb92b7c7a16d00713"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sensiolabs/security-checker/zipball/254540f5e6cd7fcb3b5b859a4bffbf04f8151ad6",
-                "reference": "254540f5e6cd7fcb3b5b859a4bffbf04f8151ad6",
+                "url": "https://api.github.com/repos/sensiolabs/security-checker/zipball/da1f9d19c80eac2b6ae8043bb92b7c7a16d00713",
+                "reference": "da1f9d19c80eac2b6ae8043bb92b7c7a16d00713",
                 "shasum": ""
             },
             "require": {
@@ -691,20 +911,20 @@
                 }
             ],
             "description": "A security checker for your composer.lock",
-            "time": "2013-10-24 16:05:00"
+            "time": "2014-07-08 18:12:35"
         },
         {
             "name": "squizlabs/php_codesniffer",
-            "version": "1.5.2",
+            "version": "1.5.5",
             "source": {
                 "type": "git",
                 "url": "https://github.com/squizlabs/PHP_CodeSniffer.git",
-                "reference": "a76a39b317ce8106abe6264daa505e24e1731860"
+                "reference": "5d973e59cf58a0c847f298de84374c96b42b17b3"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/a76a39b317ce8106abe6264daa505e24e1731860",
-                "reference": "a76a39b317ce8106abe6264daa505e24e1731860",
+                "url": "https://api.github.com/repos/squizlabs/PHP_CodeSniffer/zipball/5d973e59cf58a0c847f298de84374c96b42b17b3",
+                "reference": "5d973e59cf58a0c847f298de84374c96b42b17b3",
                 "shasum": ""
             },
             "require": {
@@ -718,6 +938,11 @@
                 "scripts/phpcs"
             ],
             "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-phpcs-fixer": "2.0.x-dev"
+                }
+            },
             "autoload": {
                 "classmap": [
                     "CodeSniffer.php",
@@ -761,36 +986,86 @@
                 "phpcs",
                 "standards"
             ],
-            "time": "2014-02-04 23:49:58"
+            "time": "2014-09-25 03:33:46"
+        },
+        {
+            "name": "symfony/config",
+            "version": "v2.5.7",
+            "target-dir": "Symfony/Component/Config",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/Config.git",
+                "reference": "7b11dceebaaf877b75bc1aedfd831a2ddc326de9"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/Config/zipball/7b11dceebaaf877b75bc1aedfd831a2ddc326de9",
+                "reference": "7b11dceebaaf877b75bc1aedfd831a2ddc326de9",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3",
+                "symfony/filesystem": "~2.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.5-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Symfony\\Component\\Config\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Symfony Community",
+                    "homepage": "http://symfony.com/contributors"
+                },
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                }
+            ],
+            "description": "Symfony Config Component",
+            "homepage": "http://symfony.com",
+            "time": "2014-11-20 13:22:25"
         },
         {
             "name": "symfony/console",
-            "version": "v2.4.2",
+            "version": "v2.5.7",
             "target-dir": "Symfony/Component/Console",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/Console.git",
-                "reference": "940f217cbc3c8a33e5403e7c595495c4884400fe"
+                "reference": "61b13c27c9258e97009249d4ef193c964bf346b7"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Console/zipball/940f217cbc3c8a33e5403e7c595495c4884400fe",
-                "reference": "940f217cbc3c8a33e5403e7c595495c4884400fe",
+                "url": "https://api.github.com/repos/symfony/Console/zipball/61b13c27c9258e97009249d4ef193c964bf346b7",
+                "reference": "61b13c27c9258e97009249d4ef193c964bf346b7",
                 "shasum": ""
             },
             "require": {
                 "php": ">=5.3.3"
             },
             "require-dev": {
+                "psr/log": "~1.0",
                 "symfony/event-dispatcher": "~2.1"
             },
             "suggest": {
+                "psr/log": "For using the console logger",
                 "symfony/event-dispatcher": ""
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.4-dev"
+                    "dev-master": "2.5-dev"
                 }
             },
             "autoload": {
@@ -803,34 +1078,136 @@
                 "MIT"
             ],
             "authors": [
+                {
+                    "name": "Symfony Community",
+                    "homepage": "http://symfony.com/contributors"
+                },
                 {
                     "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com",
-                    "homepage": "http://fabien.potencier.org",
-                    "role": "Lead Developer"
+                    "email": "fabien@symfony.com"
+                }
+            ],
+            "description": "Symfony Console Component",
+            "homepage": "http://symfony.com",
+            "time": "2014-11-20 13:22:25"
+        },
+        {
+            "name": "symfony/event-dispatcher",
+            "version": "v2.5.7",
+            "target-dir": "Symfony/Component/EventDispatcher",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/EventDispatcher.git",
+                "reference": "bb6fc12085cd195dceaf48016087b12b632df497"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/EventDispatcher/zipball/bb6fc12085cd195dceaf48016087b12b632df497",
+                "reference": "bb6fc12085cd195dceaf48016087b12b632df497",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "require-dev": {
+                "psr/log": "~1.0",
+                "symfony/config": "~2.0",
+                "symfony/dependency-injection": "~2.0,<2.6.0",
+                "symfony/stopwatch": "~2.2"
+            },
+            "suggest": {
+                "symfony/dependency-injection": "",
+                "symfony/http-kernel": ""
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.5-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Symfony\\Component\\EventDispatcher\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Symfony Community",
+                    "homepage": "http://symfony.com/contributors"
                 },
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                }
+            ],
+            "description": "Symfony EventDispatcher Component",
+            "homepage": "http://symfony.com",
+            "time": "2014-10-30 20:17:55"
+        },
+        {
+            "name": "symfony/filesystem",
+            "version": "v2.5.7",
+            "target-dir": "Symfony/Component/Filesystem",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/Filesystem.git",
+                "reference": "3c3e382bd869b3ec10008a3d9ef455b1cc2868db"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/Filesystem/zipball/3c3e382bd869b3ec10008a3d9ef455b1cc2868db",
+                "reference": "3c3e382bd869b3ec10008a3d9ef455b1cc2868db",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.5-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Symfony\\Component\\Filesystem\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
                 {
                     "name": "Symfony Community",
                     "homepage": "http://symfony.com/contributors"
+                },
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
                 }
             ],
-            "description": "Symfony Console Component",
+            "description": "Symfony Filesystem Component",
             "homepage": "http://symfony.com",
-            "time": "2014-02-11 13:52:09"
+            "time": "2014-11-16 17:28:00"
         },
         {
             "name": "symfony/finder",
-            "version": "v2.4.2",
+            "version": "v2.5.7",
             "target-dir": "Symfony/Component/Finder",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/Finder.git",
-                "reference": "b6735d1fc16da13c4c7dddfe78366a4a098cf011"
+                "reference": "743aabbf4958663ef626e10ae3a6c7b17a0fa3bd"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Finder/zipball/b6735d1fc16da13c4c7dddfe78366a4a098cf011",
-                "reference": "b6735d1fc16da13c4c7dddfe78366a4a098cf011",
+                "url": "https://api.github.com/repos/symfony/Finder/zipball/743aabbf4958663ef626e10ae3a6c7b17a0fa3bd",
+                "reference": "743aabbf4958663ef626e10ae3a6c7b17a0fa3bd",
                 "shasum": ""
             },
             "require": {
@@ -839,7 +1216,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.4-dev"
+                    "dev-master": "2.5-dev"
                 }
             },
             "autoload": {
@@ -853,33 +1230,78 @@
             ],
             "authors": [
                 {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com",
-                    "homepage": "http://fabien.potencier.org",
-                    "role": "Lead Developer"
+                    "name": "Symfony Community",
+                    "homepage": "http://symfony.com/contributors"
                 },
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                }
+            ],
+            "description": "Symfony Finder Component",
+            "homepage": "http://symfony.com",
+            "time": "2014-10-26 07:41:27"
+        },
+        {
+            "name": "symfony/stopwatch",
+            "version": "v2.5.7",
+            "target-dir": "Symfony/Component/Stopwatch",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/Stopwatch.git",
+                "reference": "9f8a33a24f2378c0ec5f372a8d50b2d43069c050"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/Stopwatch/zipball/9f8a33a24f2378c0ec5f372a8d50b2d43069c050",
+                "reference": "9f8a33a24f2378c0ec5f372a8d50b2d43069c050",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.5-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Symfony\\Component\\Stopwatch\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
                 {
                     "name": "Symfony Community",
                     "homepage": "http://symfony.com/contributors"
+                },
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
                 }
             ],
-            "description": "Symfony Finder Component",
+            "description": "Symfony Stopwatch Component",
             "homepage": "http://symfony.com",
-            "time": "2014-01-07 13:28:54"
+            "time": "2014-09-22 09:14:18"
         },
         {
             "name": "symfony/yaml",
-            "version": "v2.4.2",
+            "version": "v2.5.7",
             "target-dir": "Symfony/Component/Yaml",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/Yaml.git",
-                "reference": "bb6ddaf8956139d1b8c360b4b713ed0138e876b3"
+                "reference": "900d38bc8f74a50343ce65dd1c1e9819658ee56b"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Yaml/zipball/bb6ddaf8956139d1b8c360b4b713ed0138e876b3",
-                "reference": "bb6ddaf8956139d1b8c360b4b713ed0138e876b3",
+                "url": "https://api.github.com/repos/symfony/Yaml/zipball/900d38bc8f74a50343ce65dd1c1e9819658ee56b",
+                "reference": "900d38bc8f74a50343ce65dd1c1e9819658ee56b",
                 "shasum": ""
             },
             "require": {
@@ -888,7 +1310,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.4-dev"
+                    "dev-master": "2.5-dev"
                 }
             },
             "autoload": {
@@ -901,33 +1323,31 @@
                 "MIT"
             ],
             "authors": [
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com",
-                    "homepage": "http://fabien.potencier.org",
-                    "role": "Lead Developer"
-                },
                 {
                     "name": "Symfony Community",
                     "homepage": "http://symfony.com/contributors"
+                },
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
                 }
             ],
             "description": "Symfony Yaml Component",
             "homepage": "http://symfony.com",
-            "time": "2014-01-07 13:28:54"
+            "time": "2014-11-20 13:22:25"
         },
         {
             "name": "theseer/fdomdocument",
-            "version": "1.5.0",
+            "version": "1.6.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/theseer/fDOMDocument.git",
-                "reference": "137aa3b13bef05b4e301899cbabdaf7d501847d2"
+                "reference": "d08cf070350f884c63fc9078d27893c2ab6c7cef"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/theseer/fDOMDocument/zipball/137aa3b13bef05b4e301899cbabdaf7d501847d2",
-                "reference": "137aa3b13bef05b4e301899cbabdaf7d501847d2",
+                "url": "https://api.github.com/repos/theseer/fDOMDocument/zipball/d08cf070350f884c63fc9078d27893c2ab6c7cef",
+                "reference": "d08cf070350f884c63fc9078d27893c2ab6c7cef",
                 "shasum": ""
             },
             "require": {
@@ -954,22 +1374,25 @@
             ],
             "description": "The classes contained within this repository extend the standard DOM to use exceptions at all occasions of errors instead of PHP warnings or notices. They also add various custom methods and shortcuts for convenience and to simplify the usage of DOM.",
             "homepage": "https://github.com/theseer/fDOMDocument",
-            "time": "2014-02-19 00:20:43"
+            "time": "2014-09-13 10:57:19"
         },
         {
             "name": "zetacomponents/base",
-            "version": "1.8",
+            "version": "1.9",
             "source": {
                 "type": "git",
                 "url": "https://github.com/zetacomponents/Base.git",
-                "reference": "52ca69c1de55f3fa4f595779e5bc831da7ee176c"
+                "reference": "f20df24e8de3e48b6b69b2503f917e457281e687"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/zetacomponents/Base/zipball/52ca69c1de55f3fa4f595779e5bc831da7ee176c",
-                "reference": "52ca69c1de55f3fa4f595779e5bc831da7ee176c",
+                "url": "https://api.github.com/repos/zetacomponents/Base/zipball/f20df24e8de3e48b6b69b2503f917e457281e687",
+                "reference": "f20df24e8de3e48b6b69b2503f917e457281e687",
                 "shasum": ""
             },
+            "require-dev": {
+                "zetacomponents/unit-test": "*"
+            },
             "type": "library",
             "autoload": {
                 "classmap": [
@@ -978,7 +1401,7 @@
             },
             "notification-url": "https://packagist.org/downloads/",
             "license": [
-                "apache2"
+                "Apache-2.0"
             ],
             "authors": [
                 {
@@ -1014,22 +1437,28 @@
             ],
             "description": "The Base package provides the basic infrastructure that all packages rely on. Therefore every component relies on this package.",
             "homepage": "https://github.com/zetacomponents",
-            "time": "2009-12-21 12:14:16"
+            "time": "2014-09-19 03:28:34"
         },
         {
             "name": "zetacomponents/console-tools",
-            "version": "1.6",
+            "version": "1.7",
             "source": {
                 "type": "git",
                 "url": "https://github.com/zetacomponents/ConsoleTools.git",
-                "reference": "e0a0def574009f7cfdf79bf0838a810bcf643775"
+                "reference": "30d67e9d04f458ac8cae4c49e50f81061460ff2c"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/zetacomponents/ConsoleTools/zipball/e0a0def574009f7cfdf79bf0838a810bcf643775",
-                "reference": "e0a0def574009f7cfdf79bf0838a810bcf643775",
+                "url": "https://api.github.com/repos/zetacomponents/ConsoleTools/zipball/30d67e9d04f458ac8cae4c49e50f81061460ff2c",
+                "reference": "30d67e9d04f458ac8cae4c49e50f81061460ff2c",
                 "shasum": ""
             },
+            "require": {
+                "zetacomponents/base": "~1.8"
+            },
+            "require-dev": {
+                "zetacomponents/unit-test": "*"
+            },
             "type": "library",
             "autoload": {
                 "classmap": [
@@ -1038,7 +1467,7 @@
             },
             "notification-url": "https://packagist.org/downloads/",
             "license": [
-                "apache2"
+                "Apache-2.0"
             ],
             "authors": [
                 {
@@ -1074,23 +1503,18 @@
             ],
             "description": "A set of classes to do different actions with the console (also called shell). It can render a progress bar, tables and a status bar and contains a class for parsing command line options.",
             "homepage": "https://github.com/zetacomponents",
-            "time": "2009-12-21 12:19:33"
+            "time": "2014-09-27 19:26:09"
         }
     ],
-    "aliases": [
-
-    ],
+    "aliases": [],
     "minimum-stability": "stable",
-    "stability-flags": [
-
-    ],
+    "stability-flags": [],
+    "prefer-stable": false,
     "platform": {
         "php": ">=5.3.3",
         "ext-openssl": "*",
         "ext-dom": "*",
         "ext-mcrypt": "*"
     },
-    "platform-dev": [
-
-    ]
+    "platform-dev": []
 }
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/Assertion.php b/vendor/simplesamlphp/saml2/src/SAML2/Assertion.php
index d3f8f04..2684401 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/Assertion.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/Assertion.php
@@ -49,11 +49,11 @@ class SAML2_Assertion implements SAML2_SignedElement
     /**
      * The encrypted Attributes.
      *
-     * If this is not NULL, the Attributes needs decryption before it can be accessed.
+     * If this is not NULL, these Attributes need decryption before they can be accessed.
      *
      * @var DOMElement[]|NULL
      */
-    private $encryptedAttribute;
+    private $encryptedAttributes;
 
     /**
      * Private key we should use to encrypt the attributes.
@@ -198,6 +198,11 @@ class SAML2_Assertion implements SAML2_SignedElement
      */
     private $SubjectConfirmation;
 
+    /**
+     * @var bool
+     */
+    protected $wasSignedAtConstruction = FALSE;
+
     /**
      * Constructor for SAML 2 assertions.
      *
@@ -207,9 +212,9 @@ class SAML2_Assertion implements SAML2_SignedElement
     public function __construct(DOMElement $xml = NULL)
     {
         $this->id = SAML2_Utils::getContainer()->generateId();
-        $this->issueInstant = time();
+        $this->issueInstant = SAML2_Utilities_Temporal::getTime();
         $this->issuer = '';
-        $this->authnInstant = time();
+        $this->authnInstant = SAML2_Utilities_Temporal::getTime();
         $this->attributes = array();
         $this->nameFormat = SAML2_Const::NAMEFORMAT_UNSPECIFIED;
         $this->certificates = array();
@@ -499,7 +504,7 @@ class SAML2_Assertion implements SAML2_SignedElement
      */
     private function parseEncryptedAttributes(DOMElement $xml)
     {
-        $this->encryptedAttribute = SAML2_Utils::xpQuery(
+        $this->encryptedAttributes = SAML2_Utils::xpQuery(
             $xml,
             './saml_assertion:AttributeStatement/saml_assertion:EncryptedAttribute'
         );
@@ -515,6 +520,7 @@ class SAML2_Assertion implements SAML2_SignedElement
         /* Validate the signature element of the message. */
         $sig = SAML2_Utils::validateElement($xml);
         if ($sig !== FALSE) {
+            $this->wasSignedAtConstruction = TRUE;
             $this->certificates = $sig['Certificates'];
             $this->signatureData = $sig;
         }
@@ -649,11 +655,7 @@ class SAML2_Assertion implements SAML2_SignedElement
      */
     public function isNameIdEncrypted()
     {
-        if ($this->encryptedNameId !== NULL) {
-            return TRUE;
-        }
-
-        return FALSE;
+        return $this->encryptedNameId !== NULL;
     }
 
     /**
@@ -664,7 +666,7 @@ class SAML2_Assertion implements SAML2_SignedElement
     public function encryptNameId(XMLSecurityKey $key)
     {
         /* First create a XML representation of the NameID. */
-        $doc = new DOMDocument();
+        $doc = SAML2_DOMDocumentFactory::create();
         $root = $doc->createElement('root');
         $doc->appendChild($root);
         SAML2_Utils::addNameId($root, $this->nameId);
@@ -708,6 +710,16 @@ class SAML2_Assertion implements SAML2_SignedElement
         $this->encryptedNameId = NULL;
     }
 
+    /**
+     * Did this Assertion contain encrypted Attributes?
+     *
+     * @return bool
+     */
+    public function hasEncryptedAttributes()
+    {
+        return $this->encryptedAttributes !== NULL;
+    }
+
     /**
      * Decrypt the assertion attributes.
      *
@@ -717,11 +729,11 @@ class SAML2_Assertion implements SAML2_SignedElement
      */
     public function decryptAttributes(XMLSecurityKey $key, array $blacklist = array())
     {
-        if ($this->encryptedAttribute === NULL) {
+        if ($this->encryptedAttributes === NULL) {
             return;
         }
         $firstAttribute = TRUE;
-        $attributes = $this->encryptedAttribute;
+        $attributes = $this->encryptedAttributes;
         foreach ($attributes as $attributeEnc) {
             /*Decrypt node <EncryptedAttribute>*/
             $attribute = SAML2_Utils::decryptElement(
@@ -1203,6 +1215,14 @@ class SAML2_Assertion implements SAML2_SignedElement
         return $this->certificates;
     }
 
+    /**
+     * @return bool
+     */
+    public function getWasSignedAtConstruction()
+    {
+        return $this->wasSignedAtConstruction;
+    }
+
     /**
      * Convert this assertion to an XML element.
      *
@@ -1212,7 +1232,7 @@ class SAML2_Assertion implements SAML2_SignedElement
     public function toXML(DOMNode $parentElement = NULL)
     {
         if ($parentElement === NULL) {
-            $document = new DOMDocument();
+            $document = SAML2_DOMDocumentFactory::create();
             $parentElement = $document;
         } else {
             $document = $parentElement->ownerDocument;
@@ -1448,7 +1468,7 @@ class SAML2_Assertion implements SAML2_SignedElement
         $root->appendChild($attributeStatement);
 
         foreach ($this->attributes as $name => $values) {
-            $document2 = new DOMDocument();
+            $document2 = SAML2_DOMDocumentFactory::create();
             $attribute = $document2->createElementNS(SAML2_Const::NS_SAML, 'saml:Attribute');
             $attribute->setAttribute('Name', $name);
             $document2->appendChild($attribute);
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/AuthnRequest.php b/vendor/simplesamlphp/saml2/src/SAML2/AuthnRequest.php
index b1c1aee..0427620 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/AuthnRequest.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/AuthnRequest.php
@@ -101,6 +101,20 @@ class SAML2_AuthnRequest extends SAML2_Request
      */
     private $requestedAuthnContext;
 
+    /**
+     * @var SAML2_XML_saml_SubjectConfirmation[]
+     */
+    private $subjectConfirmation = array();
+
+    /**
+     * @var string
+     */
+    private $encryptedNameId;
+
+    /**
+     * @var string
+     */
+    private $nameId;
 
     /**
      * Constructor for SAML 2 authentication request messages.
@@ -139,67 +153,137 @@ class SAML2_AuthnRequest extends SAML2_Request
             $this->assertionConsumerServiceIndex = (int) $xml->getAttribute('AssertionConsumerServiceIndex');
         }
 
+        $this->parseSubject($xml);
+        $this->parseNameIdPolicy($xml);
+        $this->parseRequestedAuthnContext($xml);
+        $this->parseScoping($xml);
+    }
+
+    /**
+     * @param $xml
+     *
+     * @throws Exception
+     */
+    private function parseSubject(DOMElement $xml)
+    {
+        $subject = SAML2_Utils::xpQuery($xml, './saml_assertion:Subject');
+        if (empty($subject)) {
+            return;
+        }
+
+        if (count($subject) > 1) {
+            throw new Exception('More than one <saml:Subject> in <saml:AuthnRequest>.');
+        }
+        $subject = $subject[0];
+
+        $nameId = SAML2_Utils::xpQuery(
+            $subject,
+            './saml_assertion:NameID | ./saml_assertion:EncryptedID/xenc:EncryptedData'
+        );
+        if (empty($nameId)) {
+            throw new Exception('Missing <saml:NameID> or <saml:EncryptedID> in <saml:Subject>.');
+        } elseif (count($nameId) > 1) {
+            throw new Exception('More than one <saml:NameID> or <saml:EncryptedID> in <saml:Subject>.');
+        }
+        $nameId = $nameId[0];
+        if ($nameId->localName === 'EncryptedData') {
+            /* The NameID element is encrypted. */
+            $this->encryptedNameId = $nameId;
+        } else {
+            $this->nameId = SAML2_Utils::parseNameId($nameId);
+        }
+
+        $subjectConfirmation = SAML2_Utils::xpQuery($subject, './saml_assertion:SubjectConfirmation');
+        foreach ($subjectConfirmation as $sc) {
+            $this->subjectConfirmation[] = new SAML2_XML_saml_SubjectConfirmation($sc);
+        }
+    }
+
+    /**
+     * @param DOMElement $xml
+     *
+     * @throws Exception
+     */
+    protected function parseNameIdPolicy(DOMElement $xml)
+    {
         $nameIdPolicy = SAML2_Utils::xpQuery($xml, './saml_protocol:NameIDPolicy');
+        if (empty($nameIdPolicy)) {
+            return;
+        }
 
-        if (!empty($nameIdPolicy)) {
-            $nameIdPolicy = $nameIdPolicy[0];
-            if ($nameIdPolicy->hasAttribute('Format')) {
-                $this->nameIdPolicy['Format'] = $nameIdPolicy->getAttribute('Format');
-            }
-            if ($nameIdPolicy->hasAttribute('SPNameQualifier')) {
-                $this->nameIdPolicy['SPNameQualifier'] = $nameIdPolicy->getAttribute('SPNameQualifier');
-            }
-            if ($nameIdPolicy->hasAttribute('AllowCreate')) {
-                $this->nameIdPolicy['AllowCreate'] = SAML2_Utils::parseBoolean($nameIdPolicy, 'AllowCreate', FALSE);
-            }
+        $nameIdPolicy = $nameIdPolicy[0];
+        if ($nameIdPolicy->hasAttribute('Format')) {
+            $this->nameIdPolicy['Format'] = $nameIdPolicy->getAttribute('Format');
+        }
+        if ($nameIdPolicy->hasAttribute('SPNameQualifier')) {
+            $this->nameIdPolicy['SPNameQualifier'] = $nameIdPolicy->getAttribute('SPNameQualifier');
         }
+        if ($nameIdPolicy->hasAttribute('AllowCreate')) {
+            $this->nameIdPolicy['AllowCreate'] = SAML2_Utils::parseBoolean($nameIdPolicy, 'AllowCreate', FALSE);
+        }
+    }
 
+    /**
+     * @param DOMElement $xml
+     */
+    protected function parseRequestedAuthnContext(DOMElement $xml)
+    {
         $requestedAuthnContext = SAML2_Utils::xpQuery($xml, './saml_protocol:RequestedAuthnContext');
-        if (!empty($requestedAuthnContext)) {
-            $requestedAuthnContext = $requestedAuthnContext[0];
+        if (empty($requestedAuthnContext)) {
+            return;
+        }
 
-            $rac = array(
-                'AuthnContextClassRef' => array(),
-                'Comparison' => 'exact',
-            );
+        $requestedAuthnContext = $requestedAuthnContext[0];
 
-            $accr = SAML2_Utils::xpQuery($requestedAuthnContext, './saml_assertion:AuthnContextClassRef');
-            foreach ($accr as $i) {
-                $rac['AuthnContextClassRef'][] = trim($i->textContent);
-            }
+        $rac = array(
+            'AuthnContextClassRef' => array(),
+            'Comparison'           => SAML2_Const::COMPARISON_EXACT,
+        );
 
-            if ($requestedAuthnContext->hasAttribute('Comparison')) {
-                $rac['Comparison'] = $requestedAuthnContext->getAttribute('Comparison');
-            }
+        $accr = SAML2_Utils::xpQuery($requestedAuthnContext, './saml_assertion:AuthnContextClassRef');
+        foreach ($accr as $i) {
+            $rac['AuthnContextClassRef'][] = trim($i->textContent);
+        }
 
-            $this->requestedAuthnContext = $rac;
+        if ($requestedAuthnContext->hasAttribute('Comparison')) {
+            $rac['Comparison'] = $requestedAuthnContext->getAttribute('Comparison');
         }
 
+        $this->requestedAuthnContext = $rac;
+    }
+
+    /**
+     * @param DOMElement $xml
+     *
+     * @throws Exception
+     */
+    protected function parseScoping(DOMElement $xml)
+    {
         $scoping = SAML2_Utils::xpQuery($xml, './saml_protocol:Scoping');
-        if (!empty($scoping)) {
-            $scoping =$scoping[0];
+        if (empty($scoping)) {
+            return;
+        }
 
-            if ($scoping->hasAttribute('ProxyCount')) {
-                $this->ProxyCount = (int) $scoping->getAttribute('ProxyCount');
-            }
-            $idpEntries = SAML2_Utils::xpQuery($scoping, './saml_protocol:IDPList/saml_protocol:IDPEntry');
+        $scoping = $scoping[0];
 
-            foreach ($idpEntries as $idpEntry) {
-                if (!$idpEntry->hasAttribute('ProviderID')) {
-                    throw new Exception("Could not get ProviderID from Scoping/IDPEntry element in AuthnRequest object");
-                }
-                $this->IDPList[] = $idpEntry->getAttribute('ProviderID');
-            }
+        if ($scoping->hasAttribute('ProxyCount')) {
+            $this->ProxyCount = (int) $scoping->getAttribute('ProxyCount');
+        }
+        $idpEntries = SAML2_Utils::xpQuery($scoping, './saml_protocol:IDPList/saml_protocol:IDPEntry');
 
-            $requesterIDs = SAML2_Utils::xpQuery($scoping, './saml_protocol:RequesterID');
-            foreach ($requesterIDs as $requesterID) {
-                $this->RequesterID[] = trim($requesterID->textContent);
+        foreach ($idpEntries as $idpEntry) {
+            if (!$idpEntry->hasAttribute('ProviderID')) {
+                throw new Exception("Could not get ProviderID from Scoping/IDPEntry element in AuthnRequest object");
             }
+            $this->IDPList[] = $idpEntry->getAttribute('ProviderID');
+        }
 
+        $requesterIDs = SAML2_Utils::xpQuery($scoping, './saml_protocol:RequesterID');
+        foreach ($requesterIDs as $requesterID) {
+            $this->RequesterID[] = trim($requesterID->textContent);
         }
     }
 
-
     /**
      * Retrieve the NameIdPolicy.
      *
@@ -301,12 +385,17 @@ class SAML2_AuthnRequest extends SAML2_Request
 
 
     /**
-     * This function sets the scoping for the request
-     * See Core 3.4.1.2 for the definition of scoping
-     * Currently we only support an IDPList of idpEntries
-     * and only the required ProviderID in an IDPEntry
-     * $providerIDs is an array of Entity Identifiers
+     * This function sets the scoping for the request.
+     * See Core 3.4.1.2 for the definition of scoping.
+     * Currently we support an IDPList of idpEntries.
      *
+     * Each idpEntries consists of an array, containing
+     * keys (mapped to attributes) and corresponding values.
+     * Allowed attributes: Loc, Name, ProviderID.
+     *
+     * For backward compatibility, an idpEntries can also
+     * be a string instead of an array, where each string
+     * is mapped to the value of attribute ProviderID.
      */
     public function setIDPList($IDPList)
     {
@@ -320,28 +409,39 @@ class SAML2_AuthnRequest extends SAML2_Request
      * Currently we only support a list of ipd ientity id's.
      * @return array List of idp EntityIDs from the request
      */
-
     public function getIDPList()
     {
         return $this->IDPList;
     }
 
+    /**
+     * @param int $ProxyCount
+     */
     public function setProxyCount($ProxyCount)
     {
         assert('is_int($ProxyCount)');
         $this->ProxyCount = $ProxyCount;
     }
 
+    /**
+     * @return int
+     */
     public function getProxyCount()
     {
         return $this->ProxyCount;
     }
 
+    /**
+     * @param array $RequesterID
+     */
     public function setRequesterID(array $RequesterID)
     {
         $this->RequesterID = $RequesterID;
     }
 
+    /**
+     * @return array
+     */
     public function getRequesterID()
     {
         return $this->RequesterID;
@@ -457,6 +557,110 @@ class SAML2_AuthnRequest extends SAML2_Request
         $this->requestedAuthnContext = $requestedAuthnContext;
     }
 
+    /**
+     * Retrieve the NameId of the subject in the assertion.
+     *
+     * The returned NameId is in the format used by SAML2_Utils::addNameId().
+     *
+     * @see SAML2_Utils::addNameId()
+     * @return array|NULL The name identifier of the assertion.
+     * @throws Exception
+     */
+    public function getNameId()
+    {
+        if ($this->encryptedNameId !== NULL) {
+            throw new Exception('Attempted to retrieve encrypted NameID without decrypting it first.');
+        }
+
+        return $this->nameId;
+    }
+
+    /**
+     * Set the NameId of the subject in the assertion.
+     *
+     * The NameId must be in the format accepted by SAML2_Utils::addNameId().
+     *
+     * @see SAML2_Utils::addNameId()
+     *
+     * @param array|NULL $nameId The name identifier of the assertion.
+     */
+    public function setNameId($nameId)
+    {
+        assert('is_array($nameId) || is_null($nameId)');
+
+        $this->nameId = $nameId;
+    }
+
+    /**
+     * Encrypt the NameID in the AuthnRequest.
+     *
+     * @param XMLSecurityKey $key The encryption key.
+     */
+    public function encryptNameId(XMLSecurityKey $key)
+    {
+        /* First create a XML representation of the NameID. */
+        $doc  = new DOMDocument();
+        $root = $doc->createElement('root');
+        $doc->appendChild($root);
+        SAML2_Utils::addNameId($root, $this->nameId);
+        $nameId = $root->firstChild;
+
+        SAML2_Utils::getContainer()->debugMessage($nameId, 'encrypt');
+
+        /* Encrypt the NameID. */
+        $enc = new XMLSecEnc();
+        $enc->setNode($nameId);
+        // @codingStandardsIgnoreStart
+        $enc->type = XMLSecEnc::Element;
+        // @codingStandardsIgnoreEnd
+
+        $symmetricKey = new XMLSecurityKey(XMLSecurityKey::AES128_CBC);
+        $symmetricKey->generateSessionKey();
+        $enc->encryptKey($key, $symmetricKey);
+
+        $this->encryptedNameId = $enc->encryptNode($symmetricKey);
+        $this->nameId          = NULL;
+    }
+
+    /**
+     * Decrypt the NameId of the subject in the assertion.
+     *
+     * @param XMLSecurityKey $key       The decryption key.
+     * @param array          $blacklist Blacklisted decryption algorithms.
+     */
+    public function decryptNameId(XMLSecurityKey $key, array $blacklist = array())
+    {
+        if ($this->encryptedNameId === NULL) {
+            /* No NameID to decrypt. */
+            return;
+        }
+
+        $nameId = SAML2_Utils::decryptElement($this->encryptedNameId, $key, $blacklist);
+        SAML2_Utils::getContainer()->debugMessage($nameId, 'decrypt');
+        $this->nameId = SAML2_Utils::parseNameId($nameId);
+
+        $this->encryptedNameId = NULL;
+    }
+
+    /**
+     * Retrieve the SubjectConfirmation elements we have in our Subject element.
+     *
+     * @return SAML2_XML_saml_SubjectConfirmation[]
+     */
+    public function getSubjectConfirmation()
+    {
+        return $this->subjectConfirmation;
+    }
+
+    /**
+     * Set the SubjectConfirmation elements that should be included in the assertion.
+     *
+     * @param array SAML2_XML_saml_SubjectConfirmation[]
+     */
+    public function setSubjectConfirmation(array $subjectConfirmation)
+    {
+        $this->subjectConfirmation = $subjectConfirmation;
+    }
 
     /**
      * Convert this authentication request to an XML element.
@@ -471,7 +675,6 @@ class SAML2_AuthnRequest extends SAML2_Request
             $root->setAttribute('ForceAuthn', 'true');
         }
 
-
         if ($this->ProviderName !== NULL) {
             $root->setAttribute('ProviderName', $this->ProviderName);
         }
@@ -495,6 +698,8 @@ class SAML2_AuthnRequest extends SAML2_Request
             $root->setAttribute('AttributeConsumingServiceIndex', $this->attributeConsumingServiceIndex);
         }
 
+        $this->addSubject($root);
+
         if (!empty($this->nameIdPolicy)) {
             $nameIdPolicy = $this->document->createElementNS(SAML2_Const::NS_SAMLP, 'NameIDPolicy');
             if (array_key_exists('Format', $this->nameIdPolicy)) {
@@ -513,7 +718,7 @@ class SAML2_AuthnRequest extends SAML2_Request
         if (!empty($rac) && !empty($rac['AuthnContextClassRef'])) {
             $e = $this->document->createElementNS(SAML2_Const::NS_SAMLP, 'RequestedAuthnContext');
             $root->appendChild($e);
-            if (isset($rac['Comparison']) && $rac['Comparison'] !== 'exact') {
+            if (isset($rac['Comparison']) && $rac['Comparison'] !== SAML2_Const::COMPARISON_EXACT) {
                 $e->setAttribute('Comparison', $rac['Comparison']);
             }
             foreach ($rac['AuthnContextClassRef'] as $accr) {
@@ -531,7 +736,19 @@ class SAML2_AuthnRequest extends SAML2_Request
                 $idplist = $this->document->createElementNS(SAML2_Const::NS_SAMLP, 'IDPList');
                 foreach ($this->IDPList as $provider) {
                     $idpEntry = $this->document->createElementNS(SAML2_Const::NS_SAMLP, 'IDPEntry');
-                    $idpEntry->setAttribute('ProviderID', $provider);
+                    if (is_string($provider)) {
+                        $idpEntry->setAttribute('ProviderID', $provider);
+                    } elseif (is_array($provider)) {
+                        foreach ($provider as $attribute => $value) {
+                            if (in_array($attribute, array(
+                                'ProviderID',
+                                'Loc',
+                                'Name'
+                            ))) {
+                                $idpEntry->setAttribute($attribute, $value);
+                            }
+                        }
+                    }
                     $idplist->appendChild($idpEntry);
                 }
                 $scoping->appendChild($idplist);
@@ -544,4 +761,31 @@ class SAML2_AuthnRequest extends SAML2_Request
         return $root;
     }
 
+    /**
+     * Add a Subject-node to the assertion.
+     *
+     * @param DOMElement $root The assertion element we should add the subject to.
+     */
+    private function addSubject(DOMElement $root)
+    {
+        // If there is no nameId (encrypted or not) there is nothing to create a subject for
+        if ($this->nameId === NULL && $this->encryptedNameId === NULL) {
+            return;
+        }
+
+        $subject = $root->ownerDocument->createElementNS(SAML2_Const::NS_SAML, 'saml:Subject');
+        $root->appendChild($subject);
+
+        if ($this->encryptedNameId === NULL) {
+            SAML2_Utils::addNameId($subject, $this->nameId);
+        } else {
+            $eid = $subject->ownerDocument->createElementNS(SAML2_Const::NS_SAML, 'saml:EncryptedID');
+            $eid->appendChild($subject->ownerDocument->importNode($this->encryptedNameId, TRUE));
+            $subject->appendChild($eid);
+        }
+
+        foreach ($this->subjectConfirmation as $sc) {
+            $sc->toXML($subject);
+        }
+    }
 }
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/Const.php b/vendor/simplesamlphp/saml2/src/SAML2/Const.php
index 6fa9c18..9963063 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/Const.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/Const.php
@@ -51,6 +51,38 @@ class SAML2_Const
     * Holder-of-Key subject confirmation method.
     */
     const CM_HOK = 'urn:oasis:names:tc:SAML:2.0:cm:holder-of-key';
+    
+    /**
+     * Vouches subject confirmation method.
+     */
+    const CM_VOUCHES = 'urn:oasis:names:tc:SAML:2.0:cm:sender-vouches';
+
+    /**
+     * Request Authentication Context Comparison indicating that  the resulting authentication context in the
+     * authentication statement MUST be stronger (as deemed by the responder) than any one of the authentication
+     * contexts specified
+     */
+    const COMPARISON_BETTER = 'better';
+
+    /**
+     * Request Authentication Context Comparison indicating that the resulting authentication context in the
+     * authentication statement MUST be the exact match of at least one of the authentication contexts specified
+     */
+    const COMPARISON_EXACT = 'exact';
+
+    /**
+     * Request Authentication Context Comparison indicating that the resulting authentication context in the
+     * authentication statement MUST be as strong as possible (as deemed by the responder) without exceeding the
+     * strength of at least one of the authentication contexts specified.
+     */
+    const COMPARISON_MAXIMUM = 'maximum';
+
+    /**
+     * Request Authentication Context Comparison indicating that he resulting authentication context in the
+     * authentication statement MUST be at least as strong (as deemed by the responder) as one of the authentication
+     * contexts specified.
+     */
+    const COMPARISON_MINIMUM = 'minimum';
 
     /**
      * No claim as to principal consent is being made.
@@ -167,6 +199,12 @@ class SAML2_Const
     const NS_HOK = 'urn:oasis:names:tc:SAML:2.0:profiles:holder-of-key:SSO:browser';
 
     /**
+     * The status namespace
+     */
+    const STATUS_PREFIX = 'urn:oasis:names:tc:SAML:2.0:status:';
+
+    /**
+     * Top-level status code indicating successful processing of the request.
      * The request succeeded. Additional information MAY be returned in the <StatusMessage>
      * and/or <StatusDetail> elements.
      *
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/EncryptedAssertion.php b/vendor/simplesamlphp/saml2/src/SAML2/EncryptedAssertion.php
index 00e4540..7596d5e 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/EncryptedAssertion.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/EncryptedAssertion.php
@@ -101,7 +101,7 @@ class SAML2_EncryptedAssertion
     public function toXML(DOMNode $parentElement = NULL)
     {
         if ($parentElement === NULL) {
-            $document = new DOMDocument();
+            $document = SAML2_DOMDocumentFactory::create();
             $parentElement = $document;
         } else {
             $document = $parentElement->ownerDocument;
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/HTTPArtifact.php b/vendor/simplesamlphp/saml2/src/SAML2/HTTPArtifact.php
index 7337cc7..a67eccb 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/HTTPArtifact.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/HTTPArtifact.php
@@ -5,6 +5,8 @@
  *
  * @author  Danny Bollaert, UGent AS. <danny.bollaert@ugent.be>
  * @package SimpleSAMLphp
+ *
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
  */
 class SAML2_HTTPArtifact extends SAML2_Binding
 {
@@ -32,7 +34,7 @@ class SAML2_HTTPArtifact extends SAML2_Binding
         $artifactData = $message->toUnsignedXML();
         $artifactDataString = $artifactData->ownerDocument->saveXML($artifactData);
 
-        $store->set('artifact', $artifact, $artifactDataString, time() + 15*60);
+        $store->set('artifact', $artifact, $artifactDataString, SAML2_Utilities_Temporal::getTime() + 15*60);
 
         $params = array(
             'SAMLart' => $artifact,
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/HTTPPost.php b/vendor/simplesamlphp/saml2/src/SAML2/HTTPPost.php
index 66b88b5..5167de3 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/HTTPPost.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/HTTPPost.php
@@ -68,8 +68,7 @@ class SAML2_HTTPPost extends SAML2_Binding
 
         SAML2_Utils::getContainer()->debugMessage($msg, 'in');
 
-        $document = new DOMDocument();
-        $document->loadXML($msg);
+        $document = SAML2_DOMDocumentFactory::fromString($msg);
         $xml = $document->firstChild;
 
         $msg = SAML2_Message::fromXML($xml);
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/HTTPRedirect.php b/vendor/simplesamlphp/saml2/src/SAML2/HTTPRedirect.php
index f151b24..0854c08 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/HTTPRedirect.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/HTTPRedirect.php
@@ -86,60 +86,61 @@ class SAML2_HTTPRedirect extends SAML2_Binding
      *
      * @return SAML2_Message The received message.
      * @throws Exception
+     *
+     * NPath is currently too high but solving that just moves code around.
+     * @SuppressWarnings(PHPMD.NPathComplexity)
      */
     public function receive()
     {
         $data = self::parseQuery();
-
         if (array_key_exists('SAMLRequest', $data)) {
-            $msg = $data['SAMLRequest'];
+            $message = $data['SAMLRequest'];
         } elseif (array_key_exists('SAMLResponse', $data)) {
-            $msg = $data['SAMLResponse'];
+            $message = $data['SAMLResponse'];
         } else {
             throw new Exception('Missing SAMLRequest or SAMLResponse parameter.');
         }
 
-        if (array_key_exists('SAMLEncoding', $data)) {
-            $encoding = $data['SAMLEncoding'];
-        } else {
-            $encoding = self::DEFLATE;
+        if (isset($data['SAMLEncoding']) && $data['SAMLEncoding'] !== self::DEFLATE) {
+            throw new Exception('Unknown SAMLEncoding: ' . var_export($data['SAMLEncoding'], TRUE));
         }
 
-        $msg = base64_decode($msg);
-        switch ($encoding) {
-            case self::DEFLATE:
-                $msg = gzinflate($msg);
-                break;
-            default:
-                throw new Exception('Unknown SAMLEncoding: ' . var_export($encoding, TRUE));
+        $message = base64_decode($message);
+        if ($message === FALSE) {
+            throw new Exception('Error while base64 decoding SAML message.');
         }
 
-        SAML2_Utils::getContainer()->debugMessage($msg, 'in');
-
-        $document = new DOMDocument();
-        $document->loadXML($msg);
-        $xml = $document->firstChild;
+        $message = gzinflate($message);
+        if ($message === FALSE) {
+            throw new Exception('Error while inflating SAML message.');
+        }
 
-        $msg = SAML2_Message::fromXML($xml);
+        SAML2_Utils::getContainer()->debugMessage($message, 'in');
+        $document = SAML2_DOMDocumentFactory::fromString($message);
+        $xml      = $document->firstChild;
+        $message  = SAML2_Message::fromXML($xml);
 
         if (array_key_exists('RelayState', $data)) {
-            $msg->setRelayState($data['RelayState']);
+            $message->setRelayState($data['RelayState']);
         }
 
-        if (array_key_exists('Signature', $data)) {
-            if (!array_key_exists('SigAlg', $data)) {
-                throw new Exception('Missing signature algorithm.');
-            }
+        if (!array_key_exists('Signature', $data)) {
+            return $message;
+        }
 
-            $signData = array(
-                'Signature' => $data['Signature'],
-                'SigAlg' => $data['SigAlg'],
-                'Query' => $data['SignedQuery'],
-            );
-            $msg->addValidator(array(get_class($this), 'validateSignature'), $signData);
+        if (!array_key_exists('SigAlg', $data)) {
+            throw new Exception('Missing signature algorithm.');
         }
 
-        return $msg;
+        $signData = array(
+            'Signature' => $data['Signature'],
+            'SigAlg'    => $data['SigAlg'],
+            'Query'     => $data['SignedQuery'],
+        );
+
+        $message->addValidator(array(get_class($this), 'validateSignature'), $signData);
+
+        return $message;
     }
 
     /**
@@ -168,7 +169,7 @@ class SAML2_HTTPRedirect extends SAML2_Binding
             if (count($tmp) === 2) {
                 $value = $tmp[1];
             } else {
-                /* No value for this paramter. */
+                /* No value for this parameter. */
                 $value = '';
             }
             $name = urldecode($name);
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/LogoutRequest.php b/vendor/simplesamlphp/saml2/src/SAML2/LogoutRequest.php
index 3ad5352..2725f76 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/LogoutRequest.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/LogoutRequest.php
@@ -121,7 +121,7 @@ class SAML2_LogoutRequest extends SAML2_Request
     public function encryptNameId(XMLSecurityKey $key)
     {
         /* First create a XML representation of the NameID. */
-        $doc = new DOMDocument();
+        $doc = SAML2_DOMDocumentFactory::create();
         $root = $doc->createElement('root');
         $doc->appendChild($root);
         SAML2_Utils::addNameId($root, $this->nameId);
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/Message.php b/vendor/simplesamlphp/saml2/src/SAML2/Message.php
index efb01ba..1eedae5 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/Message.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/Message.php
@@ -89,6 +89,11 @@ abstract class SAML2_Message implements SAML2_SignedElement
      */
     private $signatureKey;
 
+    /**
+     * @var bool
+     */
+    protected $messageContainedSignatureUponConstruction = FALSE;
+
     /**
      * List of certificates that should be included in the message.
      *
@@ -123,7 +128,7 @@ abstract class SAML2_Message implements SAML2_SignedElement
         $this->tagName = $tagName;
 
         $this->id = SAML2_Utils::getContainer()->generateId();
-        $this->issueInstant = time();
+        $this->issueInstant = SAML2_Utilities_Temporal::getTime();
         $this->certificates = array();
         $this->validators = array();
 
@@ -161,6 +166,7 @@ abstract class SAML2_Message implements SAML2_SignedElement
             $sig = SAML2_Utils::validateElement($xml);
 
             if ($sig !== FALSE) {
+                $this->messageContainedSignatureUponConstruction = TRUE;
                 $this->certificates = $sig['Certificates'];
                 $this->validators[] = array(
                     'Function' => array('SAML2_Utils', 'validateSignature'),
@@ -347,6 +353,16 @@ abstract class SAML2_Message implements SAML2_SignedElement
         $this->issuer = $issuer;
     }
 
+    /**
+     * Query whether or not the message contained a signature at the root level when the object was constructed.
+     *
+     * @return bool
+     */
+    public function isMessageConstructedWithSignature()
+    {
+        return $this->messageContainedSignatureUponConstruction;
+    }
+
     /**
      * Retrieve the RelayState associated with this message.
      *
@@ -378,7 +394,7 @@ abstract class SAML2_Message implements SAML2_SignedElement
      */
     public function toUnsignedXML()
     {
-        $this->document = new DOMDocument();
+        $this->document = SAML2_DOMDocumentFactory::create();
 
         $root = $this->document->createElementNS(SAML2_Const::NS_SAMLP, 'samlp:' . $this->tagName);
         $this->document->appendChild($root);
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/SOAP.php b/vendor/simplesamlphp/saml2/src/SAML2/SOAP.php
index 04987ee..6bdb0be 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/SOAP.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/SOAP.php
@@ -46,8 +46,7 @@ class SAML2_SOAP extends SAML2_Binding
             throw new Exception('Invalid message received to AssertionConsumerService endpoint.');
         }
 
-        $document = new DOMDocument();
-        $document->loadXML($postText);
+        $document = SAML2_DOMDocumentFactory::fromString($postText);
         $xml = $document->firstChild;
         SAML2_Utils::getContainer()->debugMessage($xml, 'in');
         $results = SAML2_Utils::xpQuery($xml, '/soap-env:Envelope/soap-env:Body/*[1]');
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/SOAPClient.php b/vendor/simplesamlphp/saml2/src/SAML2/SOAPClient.php
index 1094997..7de34ff 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/SOAPClient.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/SOAPClient.php
@@ -91,6 +91,14 @@ class SAML2_SOAPClient
             'stream_context' => $context,
         );
 
+        if ($srcMetadata->hasValue('saml.SOAPClient.proxyhost')) {
+            $options['proxy_host'] = $srcMetadata->getValue('saml.SOAPClient.proxyhost');
+        }
+
+        if ($srcMetadata->hasValue('saml.SOAPClient.proxyport')) {
+            $options['proxy_port'] = $srcMetadata->getValue('saml.SOAPClient.proxyport');
+        }
+
         $x = new SoapClient(NULL, $options);
 
         // Add soap-envelopes
@@ -112,9 +120,10 @@ class SAML2_SOAPClient
         SAML2_Utils::getContainer()->debugMessage($soapresponsexml, 'in');
 
         // Convert to SAML2_Message (DOMElement)
-        $dom = new DOMDocument();
-        if (!$dom->loadXML($soapresponsexml)) {
-            throw new Exception('Not a SOAP response.');
+        try {
+            $dom = SAML2_DOMDocumentFactory::fromString($soapresponsexml);
+        } catch (SAML2_Exception_RuntimeException $e) {
+            throw new Exception('Not a SOAP response.', 0, $e);
         }
 
         $soapfault = $this->getSOAPFault($dom);
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/Utils.php b/vendor/simplesamlphp/saml2/src/SAML2/Utils.php
index e2f7017..509ab58 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/Utils.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/Utils.php
@@ -207,7 +207,7 @@ class SAML2_Utils
     public static function copyElement(DOMElement $element, DOMElement $parent = NULL)
     {
         if ($parent === NULL) {
-            $document = new DOMDocument();
+            $document = SAML2_DOMDocumentFactory::create();
         } else {
             $document = $parent->ownerDocument;
         }
@@ -495,10 +495,13 @@ class SAML2_Utils
                      'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">' .
             $decrypted .
             '</root>';
-        $newDoc = new DOMDocument();
-        if (!@$newDoc->loadXML($xml)) {
-            throw new Exception('Failed to parse decrypted XML. Maybe the wrong sharedkey was used?');
+
+        try {
+            $newDoc = SAML2_DOMDocumentFactory::fromString($xml);
+        } catch (SAML2_Exception_RuntimeException $e) {
+            throw new Exception('Failed to parse decrypted XML. Maybe the wrong sharedkey was used?', 0, $e);
         }
+
         $decryptedElement = $newDoc->firstChild->firstChild;
         if ($decryptedElement === NULL) {
             throw new Exception('Missing encrypted element.');
@@ -530,7 +533,7 @@ class SAML2_Utils
              * reasons we cannot tell the user what failed.
              */
             SAML2_Utils::getContainer()->getLogger()->error('Decryption failed: ' . $e->getMessage());
-            throw new Exception('Failed to decrypt XML element.');
+            throw new Exception('Failed to decrypt XML element.', 0, $e);
         }
     }
 
@@ -674,6 +677,11 @@ class SAML2_Utils
      *  Therefore I added to possibility to have microseconds to the format.
      * Added: (\.\\d{1,3})? to the regex.
      *
+     * Note that we always require a 'Z' timezone for the dateTime to be valid.
+     * This is not in the SAML spec but that's considered to be a bug in the
+     * spec. See https://github.com/simplesamlphp/saml2/pull/36 for some
+     * background.
+     *
      * @param string $time The time we should convert.
      * @return int Converted to a unix timestamp.
      * @throws Exception
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/XML/Chunk.php b/vendor/simplesamlphp/saml2/src/SAML2/XML/Chunk.php
index 2bbab11..f5ed763 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/XML/Chunk.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/XML/Chunk.php
@@ -80,8 +80,7 @@ class SAML2_XML_Chunk implements Serializable
      */
     public function unserialize($serialized)
     {
-        $doc = new DOMDocument();
-        $doc->loadXML(unserialize($serialized));
+        $doc = SAML2_DOMDocumentFactory::fromString(unserialize($serialized));
         $this->xml = $doc->documentElement;
         $this->localName = $this->xml->localName;
         $this->namespaceURI = $this->xml->namespaceURI;
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/XML/md/EntitiesDescriptor.php b/vendor/simplesamlphp/saml2/src/SAML2/XML/md/EntitiesDescriptor.php
index 05a0fd6..e2c58e9 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/XML/md/EntitiesDescriptor.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/XML/md/EntitiesDescriptor.php
@@ -104,7 +104,7 @@ class SAML2_XML_md_EntitiesDescriptor extends SAML2_SignedElementHelper
         assert('is_array($this->children)');
 
         if ($parent === NULL) {
-            $doc = new DOMDocument();
+            $doc = SAML2_DOMDocumentFactory::create();
             $e = $doc->createElementNS(SAML2_Const::NS_MD, 'md:EntitiesDescriptor');
             $doc->appendChild($e);
         } else {
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/XML/md/EntityDescriptor.php b/vendor/simplesamlphp/saml2/src/SAML2/XML/md/EntityDescriptor.php
index 2c9bac4..79f1508 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/XML/md/EntityDescriptor.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/XML/md/EntityDescriptor.php
@@ -192,7 +192,7 @@ class SAML2_XML_md_EntityDescriptor extends SAML2_SignedElementHelper
         assert('is_array($this->AdditionalMetadataLocation)');
 
         if ($parent === NULL) {
-            $doc = new DOMDocument();
+            $doc = SAML2_DOMDocumentFactory::create();
             $e = $doc->createElementNS(SAML2_Const::NS_MD, 'md:EntityDescriptor');
             $doc->appendChild($e);
         } else {
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/XML/saml/AttributeValue.php b/vendor/simplesamlphp/saml2/src/SAML2/XML/saml/AttributeValue.php
index bcb463d..b4ab28b 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/XML/saml/AttributeValue.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/XML/saml/AttributeValue.php
@@ -27,7 +27,7 @@ class SAML2_XML_saml_AttributeValue implements Serializable
         assert('is_string($value) || $value instanceof DOMElement');
 
         if (is_string($value)) {
-            $doc = new DOMDocument();
+            $doc = SAML2_DOMDocumentFactory::create();
             $this->element = $doc->createElementNS(SAML2_Const::NS_SAML, 'saml:AttributeValue');
             $this->element->setAttributeNS(SAML2_Const::NS_XSI, 'xsi:type', 'xs:string');
             $this->element->appendChild($doc->createTextNode($value));
@@ -45,7 +45,7 @@ class SAML2_XML_saml_AttributeValue implements Serializable
             return;
         }
 
-        $doc = new DOMDocument();
+        $doc = SAML2_DOMDocumentFactory::create();
         $this->element = $doc->createElementNS(SAML2_Const::NS_SAML, 'saml:AttributeValue');
         SAML2_Utils::copyElement($value, $this->element);
     }
@@ -114,8 +114,7 @@ class SAML2_XML_saml_AttributeValue implements Serializable
      */
     public function unserialize($serialized)
     {
-        $doc = new DOMDocument();
-        $doc->loadXML(unserialize($serialized));
+        $doc = SAML2_DOMDocumentFactory::fromString(unserialize($serialized));
         $this->element = $doc->documentElement;
     }
 }
diff --git a/vendor/simplesamlphp/saml2/src/SAML2/XML/saml/NameID.php b/vendor/simplesamlphp/saml2/src/SAML2/XML/saml/NameID.php
index 4525b7d..13d77d5 100644
--- a/vendor/simplesamlphp/saml2/src/SAML2/XML/saml/NameID.php
+++ b/vendor/simplesamlphp/saml2/src/SAML2/XML/saml/NameID.php
@@ -87,7 +87,7 @@ class SAML2_XML_saml_NameID
         assert('is_string($this->value)');
 
         if ($parent === NULL) {
-            $parent = new DOMDocument();
+            $parent = SAML2_DOMDocumentFactory::create();
             $doc = $parent;
         } else {
             $doc = $parent->ownerDocument;
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/AssertionTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/AssertionTest.php
index 5a0a2b0..e65a0e1 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/AssertionTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/AssertionTest.php
@@ -43,8 +43,7 @@ class SAML2_AssertionTest extends \PHPUnit_Framework_TestCase
     public function testUnmarshalling()
     {
         // Unmarshall an assertion
-        $document = new \DOMDocument();
-        $document->loadXML(<<<XML
+        $xml = <<<XML
 <saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
                 ID="_593e33ddf86449ce4d4c22b60ac48e067d98a0b2bf"
                 Version="2.0"
@@ -65,8 +64,8 @@ class SAML2_AssertionTest extends \PHPUnit_Framework_TestCase
     </saml:AuthnContext>
   </saml:AuthnStatement>
 </saml:Assertion>
-XML
-        );
+XML;
+        $document  = SAML2_DOMDocumentFactory::fromString($xml);
         $assertion = new \SAML2_Assertion($document->firstChild);
 
         // Test for valid audiences
@@ -84,9 +83,7 @@ XML
 
     public function testAuthnContextDeclAndClassRef()
     {
-        // Try with unmarshalling
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $xml = <<<XML
 <saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
                 xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
                 ID="_593e33ddf86449ce4d4c22b60ac48e067d98a0b2bf"
@@ -104,9 +101,10 @@ XML
     </saml:AuthnContext>
   </saml:AuthnStatement>
 </saml:Assertion>
-XML
-        );
+XML;
 
+        // Try with unmarshalling
+        $document = SAML2_DOMDocumentFactory::fromString($xml);
 
         $assertion = new \SAML2_Assertion($document->documentElement);
         $authnContextDecl = $assertion->getAuthnContextDecl();
@@ -121,8 +119,7 @@ XML
     public function testAuthnContextDeclRefAndClassRef()
     {
         // Try with unmarshalling
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $xml = <<<XML
 <saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
                 xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
                 ID="_593e33ddf86449ce4d4c22b60ac48e067d98a0b2bf"
@@ -137,9 +134,9 @@ XML
     </saml:AuthnContext>
   </saml:AuthnStatement>
 </saml:Assertion>
-XML
-        );
+XML;
 
+        $document = SAML2_DOMDocumentFactory::fromString($xml);
 
         $assertion = new \SAML2_Assertion($document->documentElement);
         $this->assertEquals('/relative/path/to/document.xml', $assertion->getAuthnContextDeclRef());
@@ -148,13 +145,12 @@ XML
 
     public function testAuthnContextDeclAndRefConstraint()
     {
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $xml = <<<XML
 <samlac:AuthenticationContextDeclaration xmlns:samlac="urn:oasis:names:tc:SAML:2.0:ac">
 </samlac:AuthenticationContextDeclaration>
-XML
-    );
+XML;
 
+        $document  = SAML2_DOMDocumentFactory::fromString($xml);
         $assertion = new \SAML2_Assertion();
 
         $e = null;
@@ -177,8 +173,7 @@ XML
         $this->assertNotEmpty($e);
 
         // Try with unmarshalling
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $xml = <<<XML
 <saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
                 xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
                 ID="_593e33ddf86449ce4d4c22b60ac48e067d98a0b2bf"
@@ -196,8 +191,9 @@ XML
     </saml:AuthnContext>
   </saml:AuthnStatement>
 </saml:Assertion>
-XML
-        );
+XML;
+
+        $document = SAML2_DOMDocumentFactory::fromString($xml);
 
         $e = null;
         try {
@@ -210,8 +206,7 @@ XML
     public function testMustHaveClassRefOrDeclOrDeclRef()
     {
         // Unmarshall an assertion
-        $document = new \DOMDocument();
-        $document->loadXML(<<<XML
+        $document = SAML2_DOMDocumentFactory::fromString(<<<XML
 <saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
                 ID="_593e33ddf86449ce4d4c22b60ac48e067d98a0b2bf"
                 Version="2.0"
@@ -246,8 +241,7 @@ XML
         $authnContextDeclRef = 'relative/url/to/authcontext.xml';
 
         // Unmarshall an assertion
-        $document = new \DOMDocument();
-        $document->loadXML(<<<XML
+        $document = SAML2_DOMDocumentFactory::fromString(<<<XML
 <saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
                 xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
                 ID="_593e33ddf86449ce4d4c22b60ac48e067d98a0b2bf"
@@ -267,5 +261,68 @@ XML
         $this->assertEmpty($assertion->getAuthnContextClassRef());
         $this->assertEquals($authnContextDeclRef, $assertion->getAuthnContextDeclRef());
     }
+
+    public function testHasEncryptedAttributes()
+    {
+        $document = new DOMDocument();
+        $document->loadXML(<<<XML
+    <saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
+                    Version="2.0"
+                    ID="_93af655219464fb403b34436cfb0c5cb1d9a5502"
+                    IssueInstant="1970-01-01T01:33:31Z">
+      <saml:Issuer>Provider</saml:Issuer>
+      <saml:Subject>
+        <saml:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">s00000000:123456789</saml:NameID>
+        <saml:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
+          <saml:SubjectConfirmationData NotOnOrAfter="2011-08-31T08:51:05Z" Recipient="https://sp.example.com/assertion_consumer" InResponseTo="_13603a6565a69297e9809175b052d115965121c8" />
+        </saml:SubjectConfirmation>
+      </saml:Subject>
+      <saml:Conditions NotOnOrAfter="2011-08-31T08:51:05Z" NotBefore="2011-08-31T08:51:05Z">
+        <saml:AudienceRestriction>
+          <saml:Audience>ServiceProvider</saml:Audience>
+        </saml:AudienceRestriction>
+      </saml:Conditions>
+      <saml:AuthnStatement AuthnInstant="2011-08-31T08:51:05Z" SessionIndex="_93af655219464fb403b34436cfb0c5cb1d9a5502">
+        <saml:AuthnContext>
+          <saml:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</saml:AuthnContextClassRef>
+        </saml:AuthnContext>
+        <saml:SubjectLocality Address="127.0.0.1"/>
+      </saml:AuthnStatement>
+      <saml:AttributeStatement>
+        <saml:Attribute Name="urn:ServiceID">
+          <saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">1</saml:AttributeValue>
+        </saml:Attribute>
+        <saml:Attribute Name="urn:EntityConcernedID">
+          <saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">1</saml:AttributeValue>
+        </saml:Attribute>
+        <saml:Attribute Name="urn:EntityConcernedSubID">
+          <saml:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">1</saml:AttributeValue>
+        </saml:Attribute>
+        <saml:EncryptedAttribute xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion">
+          <xenc:EncryptedData xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" Type="http://www.w3.org/2001/04/xmlenc#Element" Id="_F39625AF68B4FC078CC7582D28D05D9C">
+            <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes256-cbc"/>
+            <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
+              <xenc:EncryptedKey>
+                <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"/>
+                <ds:KeyInfo>
+                  <ds:KeyName>62355fbd1f624503c5c9677402ecca00ef1f6277</ds:KeyName>
+                </ds:KeyInfo>
+                <xenc:CipherData>
+                  <xenc:CipherValue>K0mBLxfLziKVUKEAOYe7D6uVSCPy8vyWVh3RecnPES+8QkAhOuRSuE/LQpFr0huI/iCEy9pde1QgjYDLtjHcujKi2xGqW6jkXW/EuKomqWPPA2xYs1fpB1su4aXUOQB6OJ70/oDcOsy834ghFaBWilE8fqyDBUBvW+2IvaMUZabwN/s9mVkWzM3r30tlkhLK7iOrbGAldIHwFU5z7PPR6RO3Y3fIxjHU40OnLsJc3xIqdLH3fXpC0kgi5UspLdq14e5OoXjLoPG3BO3zwOAIJ8XNBWY5uQof6KrKbcvtZSY0fMvPYhYfNjtRFy8y49ovL9fwjCRTDlT5+aHqsCTBrw==</xenc:CipherValue>
+                </xenc:CipherData>
+              </xenc:EncryptedKey>
+            </ds:KeyInfo>
+            <xenc:CipherData>
+              <xenc:CipherValue>ZzCu6axGgAYZHVf77NX8apZKB/GJDeuV6bFByBS0AIgiXkvDUAmLCpabTAWBM+yz19olA6rryuOfr82ev2bzPNURvm4SYxahvuL4Pibn5wJky0Bl54VqmcU+Aqj0dAvOgqG1y3X4wO9n9bRsTv6921m0eqRAFph8kK8L9hirK1BxYBYj2RyFCoFDPxVZ5wyra3q4qmE4/ELQpFP6mfU8LXb0uoWJUjGUelS2Aa7bZis8zEpwov4CwtlNjltQih4mv7ttCAfYqcQIFzBTB+DAa0+XggxCLcdB3+mQiRcECBfwHHJ7gRmnuBEgeWT3CGKa3Nb7GMXOfuxFKF5pIehWgo3kdNQLalor8RVW6I8P/I8fQ33Fe+NsHVnJ3zwSA//a</xenc:CipherValue>
+            </xenc:CipherData>
+          </xenc:EncryptedData>
+        </saml:EncryptedAttribute>
+      </saml:AttributeStatement>
+    </saml:Assertion>
+XML
+        );
+        $assertion = new \SAML2_Assertion($document->firstChild);
+        $this->assertTrue($assertion->hasEncryptedAttributes());
+    }
 }
 
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/AuthnRequestTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/AuthnRequestTest.php
index b9fc6a5..40830be 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/AuthnRequestTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/AuthnRequestTest.php
@@ -36,13 +36,43 @@ class SAML2_AuthnRequestTest extends PHPUnit_Framework_TestCase
         $this->assertEquals('accr2', $authnContextClassRefElements[1]->textContent);
     }
 
+    public function testMarshallingOfSimpleRequest()
+    {
+        $document = new DOMDocument();
+        $document->loadXML(<<<AUTHNREQUEST
+<samlp:AuthnRequest
+  xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
+  xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
+  ID="_306f8ec5b618f361c70b6ffb1480eade"
+  Version="2.0"
+  IssueInstant="2004-12-05T09:21:59Z"
+  Destination="https://idp.example.org/SAML2/SSO/Artifact"
+  ProtocolBinding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact"
+  AssertionConsumerServiceURL="https://sp.example.com/SAML2/SSO/Artifact">
+    <saml:Issuer>https://sp.example.com/SAML2</saml:Issuer>
+</samlp:AuthnRequest>
+AUTHNREQUEST
+        );
+
+        $authnRequest = new SAML2_AuthnRequest($document->documentElement);
+
+        $expectedIssueInstant = SAML2_Utils::xsDateTimeToTimestamp('2004-12-05T09:21:59Z');
+        $this->assertEquals($expectedIssueInstant, $authnRequest->getIssueInstant());
+        $this->assertEquals('https://idp.example.org/SAML2/SSO/Artifact', $authnRequest->getDestination());
+        $this->assertEquals('urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact', $authnRequest->getProtocolBinding());
+        $this->assertEquals(
+            'https://sp.example.com/SAML2/SSO/Artifact',
+            $authnRequest->getAssertionConsumerServiceURL()
+        );
+        $this->assertEquals('https://sp.example.com/SAML2', $authnRequest->getIssuer());
+    }
+
     /**
      * Test unmarshalling / marshalling of XML with Extensions element
      */
     public function testExtensionOrdering()
     {
-        $document = new DOMDocument();
-        $document->loadXML(<<<AUTHNREQUEST
+        $xml = <<<AUTHNREQUEST
 <samlp:AuthnRequest
   xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
   xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
@@ -58,14 +88,237 @@ class SAML2_AuthnRequestTest extends PHPUnit_Framework_TestCase
           <myns:Attribute name="UserName" value=""/>
       </myns:AttributeList>
   </samlp:Extensions>
+  <saml:Subject>
+        <saml:NameID Format="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified">user@example.org</saml:NameID>
+  </saml:Subject>
   <samlp:NameIDPolicy
     AllowCreate="true"
     Format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"/>
 </samlp:AuthnRequest>
+AUTHNREQUEST;
+
+        $document     = SAML2_DOMDocumentFactory::fromString($xml);
+        $authnRequest = new SAML2_AuthnRequest($document->documentElement);
+
+        $this->assertXmlStringEqualsXmlString($document->C14N(), $authnRequest->toUnsignedXML()->C14N());
+    }
+
+    public function testThatTheSubjectIsCorrectlyRead()
+    {
+        $document = new DOMDocument();
+        $document->loadXML(<<<AUTHNREQUEST
+<samlp:AuthnRequest
+    xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
+    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
+    AssertionConsumerServiceIndex="1"
+    Destination="https://tiqr.stepup.org/idp/profile/saml2/Redirect/SSO"
+    ID="_2b0226190ca1c22de6f66e85f5c95158"
+    IssueInstant="2014-09-22T13:42:00Z"
+    Version="2.0">
+  <saml:Issuer>https://gateway.stepup.org/saml20/sp/metadata</saml:Issuer>
+  <saml:Subject>
+        <saml:NameID Format="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified">user@example.org</saml:NameID>
+  </saml:Subject>
+</samlp:AuthnRequest>
 AUTHNREQUEST
+);
+        $authnRequest = new SAML2_AuthnRequest($document->documentElement);
+
+        $expectedNameId = array(
+            'Value'  => "user@example.org",
+            'Format' => "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
         );
+        $this->assertEquals($expectedNameId, $authnRequest->getNameId());
+    }
+
+    public function testThatTheSubjectCanBeSetBySettingTheNameId()
+    {
+        $request = new SAML2_AuthnRequest();
+        $request->setNameId(array('Value' => 'user@example.org', 'Format' => SAML2_Const::NAMEID_UNSPECIFIED));
+
+        $requestAsXML = $request->toUnsignedXML()->ownerDocument->saveXML();
+        $expected = '<saml:Subject><saml:NameID Format="urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified">user@example.org</saml:NameID></saml:Subject>';
+        $this->assertContains($expected, $requestAsXML);
+    }
+
+    public function testThatAnEncryptedNameIdCanBeDecrypted()
+    {
+        $document = new DOMDocument();
+        $document->loadXML(<<<AUTHNREQUEST
+<samlp:AuthnRequest
+    xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
+    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
+    ID="123"
+    Version="2.0"
+    IssueInstant="2015-05-11T09:02:36Z"
+    Destination="https://tiqr.stepup.org/idp/profile/saml2/Redirect/SSO">
+    <saml:Issuer>https://gateway.stepup.org/saml20/sp/metadata</saml:Issuer>
+    <saml:Subject>
+        <saml:EncryptedID xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
+            <xenc:EncryptedData xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" Type="http://www.w3.org/2001/04/xmlenc#Element">
+                <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes128-cbc"/>
+                <dsig:KeyInfo xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
+                    <xenc:EncryptedKey>
+                        <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-1_5"/>
+                        <xenc:CipherData>
+                            <xenc:CipherValue>Kzb231F/6iLrDG9KP99h1C08eV2WfRqasU0c3y9AG+nb0JFdQgqip5+5FN+ypi1zPz4FIdoPufXdQDIRi4tm1UMyaiA5MBHjk2GOw5GDc6idnzFAoy4uWlofELeeT2ftcP4c6ETDsu++iANi5XUU1A+WPxxel2NMss6F6MjOuCg=</xenc:CipherValue>
+                        </xenc:CipherData>
+                    </xenc:EncryptedKey>
+                </dsig:KeyInfo>
+                <xenc:CipherData>
+                    <xenc:CipherValue>EHj4x8ZwXvxIHFo4uenQcXZsUnS0VPyhevIMwE6YfejFwW0V3vUImCVKfdEtMJgNS/suukvc/HmF2wHptBqk3yjwbRfdFX2axO7UPqyThiGkVTkccOpIv7RzN8mkiDe9cjOztIQYd1DfKrjgh+FFL10o08W+HSZFgp4XQGOAruLj+JVyoDlx6FMyTIRgeLxlW4K2G1++Xmp8wyLyoMCccdDRzX3KT/Ph2RVIDpE/XLznpQd19sgwaEguUerqdHwo</xenc:CipherValue>
+                </xenc:CipherData>
+            </xenc:EncryptedData>
+        </saml:EncryptedID>
+    </saml:Subject>
+</samlp:AuthnRequest>
+AUTHNREQUEST
+        );
+
         $authnRequest = new SAML2_AuthnRequest($document->documentElement);
 
-        $this->assertXmlStringEqualsXmlString($document->C14N(), $authnRequest->toUnsignedXML()->C14N());
+        $key = SAML2_CertificatesMock::getPrivateKey();
+        $authnRequest->decryptNameId($key);
+
+        $expectedNameId = array('Value' => md5('Arthur Dent'), 'Format' => SAML2_Const::NAMEID_ENCRYPTED);
+
+        $this->assertEquals($expectedNameId, $authnRequest->getNameId());
+    }
+
+    /**
+     * Due to the fact that the symmetric key is generated each time, we cannot test whether or not the resulting XML
+     * matches a specific XML, but we can test whether or not the resulting structure is actually correct, conveying
+     * all information required to decrypt the NameId.
+     */
+    public function testThatAnEncryptedNameIdResultsInTheCorrectXmlStructure()
+    {
+        // the NameID we're going to encrypt
+        $nameId = array('Value' => md5('Arthur Dent'), 'Format' => SAML2_Const::NAMEID_ENCRYPTED);
+
+        // basic AuthnRequest
+        $request = new SAML2_AuthnRequest();
+        $request->setIssuer('https://gateway.stepup.org/saml20/sp/metadata');
+        $request->setDestination('https://tiqr.stepup.org/idp/profile/saml2/Redirect/SSO');
+        $request->setNameId($nameId);
+
+        // encrypt the NameID
+        $key = SAML2_CertificatesMock::getPublicKey();
+        $request->encryptNameId($key);
+
+        $expectedStructureDocument = new DOMDocument();
+        $expectedStructureDocument->loadXML(<<<AUTHNREQUEST
+<samlp:AuthnRequest
+    xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
+    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
+    ID=""
+    Version=""
+    IssueInstant=""
+    Destination="">
+    <saml:Issuer></saml:Issuer>
+    <saml:Subject>
+        <saml:EncryptedID xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
+            <xenc:EncryptedData xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#" Type="http://www.w3.org/2001/04/xmlenc#Element">
+                <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes128-cbc"/>
+                <dsig:KeyInfo xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
+                    <xenc:EncryptedKey>
+                        <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-1_5"/>
+                        <xenc:CipherData>
+                            <xenc:CipherValue></xenc:CipherValue>
+                        </xenc:CipherData>
+                    </xenc:EncryptedKey>
+                </dsig:KeyInfo>
+                <xenc:CipherData>
+                    <xenc:CipherValue></xenc:CipherValue>
+                </xenc:CipherData>
+            </xenc:EncryptedData>
+        </saml:EncryptedID>
+    </saml:Subject>
+</samlp:AuthnRequest>
+AUTHNREQUEST
+        );
+
+        $expectedStructure = $expectedStructureDocument->documentElement;
+        $requestStructure = $request->toUnsignedXML();
+
+        $this->assertEqualXMLStructure($expectedStructure, $requestStructure);
+    }
+
+    /**
+     * Test for setting IDPEntry values via setIDPList.
+     * Tests legacy support (single string), array of attributes, and skipping of unknown attributes.
+     */
+    public function testIDPlistAttributes()
+    {
+        // basic AuthnRequest
+        $request = new SAML2_AuthnRequest();
+        $request->setIssuer('https://gateway.example.org/saml20/sp/metadata');
+        $request->setDestination('https://tiqr.example.org/idp/profile/saml2/Redirect/SSO');
+        $request->setIDPList(array(
+            'Legacy1',
+            array('ProviderID' => 'http://example.org/AAP', 'Name' => 'N00T', 'Loc' => 'https://mies'),
+            array('ProviderID' => 'urn:example:1', 'Name' => 'Voorbeeld', 'Something' => 'Else')
+        ));
+
+        $expectedStructureDocument = new DOMDocument();
+        $expectedStructureDocument->loadXML(<<<AUTHNREQUEST
+<samlp:AuthnRequest
+    xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
+    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
+    ID=""
+    Version=""
+    IssueInstant=""
+    Destination="">
+    <saml:Issuer></saml:Issuer>
+    <samlp:Scoping><samlp:IDPList>
+        <samlp:IDPEntry ProviderID="Legacy1"/>
+        <samlp:IDPEntry ProviderID="http://example.org/AAP" Name="N00T" Loc="https://mies"/>
+        <samlp:IDPEntry ProviderID="urn:example:1" Name="Voorbeeld"/>
+    </samlp:IDPList></samlp:Scoping>
+</samlp:AuthnRequest>
+AUTHNREQUEST
+        );
+
+        $expectedStructure = $expectedStructureDocument->documentElement;
+        $requestStructure = $request->toUnsignedXML();
+
+        $this->assertEqualXMLStructure($expectedStructure, $requestStructure);
+    }
+
+    /**
+     * Test setting a requesterID.
+     */
+    public function testRequesterId()
+    {
+        // basic AuthnRequest
+        $request = new SAML2_AuthnRequest();
+        $request->setIssuer('https://gateway.example.org/saml20/sp/metadata');
+        $request->setDestination('https://tiqr.example.org/idp/profile/saml2/Redirect/SSO');
+        $request->setRequesterID(array(
+            'https://engine.demo.openconext.org/authentication/sp/metadata',
+            'https://shib.example.edu/SSO/Metadata',
+        ));
+
+        $expectedStructureDocument = new DOMDocument();
+        $expectedStructureDocument->loadXML(<<<AUTHNREQUEST
+<samlp:AuthnRequest
+    xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
+    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
+    ID=""
+    Version=""
+    IssueInstant=""
+    Destination="">
+    <saml:Issuer></saml:Issuer>
+    <samlp:Scoping>
+        <samlp:RequesterID>https://engine.demo.openconext.org/authentication/sp/metadata</samlp:RequesterID>
+        <samlp:RequesterID>https://shib.example.edu/SSO/Metadata</samlp:RequesterID>
+    </samlp:Scoping>
+</samlp:AuthnRequest>
+AUTHNREQUEST
+        );
+
+        $expectedStructure = $expectedStructureDocument->documentElement;
+        $requestStructure = $request->toUnsignedXML();
+
+        $this->assertEqualXMLStructure($expectedStructure, $requestStructure);
     }
 }
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/LogoutRequestTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/LogoutRequestTest.php
index a09da64..ccdff39 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/LogoutRequestTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/LogoutRequestTest.php
@@ -17,8 +17,7 @@ class LogoutRequestTest extends \PHPUnit_Framework_TestCase
      */
     public function setUp()
     {
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $xml = <<<XML
 <samlp:LogoutRequest xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" ID="SomeIDValue" Version="2.0" IssueInstant="2010-07-22T11:30:19Z">
   <saml:Issuer>TheIssuer</saml:Issuer>
   <saml:EncryptedID>
@@ -40,8 +39,8 @@ class LogoutRequestTest extends \PHPUnit_Framework_TestCase
   <samlp:SessionIndex>SomeSessionIndex1</samlp:SessionIndex>
   <samlp:SessionIndex>SomeSessionIndex2</samlp:SessionIndex>
 </samlp:LogoutRequest>
-XML
-);
+XML;
+        $document = SAML2_DOMDocumentFactory::fromString($xml);
         $this->logoutRequestElement = $document->firstChild;
     }
 
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/ResponseTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/ResponseTest.php
index 680210d..8a5969d 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/ResponseTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/ResponseTest.php
@@ -22,8 +22,7 @@ class SAML2_ResponseTest extends PHPUnit_Framework_TestCase
 
     public function testLoop()
     {
-        $fixtureResponseDom = new DOMDocument();
-        $fixtureResponseDom->loadXML(<<<XML
+        $xml = <<<XML
 <samlp:Response xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol"
                 xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
                 ID="s2a0da3504aff978b0f8c80f6a62c713c4a2f64c5b"
@@ -102,10 +101,11 @@ class SAML2_ResponseTest extends PHPUnit_Framework_TestCase
         </saml:AttributeStatement>
     </saml:Assertion>
 </samlp:Response>
-XML
-);
+XML;
+
+        $fixtureResponseDom = SAML2_DOMDocumentFactory::fromString($xml);
+        $request            = new SAML2_Response($fixtureResponseDom->firstChild);
 
-        $request = new SAML2_Response($fixtureResponseDom->firstChild);
         $requestXml = $requestDocument = $request->toUnsignedXML()->ownerDocument->C14N();
         $fixtureXml = $fixtureResponseDom->C14N();
 
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/SignedElementHelperMock.php b/vendor/simplesamlphp/saml2/tests/SAML2/SignedElementHelperMock.php
index 61365b4..efed758 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/SignedElementHelperMock.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/SignedElementHelperMock.php
@@ -18,7 +18,7 @@ class SAML2_SignedElementHelperMock extends SAML2_SignedElementHelper
      */
     public function toSignedXML()
     {
-        $doc = new DOMDocument();
+        $doc = SAML2_DOMDocumentFactory::create();
         $root = $doc->createElement('root');
         $doc->appendChild($root);
 
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/UtilsTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/UtilsTest.php
index feb97db..7110ff1 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/UtilsTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/UtilsTest.php
@@ -33,9 +33,8 @@ class SAML2_UtilsTest extends PHPUnit_Framework_TestCase
      */
     public function testAddString()
     {
-        $document = new DOMDocument();
+        $document = SAML2_DOMDocumentFactory::fromString('<root/>');
 
-        $document->loadXML('<root/>');
         SAML2_Utils::addString(
             $document->firstChild,
             'testns',
@@ -65,9 +64,7 @@ class SAML2_UtilsTest extends PHPUnit_Framework_TestCase
      */
     public function testGetAddStrings()
     {
-        $document = new DOMDocument();
-
-        $document->loadXML('<root/>');
+        $document = SAML2_DOMDocumentFactory::fromString('<root/>');
         SAML2_Utils::addStrings(
             $document->firstChild,
             'testns',
@@ -137,8 +134,7 @@ class SAML2_UtilsTest extends PHPUnit_Framework_TestCase
      */
     public function testExtractString()
     {
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
             '<root xmlns="' . SAML2_Const::NS_MD . '">'.
             '<somenode>value1</somenode>'.
             '<somenode>value2</somenode>'.
@@ -161,8 +157,7 @@ class SAML2_UtilsTest extends PHPUnit_Framework_TestCase
      */
     public function testExtractLocalizedString()
     {
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
             '<root xmlns="' . SAML2_Const::NS_MD . '">'.
             '<somenode xml:lang="en">value (en)</somenode>'.
             '<somenode xml:lang="no">value (no)</somenode>'.
@@ -179,4 +174,34 @@ class SAML2_UtilsTest extends PHPUnit_Framework_TestCase
         $this->assertEquals('value (en)', $localizedStringValues["en"]);
         $this->assertEquals('value (no)', $localizedStringValues["no"]);
     }
+
+    /**
+     * Test xsDateTime format validity
+     *
+     * @dataProvider xsDateTimes
+     */
+    public function testXsDateTimeToTimestamp($shouldPass, $time, $expectedTs = null)
+    {
+        try {
+            $ts = SAML2_Utils::xsDateTimeToTimestamp($time);
+            $this->assertTrue($shouldPass);
+            $this->assertEquals($expectedTs, $ts);
+        } catch (Exception $e) {
+            $this->assertFalse($shouldPass);
+        }
+    }
+
+    public function xsDateTimes()
+    {
+        return array(
+            array(true, '2015-01-01T00:00:00Z', 1420070400),
+            array(true, '2015-01-01T00:00:00.0Z', 1420070400),
+            array(true, '2015-01-01T00:00:00.1Z', 1420070400),
+            array(false, '2015-01-01T00:00:00', 1420070400),
+            array(false, '2015-01-01T00:00:00.0', 1420070400),
+            array(false, 'junk'),
+            array(false, '2015-01-01T00:00:00-04:00'),
+            array(false, '2015-01-01T00:00:00.0-04:00'),
+        );
+    }
 }
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/AdditionalMetadataLocationTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/AdditionalMetadataLocationTest.php
index e9510fb..43497e7 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/AdditionalMetadataLocationTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/AdditionalMetadataLocationTest.php
@@ -7,8 +7,7 @@ class SAML2_XML_md_AdditionalMetadataLocationTest extends PHPUnit_Framework_Test
 {
     public function testMarshalling()
     {
-        $document = new DOMDocument();
-        $document->loadXML('<root/>');
+        $document = SAML2_DOMDocumentFactory::fromString('<root/>');
 
         $additionalMetadataLocation = new SAML2_XML_md_AdditionalMetadataLocation();
         $additionalMetadataLocation->namespace = 'NamespaceAttribute';
@@ -28,8 +27,7 @@ class SAML2_XML_md_AdditionalMetadataLocationTest extends PHPUnit_Framework_Test
 
     public function testUnmarshalling()
     {
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
             '<md:AdditionalMetadataLocation xmlns:md="' . SAML2_Const::NS_MD . '"'.
             ' namespace="TheNamespaceAttribute">LocationText</md:AdditionalMetadataLocation>'
         );
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/AffiliationDescriptorTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/AffiliationDescriptorTest.php
index 24345f7..b4fa78c 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/AffiliationDescriptorTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/AffiliationDescriptorTest.php
@@ -4,8 +4,7 @@ class SAML2_XML_md_AffiliationDescriptorTest extends PHPUnit_Framework_TestCase
 {
     public function testMarshalling()
     {
-        $document = new DOMDocument();
-        $document->loadXML('<root />');
+        $document = SAML2_DOMDocumentFactory::fromString('<root />');
 
         $affiliationDescriptorElement = new SAML2_XML_md_AffiliationDescriptor();
         $affiliationDescriptorElement->affiliationOwnerID = 'TheOwner';
@@ -40,8 +39,7 @@ class SAML2_XML_md_AffiliationDescriptorTest extends PHPUnit_Framework_TestCase
     public function testUnmarshalling()
     {
         $mdNamespace = SAML2_Const::NS_MD;
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $document = SAML2_DOMDocumentFactory::fromString(<<<XML
 <md:AffiliationDescriptor xmlns:md="{$mdNamespace}" affiliationOwnerID="TheOwner" ID="TheID" validUntil="2009-02-13T23:31:30Z" cacheDuration="PT5000S">
     <md:AffiliateMember>Member</md:AffiliateMember>
     <md:AffiliateMember>OtherMember</md:AffiliateMember>
@@ -62,8 +60,7 @@ XML
     public function testUnmarshallingWithoutMembers()
     {
         $mdNamespace = SAML2_Const::NS_MD;
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
 <<<XML
 <md:AffiliationDescriptor xmlns:md="{$mdNamespace}" affiliationOwnerID="TheOwner" ID="TheID" validUntil="2009-02-13T23:31:30Z" cacheDuration="PT5000S">
 </md:AffiliationDescriptor>
@@ -76,9 +73,7 @@ XML
     public function testUnmarshallingWithoutOwner()
     {
         $mdNamespace = SAML2_Const::NS_MD;
-        $document = new DOMDocument();
-
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
             <<<XML
     <md:AffiliationDescriptor xmlns:md="{$mdNamespace}" ID="TheID" validUntil="2009-02-13T23:31:30Z" cacheDuration="PT5000S">
     <md:AffiliateMember>Member</md:AffiliateMember>
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/EndpointTypeTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/EndpointTypeTest.php
index 72c57ae..208737b 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/EndpointTypeTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/EndpointTypeTest.php
@@ -11,8 +11,7 @@ class SAML2_XML_md_EndpointTypeTest extends PHPUnit_Framework_TestCase
         $endpointType->Binding = 'TestBinding';
         $endpointType->Location = 'TestLocation';
 
-        $document = new DOMDocument();
-        $document->loadXml('<root />');
+        $document = SAML2_DOMDocumentFactory::fromString('<root />');
         $endpointTypeElement = $endpointType->toXML($document->firstChild, 'md:Test');
 
         $endpointTypeElements = SAML2_Utils::xpQuery($endpointTypeElement, '/root/saml_metadata:Test');
@@ -38,8 +37,7 @@ class SAML2_XML_md_EndpointTypeTest extends PHPUnit_Framework_TestCase
     public function testUnmarshalling()
     {
         $mdNamespace = SAML2_Const::NS_MD;
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
 <<<XML
 <md:Test xmlns:md="{$mdNamespace}" Binding="urn:something" Location="https://whatever/" xmlns:test="urn:test" test:attr="value" />
 XML
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/EntityDescriptorTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/EntityDescriptorTest.php
index 95ba388..41715a1 100755
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/EntityDescriptorTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/EntityDescriptorTest.php
@@ -7,8 +7,7 @@ class SAML2_XML_md_EntityDescriptorTest extends \PHPUnit_Framework_TestCase
 {
     public function testMissingAffiliationId()
     {
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
         <<<XML
 <EntityDescriptor entityID="theEntityID" xmlns="urn:oasis:names:tc:SAML:2.0:metadata">
     <AffiliationDescriptor>
@@ -23,8 +22,7 @@ XML
 
     public function testMissingEntityId()
     {
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
         <<<XML
 <EntityDescriptor xmlns="urn:oasis:names:tc:SAML:2.0:metadata">
     <AffiliationDescriptor affiliationOwnerID="asdf">
@@ -39,8 +37,7 @@ XML
 
     public function testMissingAffiliateMember()
     {
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
         <<<XML
 <EntityDescriptor entityID="theEntityID" xmlns="urn:oasis:names:tc:SAML:2.0:metadata">
     <AffiliationDescriptor affiliationOwnerID="asdf">
@@ -54,8 +51,7 @@ XML
 
     public function testMissingDescriptor()
     {
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
         <<<XML
 <EntityDescriptor entityID="theEntityID" xmlns="urn:oasis:names:tc:SAML:2.0:metadata">
 </EntityDescriptor>
@@ -67,8 +63,7 @@ XML
 
     public function testInvalidValidUntil()
     {
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
         <<<XML
 <EntityDescriptor validUntil="asdf" entityID="theEntityID" xmlns="urn:oasis:names:tc:SAML:2.0:metadata">
     <AffiliationDescriptor affiliationOwnerID="asd">
@@ -83,8 +78,7 @@ XML
 
     public function testUnmarshalling()
     {
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
         <<<XML
 <EntityDescriptor entityID="theEntityID" xmlns="urn:oasis:names:tc:SAML:2.0:metadata">
     <AffiliationDescriptor affiliationOwnerID="asdf" ID="theAffiliationDescriptorID" validUntil="2010-02-01T12:34:56Z" cacheDuration="PT9000S" >
@@ -114,8 +108,7 @@ XML
 
     public function testUnmarshalling2()
     {
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $document = SAML2_DOMDocumentFactory::fromString(<<<XML
 <EntityDescriptor entityID="theEntityID" ID="theID" validUntil="2010-01-01T12:34:56Z" cacheDuration="PT5000S" xmlns="urn:oasis:names:tc:SAML:2.0:metadata">
 
     <AttributeAuthorityDescriptor protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/IndexedEndpointTypeTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/IndexedEndpointTypeTest.php
index 3ce629a..79141a8 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/IndexedEndpointTypeTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/IndexedEndpointTypeTest.php
@@ -13,8 +13,7 @@ class SAML2_XML_md_IndexedEndpointTypeTest extends \PHPUnit_Framework_TestCase
         $indexedEndpointType->index = 42;
         $indexedEndpointType->isDefault = FALSE;
 
-        $document = new DOMDocument();
-        $document->loadXML('<root />');
+        $document = SAML2_DOMDocumentFactory::fromString('<root />');
         $indexedEndpointTypeElement = $indexedEndpointType->toXML($document->firstChild, 'md:Test');
 
         $indexedEndpointElements = SAML2_Utils::xpQuery($indexedEndpointTypeElement, '/root/saml_metadata:Test');
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/RoleDescriptorTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/RoleDescriptorTest.php
index ce36e6c..d0bb513 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/RoleDescriptorTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/md/RoleDescriptorTest.php
@@ -16,8 +16,7 @@ class SAML2_XML_md_RoleDescriptorTest extends \PHPUnit_Framework_TestCase
         );
         $roleDescriptor->errorURL = 'https://example.org/error';
 
-        $document = new DOMDocument();
-        $document->loadXML('<root />');
+        $document = SAML2_DOMDocumentFactory::fromString('<root />');
         $roleDescriptorElement = $roleDescriptor->toXML($document->firstChild);
 
         $roleDescriptorElement = SAML2_Utils::xpQuery($roleDescriptorElement, '/root/md:RoleDescriptor');
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/mdrpi/PublicationInfoTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/mdrpi/PublicationInfoTest.php
index 54dec42..5044abd 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/mdrpi/PublicationInfoTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/mdrpi/PublicationInfoTest.php
@@ -16,8 +16,7 @@ class SAML2_XML_mdrpi_PublicationInfoTest extends \PHPUnit_Framework_TestCase
             'no' => 'http://NorwegianUsagePolicy',
         );
 
-        $document = new DOMDocument();
-        $document->loadXML('<root />');
+        $document = SAML2_DOMDocumentFactory::fromString('<root />');
         $xml = $publicationInfo->toXML($document->firstChild);
 
         $publicationInfoElements = SAML2_Utils::xpQuery(
@@ -45,8 +44,7 @@ class SAML2_XML_mdrpi_PublicationInfoTest extends \PHPUnit_Framework_TestCase
 
     public function testUnmarshalling()
     {
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $document = SAML2_DOMDocumentFactory::fromString(<<<XML
 <mdrpi:PublicationInfo xmlns:mdrpi="urn:oasis:names:tc:SAML:metadata:rpi"
                        publisher="SomePublisher"
                        creationInstant="2011-01-01T00:00:00Z"
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/AttributeTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/AttributeTest.php
index 9d5e8c9..3d063ab 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/AttributeTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/AttributeTest.php
@@ -16,8 +16,7 @@ class SAML2_XML_md_AttributeTest extends \PHPUnit_Framework_TestCase
             new SAML2_XML_saml_AttributeValue('SecondValue'),
         );
 
-        $document = new DOMDocument();
-        $document->loadXML('<root />');
+        $document = SAML2_DOMDocumentFactory::fromString('<root />');
         $attributeElement = $attribute->toXML($document->firstChild);
 
         $attributeElements = SAML2_Utils::xpQuery($attributeElement, '/root/saml_assertion:Attribute');
@@ -32,8 +31,7 @@ class SAML2_XML_md_AttributeTest extends \PHPUnit_Framework_TestCase
     public function testUnmarshalling()
     {
         $samlNamespace = SAML2_Const::NS_SAML;
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $document = SAML2_DOMDocumentFactory::fromString(<<<XML
 <saml:Attribute xmlns:saml="{$samlNamespace}" Name="TheName" NameFormat="TheNameFormat" FriendlyName="TheFriendlyName">
     <saml:AttributeValue>FirstValue</saml:AttributeValue>
     <saml:AttributeValue>SecondValue</saml:AttributeValue>
@@ -54,8 +52,7 @@ XML
     public function testUnmarshallingFailure()
     {
         $samlNamespace = SAML2_Const::NS_SAML;
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $document = SAML2_DOMDocumentFactory::fromString(<<<XML
 <saml:Attribute xmlns:saml="{$samlNamespace}" NameFormat="TheNameFormat" FriendlyName="TheFriendlyName">
     <saml:AttributeValue>FirstValue</saml:AttributeValue>
     <saml:AttributeValue>SecondValue</saml:AttributeValue>
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/NameIDTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/NameIDTest.php
index 9aa3c62..f74c463 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/NameIDTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/NameIDTest.php
@@ -25,12 +25,11 @@ class SAML2_XML_md_NameIDTest extends \PHPUnit_Framework_TestCase
         $this->assertEquals('TheSPProvidedID', $nameIdElement->getAttribute("SPProvidedID"));
         $this->assertEquals('TheNameIDValue', $nameIdElement->textContent);
     }
-    
+
     public function testUnmarshalling()
     {
         $samlNamespace = SAML2_Const::NS_SAML;
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $document = SAML2_DOMDocumentFactory::fromString(<<<XML
 <saml:NameID xmlns:saml="{$samlNamespace}" NameQualifier="TheNameQualifier" SPNameQualifier="TheSPNameQualifier" Format="TheFormat" SPProvidedID="TheSPProvidedID">TheNameIDValue</saml:NameID>
 XML
         );
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/SubjectConfirmationDataTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/SubjectConfirmationDataTest.php
index e21d550..b8f9117 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/SubjectConfirmationDataTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/SubjectConfirmationDataTest.php
@@ -14,8 +14,7 @@ class SAML2_XML_saml_SubjectConfirmationDataTest extends \PHPUnit_Framework_Test
         $subjectConfirmationData->InResponseTo = 'SomeRequestID';
         $subjectConfirmationData->Address = '127.0.0.1';
 
-        $document = new DOMDocument();
-        $document->loadXML('<root />');
+        $document = SAML2_DOMDocumentFactory::fromString('<root />');
         $subjectConfirmationDataElement = $subjectConfirmationData->toXML($document->firstChild);
 
         $subjectConfirmationDataElements = SAML2_Utils::xpQuery(
@@ -31,12 +30,11 @@ class SAML2_XML_saml_SubjectConfirmationDataTest extends \PHPUnit_Framework_Test
         $this->assertEquals('SomeRequestID', $subjectConfirmationDataElement->getAttribute("InResponseTo"));
         $this->assertEquals('127.0.0.1', $subjectConfirmationDataElement->getAttribute("Address"));
     }
-    
+
     public function testUnmarshalling()
     {
         $samlNamespace = SAML2_Const::NS_SAML;
-        $document = new DOMDocument();
-        $document->loadXML(<<<XML
+        $document = SAML2_DOMDocumentFactory::fromString(<<<XML
 <saml:SubjectConfirmationData
     xmlns:saml="{$samlNamespace}"
     NotBefore="2001-04-19T04:25:21Z"
diff --git a/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/SubjectConfirmationTest.php b/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/SubjectConfirmationTest.php
index 46396a5..8028d6a 100644
--- a/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/SubjectConfirmationTest.php
+++ b/vendor/simplesamlphp/saml2/tests/SAML2/XML/saml/SubjectConfirmationTest.php
@@ -13,8 +13,7 @@ class SAML2_XML_saml_SubjectConfirmationTest extends \PHPUnit_Framework_TestCase
         $subjectConfirmation->NameID->value = 'SomeNameIDValue';
         $subjectConfirmation->SubjectConfirmationData = new SAML2_XML_saml_SubjectConfirmationData();
 
-        $document = new DOMDocument();
-        $document->loadXML('<root />');
+        $document = SAML2_DOMDocumentFactory::fromString('<root />');
         $subjectConfirmationElement = $subjectConfirmation->toXML($document->firstChild);
         $subjectConfirmationElements = SAML2_Utils::xpQuery($subjectConfirmationElement, '//saml_assertion:SubjectConfirmation');
         $this->assertCount(1, $subjectConfirmationElements);
@@ -28,8 +27,7 @@ class SAML2_XML_saml_SubjectConfirmationTest extends \PHPUnit_Framework_TestCase
     public function testUnmarshalling()
     {
         $samlNamespace = SAML2_Const::NS_SAML;
-        $document = new DOMDocument();
-        $document->loadXML(
+        $document = SAML2_DOMDocumentFactory::fromString(
 <<<XML
 <saml:SubjectConfirmation xmlns:saml="{$samlNamespace}" Method="SomeMethod">
   <saml:NameID>SomeNameIDValue</saml:NameID>
diff --git a/vendor/simplesamlphp/saml2/tools/phpunit/phpunit.xml b/vendor/simplesamlphp/saml2/tools/phpunit/phpunit.xml
index d13ac44..ff7e909 100644
--- a/vendor/simplesamlphp/saml2/tools/phpunit/phpunit.xml
+++ b/vendor/simplesamlphp/saml2/tools/phpunit/phpunit.xml
@@ -20,4 +20,7 @@
             <directory>./../../src</directory>
         </whitelist>
     </filter>
+    <listeners>
+        <listener class="\Mockery\Adapter\Phpunit\TestListener" />
+    </listeners>
 </phpunit>
diff --git a/vendor/simplesamlphp/xmlseclibs/CHANGELOG.txt b/vendor/simplesamlphp/xmlseclibs/CHANGELOG.txt
index c3eb688..3b5e675 100644
--- a/vendor/simplesamlphp/xmlseclibs/CHANGELOG.txt
+++ b/vendor/simplesamlphp/xmlseclibs/CHANGELOG.txt
@@ -1,5 +1,54 @@
 xmlseclibs.php
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
+08, Sep 2016, 1.4.2
+Bug Fixes:
+- Strip whitespace characters when parsing X509Certificate. fixes #84
+  (klemen.bratec)
+- Certificate 'subject' values can be arrays. fixes #80 (Andreas Stangl)
+- HHVM signing node with ID attribute w/out namespace regenerates ID value.
+  fixes #88 (Milos Tomic)
+
+Improvements:
+- Fix typos and add some PHPDoc Blocks. (gfaust-qb)
+- Update lightSAML link. (Milos Tomic)
+- Update copyright dates.
+
+31, Jul 2015, 1.4.1
+Bug Fixes:
+- Allow for large digest values that may have line breaks. fixes #62
+
+Features:
+- Support for locating specific signature when multiple exist in 
+  document. (griga3k)
+
+Improvements:
+- Add optional argument to XMLSecurityDSig to define the prefix to be used, 
+  also allowing for null to use no prefix, for the dsig namespace. fixes #13
+- Code cleanup
+- Depreciated XMLSecurityDSig::generate_GUID for XMLSecurityDSig::generateGUID
+
+23, Jun 2015, 1.4.0
+Features:
+- Support for PSR-0 standard.
+- Support for X509SubjectName. (Milos Tomic)
+- Add HMAC-SHA1 support.
+
+Improvements:
+- Add how to install to README. (Bernardo Vieira da Silva)
+- Code cleanup. (Jaime Pérez)
+- Normalilze tests. (Hidde Wieringa)
+- Add basic usage to README. (Hidde Wieringa)
+
+21, May 2015, 1.3.2
+Bug Fixes:
+- Fix Undefined variable notice. (dpieper85)
+- Fix typo when setting MimeType attribute. (Eugene OZ)
+- Fix validateReference() with enveloping signatures
+
+Features:
+- canonicalizeData performance optimization. (Jaime Pérez)
+- Add composer support (Maks3w)
+
 19, Jun 2013, 1.3.1
 Features:
 - return encrypted node from XMLSecEnc::encryptNode() when replace is set to 
diff --git a/vendor/simplesamlphp/xmlseclibs/LICENSE b/vendor/simplesamlphp/xmlseclibs/LICENSE
index 0ab6135..e54bd03 100644
--- a/vendor/simplesamlphp/xmlseclibs/LICENSE
+++ b/vendor/simplesamlphp/xmlseclibs/LICENSE
@@ -1,4 +1,4 @@
-Copyright (c) 2007-2013, Robert Richards <rrichards@cdatazone.org>.
+Copyright (c) 2007-2016, Robert Richards <rrichards@cdatazone.org>.
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
diff --git a/vendor/simplesamlphp/xmlseclibs/composer.json b/vendor/simplesamlphp/xmlseclibs/composer.json
index e26b61d..b19cf3e 100644
--- a/vendor/simplesamlphp/xmlseclibs/composer.json
+++ b/vendor/simplesamlphp/xmlseclibs/composer.json
@@ -1,24 +1,24 @@
 {
-    "name": "simplesamlphp/xmlseclibs",
-    "description": "A PHP library for XML Security",
-    "authors": [
-        { "name": "Rob Richards" }
-    ],
-    "license": "BSD-3-Clause",
-    "type": "library",
-    "keywords": ["xml", "xmlsec", "security", "signing", "signature", "x.509", "certificate"],
-    "homepage": "http://code.google.com/p/xmlseclibs/",
-    "autoload": {
-        "files": ["xmlseclibs.php"]
-    },
-    "suggest": {
-        "ext/openssl": "",
-        "ext/mcrypt": ""
-    },
-    "time": "2013-06-19",
-    "replace": {
-        "cdatazone/xmlseclibs": "self.version",
-        "fr3d/xmlseclibs": "self.version",
-        "robrichards/xmlseclibs": "self.version"
-    }
+  "name": "robrichards/xmlseclibs",
+  "description": "A PHP library for XML Security",
+  "license": "BSD-3-Clause",
+  "keywords": [
+    "xml",
+    "xmldsig",
+    "signature",
+    "security"
+  ],
+  "homepage": "https://github.com/robrichards/xmlseclibs",
+  "autoload": {
+    "classmap": [
+      "src/"
+    ]
+  },
+  "require": {
+      "php": ">= 5.2"
+   },
+  "suggest": {
+    "ext/openssl": "OpenSSL extension",
+    "ext/mcrypt": "MCrypt extension"
+  }
 }
diff --git a/vendor/simplesamlphp/xmlseclibs/tests/basic-doc.xml b/vendor/simplesamlphp/xmlseclibs/tests/basic-doc.xml
index bbce7de..0521acf 100755
--- a/vendor/simplesamlphp/xmlseclibs/tests/basic-doc.xml
+++ b/vendor/simplesamlphp/xmlseclibs/tests/basic-doc.xml
@@ -1,7 +1,7 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- Basic XML example -->
-<Root xmlns="urn:envelope">
-  <Value>
-	Hello, World!
-  </Value>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Basic XML example -->
+<Root xmlns="urn:envelope">
+  <Value>
+	Hello, World!
+  </Value>
 </Root>
\ No newline at end of file
diff --git a/vendor/simplesamlphp/xmlseclibs/tests/sign-c14-comments.phpt b/vendor/simplesamlphp/xmlseclibs/tests/sign-c14-comments.phpt
index 952e660..137e2f9 100644
--- a/vendor/simplesamlphp/xmlseclibs/tests/sign-c14-comments.phpt
+++ b/vendor/simplesamlphp/xmlseclibs/tests/sign-c14-comments.phpt
@@ -39,9 +39,9 @@ $doc->save(dirname(__FILE__) . '/sign-c14-comments.xml');
 $sign_output = file_get_contents(dirname(__FILE__) . '/sign-c14-comments.xml');
 $sign_output_def = file_get_contents(dirname(__FILE__) . '/sign-c14-comments.res');
 if ($sign_output != $sign_output_def) {
-    echo "NOT THE SAME";
+    echo "NOT THE SAME\n";
 }
-echo "DONE";
+echo "DONE\n";
 ?>
 --EXPECTF--
 DONE
diff --git a/vendor/simplesamlphp/xmlseclibs/tests/thumbprint.phpt b/vendor/simplesamlphp/xmlseclibs/tests/thumbprint.phpt
index 21a192c..be97b2c 100644
--- a/vendor/simplesamlphp/xmlseclibs/tests/thumbprint.phpt
+++ b/vendor/simplesamlphp/xmlseclibs/tests/thumbprint.phpt
@@ -9,7 +9,7 @@ $siteKey->loadKey(dirname(__FILE__) . '/mycert.pem', TRUE, TRUE);
 
 $thumbprint = $siteKey->getX509Thumbprint();
 echo $thumbprint."\n";
-echo base64_encode($thumbprint);
+echo base64_encode($thumbprint)."\n";
 ?>
 --EXPECTF--
 8b600d9155e8e8dfa3c10998f736be086e83ef3b
diff --git a/vendor/simplesamlphp/xmlseclibs/tests/xml-sign-sha256-rsa-sha256.phpt b/vendor/simplesamlphp/xmlseclibs/tests/xml-sign-sha256-rsa-sha256.phpt
index 0efacd0..88b05ca 100644
--- a/vendor/simplesamlphp/xmlseclibs/tests/xml-sign-sha256-rsa-sha256.phpt
+++ b/vendor/simplesamlphp/xmlseclibs/tests/xml-sign-sha256-rsa-sha256.phpt
@@ -37,9 +37,9 @@ $doc->save(dirname(__FILE__) . '/sign-sha256-rsa-sha256-test.xml');
 $sign_output = file_get_contents(dirname(__FILE__) . '/sign-sha256-rsa-sha256-test.xml');
 $sign_output_def = file_get_contents(dirname(__FILE__) . '/sign-sha256-rsa-sha256-test.res');
 if ($sign_output != $sign_output_def) {
-	echo "NOT THE SAME";
+	echo "NOT THE SAME\n";
 }
-echo "DONE";
+echo "DONE\n";
 ?>
 --EXPECTF--
 DONE
diff --git a/vendor/simplesamlphp/xmlseclibs/tests/xml-sign.phpt b/vendor/simplesamlphp/xmlseclibs/tests/xml-sign.phpt
index 98a29d8..85a31f2 100755
--- a/vendor/simplesamlphp/xmlseclibs/tests/xml-sign.phpt
+++ b/vendor/simplesamlphp/xmlseclibs/tests/xml-sign.phpt
@@ -1,43 +1,43 @@
---TEST--
-Basic Signature
---FILE--
-<?php
-require(dirname(__FILE__) . '/../xmlseclibs.php');
-
-if (file_exists(dirname(__FILE__) . '/sign-basic-test.xml')) {
-    unlink(dirname(__FILE__) . '/sign-basic-test.xml');
-}
-
-$doc = new DOMDocument();
-$doc->load(dirname(__FILE__) . '/basic-doc.xml');
-
-$objDSig = new XMLSecurityDSig();
-
-$objDSig->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);
-
-$objDSig->addReference($doc, XMLSecurityDSig::SHA1, array('http://www.w3.org/2000/09/xmldsig#enveloped-signature'));
-
-$objKey = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array('type'=>'private'));
-/* load private key */
-$objKey->loadKey(dirname(__FILE__) . '/privkey.pem', TRUE);
-
-/* if key has Passphrase, set it using $objKey->passphrase = <passphrase> " */
-
-
-$objDSig->sign($objKey);
-
-/* Add associated public key */
-$objDSig->add509Cert(file_get_contents(dirname(__FILE__) . '/mycert.pem'));
-
-$objDSig->appendSignature($doc->documentElement);
-$doc->save(dirname(__FILE__) . '/sign-basic-test.xml');
-
-$sign_output = file_get_contents(dirname(__FILE__) . '/sign-basic-test.xml');
-$sign_output_def = file_get_contents(dirname(__FILE__) . '/sign-basic-test.res');
-if ($sign_output != $sign_output_def) {
-	echo "NOT THE SAME";
-}
-echo "DONE";
-?>
---EXPECTF--
-DONE
+--TEST--
+Basic Signature
+--FILE--
+<?php
+require(dirname(__FILE__) . '/../xmlseclibs.php');
+
+if (file_exists(dirname(__FILE__) . '/sign-basic-test.xml')) {
+    unlink(dirname(__FILE__) . '/sign-basic-test.xml');
+}
+
+$doc = new DOMDocument();
+$doc->load(dirname(__FILE__) . '/basic-doc.xml');
+
+$objDSig = new XMLSecurityDSig();
+
+$objDSig->setCanonicalMethod(XMLSecurityDSig::EXC_C14N);
+
+$objDSig->addReference($doc, XMLSecurityDSig::SHA1, array('http://www.w3.org/2000/09/xmldsig#enveloped-signature'));
+
+$objKey = new XMLSecurityKey(XMLSecurityKey::RSA_SHA1, array('type'=>'private'));
+/* load private key */
+$objKey->loadKey(dirname(__FILE__) . '/privkey.pem', TRUE);
+
+/* if key has Passphrase, set it using $objKey->passphrase = <passphrase> " */
+
+
+$objDSig->sign($objKey);
+
+/* Add associated public key */
+$objDSig->add509Cert(file_get_contents(dirname(__FILE__) . '/mycert.pem'));
+
+$objDSig->appendSignature($doc->documentElement);
+$doc->save(dirname(__FILE__) . '/sign-basic-test.xml');
+
+$sign_output = file_get_contents(dirname(__FILE__) . '/sign-basic-test.xml');
+$sign_output_def = file_get_contents(dirname(__FILE__) . '/sign-basic-test.res');
+if ($sign_output != $sign_output_def) {
+	echo "NOT THE SAME\n";
+}
+echo "DONE\n";
+?>
+--EXPECTF--
+DONE
diff --git a/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-decrypt-content.phpt b/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-decrypt-content.phpt
index b6e638f..3f66fef 100644
--- a/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-decrypt-content.phpt
+++ b/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-decrypt-content.phpt
@@ -1,93 +1,92 @@
---TEST--
-Basic Decryption: Content
---FILE--
-<?php
-require(dirname(__FILE__) . '/../xmlseclibs.php');
-
-/* When we need to locate our own key based on something like a key name */
-function locateLocalKey($objKey) {
-	/* In this example the key is identified by filename */
-	$filename = $objKey->name;
-	if (! empty($filename)) {
-		$objKey->loadKey(dirname(__FILE__) . "/$filename", TRUE);
-	} else {
-	    $objKey->loadKey(dirname(__FILE__) . "/privkey.pem", TRUE);
-	}
-}
-
-$arTests = array('AOESP_SHA1'=>'oaep_sha1-res.xml',
-   'AOESP_SHA1_CONTENT'=>'oaep_sha1-content-res.xml');
-
-$doc = new DOMDocument();
-
-foreach ($arTests AS $testName=>$testFile) {
-	$output = NULL;
-	print "$testName: ";
-
-	$doc->load(dirname(__FILE__) . "/$testFile");
-	
-	try {
-		$objenc = new XMLSecEnc();
-		$encData = $objenc->locateEncryptedData($doc);
-		if (! $encData) {
-			throw new Exception("Cannot locate Encrypted Data");
-		}
-		$objenc->setNode($encData);
-		$objenc->type = $encData->getAttribute("Type");
-		if (! $objKey = $objenc->locateKey()) {
-			throw new Exception("We know the secret key, but not the algorithm");
-		}
-		$key = NULL;
-		
-		if ($objKeyInfo = $objenc->locateKeyInfo($objKey)) {
-			if ($objKeyInfo->isEncrypted) {
-				$objencKey = $objKeyInfo->encryptedCtx;
-				locateLocalKey($objKeyInfo);
-				$key = $objencKey->decryptKey($objKeyInfo);
-			}
-		}
-		
-		if (! $objKey->key && empty($key)) {
-			locateLocalKey($objKey);
-		}
-		if (empty($objKey->key)) {
-			$objKey->loadKey($key);
-		}
-		
-		$token = NULL;
-
-		if ($decrypt = $objenc->decryptNode($objKey, TRUE)) {
-			$output = NULL;
-			if ($decrypt instanceof DOMNode) {
-				if ($decrypt instanceof DOMDocument) {	
-					$output = $decrypt->saveXML();
-				} else {
-					$output = $decrypt->ownerDocument->saveXML();
-				}
-			} else {
-				$output = $decrypt;
-			}
-		}
-	} catch (Exception $e) {
-
-	}
-
-	$outfile = dirname(__FILE__) . "/basic-doc.xml";
-	$res = NULL;
-	if (file_exists($outfile)) {
-	    $resDoc = new DOMDocument();
-	    $resDoc->load($outfile);
-		$res = $resDoc->saveXML();
-		if ($output == $res) {
-			print "Passed\n";
-			continue;
-		}
-	}
-	print "Failed\n";
-	
-}
-?>
---EXPECTF--
-AOESP_SHA1: Passed
-AOESP_SHA1_CONTENT: Passed
-
+--TEST--
+Basic Decryption: Content
+--FILE--
+<?php
+require(dirname(__FILE__) . '/../xmlseclibs.php');
+
+/* When we need to locate our own key based on something like a key name */
+function locateLocalKey($objKey) {
+	/* In this example the key is identified by filename */
+	$filename = $objKey->name;
+	if (! empty($filename)) {
+		$objKey->loadKey(dirname(__FILE__) . "/$filename", TRUE);
+	} else {
+	    $objKey->loadKey(dirname(__FILE__) . "/privkey.pem", TRUE);
+	}
+}
+
+$arTests = array('AOESP_SHA1'=>'oaep_sha1-res.xml',
+   'AOESP_SHA1_CONTENT'=>'oaep_sha1-content-res.xml');
+
+$doc = new DOMDocument();
+
+foreach ($arTests AS $testName=>$testFile) {
+	$output = NULL;
+	print "$testName: ";
+
+	$doc->load(dirname(__FILE__) . "/$testFile");
+	
+	try {
+		$objenc = new XMLSecEnc();
+		$encData = $objenc->locateEncryptedData($doc);
+		if (! $encData) {
+			throw new Exception("Cannot locate Encrypted Data");
+		}
+		$objenc->setNode($encData);
+		$objenc->type = $encData->getAttribute("Type");
+		if (! $objKey = $objenc->locateKey()) {
+			throw new Exception("We know the secret key, but not the algorithm");
+		}
+		$key = NULL;
+		
+		if ($objKeyInfo = $objenc->locateKeyInfo($objKey)) {
+			if ($objKeyInfo->isEncrypted) {
+				$objencKey = $objKeyInfo->encryptedCtx;
+				locateLocalKey($objKeyInfo);
+				$key = $objencKey->decryptKey($objKeyInfo);
+			}
+		}
+		
+		if (! $objKey->key && empty($key)) {
+			locateLocalKey($objKey);
+		}
+		if (empty($objKey->key)) {
+			$objKey->loadKey($key);
+		}
+		
+		$token = NULL;
+
+		if ($decrypt = $objenc->decryptNode($objKey, TRUE)) {
+			$output = NULL;
+			if ($decrypt instanceof DOMNode) {
+				if ($decrypt instanceof DOMDocument) {	
+					$output = $decrypt->saveXML();
+				} else {
+					$output = $decrypt->ownerDocument->saveXML();
+				}
+			} else {
+				$output = $decrypt;
+			}
+		}
+	} catch (Exception $e) {
+
+	}
+
+	$outfile = dirname(__FILE__) . "/basic-doc.xml";
+	$res = NULL;
+	if (file_exists($outfile)) {
+	    $resDoc = new DOMDocument();
+	    $resDoc->load($outfile);
+		$res = $resDoc->saveXML();
+		if ($output == $res) {
+			print "Passed\n";
+			continue;
+		}
+	}
+	print "Failed\n";
+	
+}
+?>
+--EXPECTF--
+AOESP_SHA1: Passed
+AOESP_SHA1_CONTENT: Passed
diff --git a/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-decrypt.phpt b/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-decrypt.phpt
index caa1fa9..59323b8 100755
--- a/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-decrypt.phpt
+++ b/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-decrypt.phpt
@@ -1,90 +1,90 @@
---TEST--
-Basic Decryption
---FILE--
-<?php
-require(dirname(__FILE__) . '/../xmlseclibs.php');
-
-/* When we need to locate our own key based on something like a key name */
-function locateLocalKey($objKey) {
-	/* In this example the key is identified by filename */
-	$filename = $objKey->name;
-	if (! empty($filename)) {
-		$objKey->loadKey(dirname(__FILE__) . "/$filename", TRUE);
-	} else {
-	    $objKey->loadKey(dirname(__FILE__) . "/privkey.pem", TRUE);
-	}
-}
-
-$arTests = array('AOESP_SHA1'=>'oaep_sha1-res.xml');
-
-$doc = new DOMDocument();
-
-foreach ($arTests AS $testName=>$testFile) {
-	$output = NULL;
-	print "$testName: ";
-
-	$doc->load(dirname(__FILE__) . "/$testFile");
-	
-	try {
-		$objenc = new XMLSecEnc();
-		$encData = $objenc->locateEncryptedData($doc);
-		if (! $encData) {
-			throw new Exception("Cannot locate Encrypted Data");
-		}
-		$objenc->setNode($encData);
-		$objenc->type = $encData->getAttribute("Type");
-		if (! $objKey = $objenc->locateKey()) {
-			throw new Exception("We know the secret key, but not the algorithm");
-		}
-		$key = NULL;
-		
-		if ($objKeyInfo = $objenc->locateKeyInfo($objKey)) {
-			if ($objKeyInfo->isEncrypted) {
-				$objencKey = $objKeyInfo->encryptedCtx;
-				locateLocalKey($objKeyInfo);
-				$key = $objencKey->decryptKey($objKeyInfo);
-			}
-		}
-		
-		if (! $objKey->key && empty($key)) {
-			locateLocalKey($objKey);
-		}
-		if (empty($objKey->key)) {
-			$objKey->loadKey($key);
-		}
-		
-		$token = NULL;
-
-		if ($decrypt = $objenc->decryptNode($objKey, TRUE)) {
-			$output = NULL;
-			if ($decrypt instanceof DOMNode) {
-				if ($decrypt instanceof DOMDocument) {	
-					$output = $decrypt->saveXML();
-				} else {
-					$output = $decrypt->ownerDocument->saveXML();
-				}
-			} else {
-				$output = $decrypt;
-			}
-		}
-	} catch (Exception $e) {
-
-	}
-
-	$outfile = dirname(__FILE__) . "/basic-doc.xml";
-	$res = NULL;
-	if (file_exists($outfile)) {
-	    $resDoc = new DOMDocument();
-	    $resDoc->load($outfile);
-		$res = $resDoc->saveXML();
-		if ($output == $res) {
-			print "Passed\n";
-			continue;
-		}
-	}
-	print "Failed\n";
-	
-}
-?>
---EXPECTF--
-AOESP_SHA1: Passed
+--TEST--
+Basic Decryption
+--FILE--
+<?php
+require(dirname(__FILE__) . '/../xmlseclibs.php');
+
+/* When we need to locate our own key based on something like a key name */
+function locateLocalKey($objKey) {
+	/* In this example the key is identified by filename */
+	$filename = $objKey->name;
+	if (! empty($filename)) {
+		$objKey->loadKey(dirname(__FILE__) . "/$filename", TRUE);
+	} else {
+	    $objKey->loadKey(dirname(__FILE__) . "/privkey.pem", TRUE);
+	}
+}
+
+$arTests = array('AOESP_SHA1'=>'oaep_sha1-res.xml');
+
+$doc = new DOMDocument();
+
+foreach ($arTests AS $testName=>$testFile) {
+	$output = NULL;
+	print "$testName: ";
+
+	$doc->load(dirname(__FILE__) . "/$testFile");
+	
+	try {
+		$objenc = new XMLSecEnc();
+		$encData = $objenc->locateEncryptedData($doc);
+		if (! $encData) {
+			throw new Exception("Cannot locate Encrypted Data");
+		}
+		$objenc->setNode($encData);
+		$objenc->type = $encData->getAttribute("Type");
+		if (! $objKey = $objenc->locateKey()) {
+			throw new Exception("We know the secret key, but not the algorithm");
+		}
+		$key = NULL;
+		
+		if ($objKeyInfo = $objenc->locateKeyInfo($objKey)) {
+			if ($objKeyInfo->isEncrypted) {
+				$objencKey = $objKeyInfo->encryptedCtx;
+				locateLocalKey($objKeyInfo);
+				$key = $objencKey->decryptKey($objKeyInfo);
+			}
+		}
+		
+		if (! $objKey->key && empty($key)) {
+			locateLocalKey($objKey);
+		}
+		if (empty($objKey->key)) {
+			$objKey->loadKey($key);
+		}
+		
+		$token = NULL;
+
+		if ($decrypt = $objenc->decryptNode($objKey, TRUE)) {
+			$output = NULL;
+			if ($decrypt instanceof DOMNode) {
+				if ($decrypt instanceof DOMDocument) {	
+					$output = $decrypt->saveXML();
+				} else {
+					$output = $decrypt->ownerDocument->saveXML();
+				}
+			} else {
+				$output = $decrypt;
+			}
+		}
+	} catch (Exception $e) {
+
+	}
+
+	$outfile = dirname(__FILE__) . "/basic-doc.xml";
+	$res = NULL;
+	if (file_exists($outfile)) {
+	    $resDoc = new DOMDocument();
+	    $resDoc->load($outfile);
+		$res = $resDoc->saveXML();
+		if ($output == $res) {
+			print "Passed\n";
+			continue;
+		}
+	}
+	print "Failed\n";
+	
+}
+?>
+--EXPECTF--
+AOESP_SHA1: Passed
diff --git a/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-encrypt-content.phpt b/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-encrypt-content.phpt
index ecde7c1..5e4c842 100644
--- a/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-encrypt-content.phpt
+++ b/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-encrypt-content.phpt
@@ -27,7 +27,7 @@ $encNode = $enc->encryptNode($objKey);
 $dom->save(dirname(__FILE__) . '/oaep_sha1.xml');
 
 $root = $dom->documentElement;
-echo $root->localName;
+echo $root->localName."\n";
 
 unlink(dirname(__FILE__) . '/oaep_sha1.xml');
 
diff --git a/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-encrypt.phpt b/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-encrypt.phpt
index 5a8ee58..ba6543f 100644
--- a/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-encrypt.phpt
+++ b/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-encrypt.phpt
@@ -27,7 +27,7 @@ $encNode = $enc->encryptNode($objKey);
 $dom->save(dirname(__FILE__) . '/oaep_sha1.xml');
 
 $root = $dom->documentElement;
-echo $root->localName;
+echo $root->localName."\n";
 
 unlink(dirname(__FILE__) . '/oaep_sha1.xml');
 
diff --git a/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-verify.phpt b/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-verify.phpt
index 221dc8c..6a21c98 100755
--- a/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-verify.phpt
+++ b/vendor/simplesamlphp/xmlseclibs/tests/xmlsec-verify.phpt
@@ -1,50 +1,50 @@
---TEST--
-Basic Verify
---FILE--
-<?php
-require(dirname(__FILE__) . '/../xmlseclibs.php');
-
-$doc = new DOMDocument();
-$arTests = array('SIGN_TEST'=>'sign-basic-test.xml');
-
-foreach ($arTests AS $testName=>$testFile) {
-	$doc->load(dirname(__FILE__) . "/$testFile");
-	$objXMLSecDSig = new XMLSecurityDSig();
-	
-	$objDSig = $objXMLSecDSig->locateSignature($doc);
-	if (! $objDSig) {
-		throw new Exception("Cannot locate Signature Node");
-	}
-	$objXMLSecDSig->canonicalizeSignedInfo();
-	$objXMLSecDSig->idKeys = array('wsu:Id');
-	$objXMLSecDSig->idNS = array('wsu'=>'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd');
-	
-	$retVal = $objXMLSecDSig->validateReference();
-
-	if (! $retVal) {
-		throw new Exception("Reference Validation Failed");
-	}
-	
-	$objKey = $objXMLSecDSig->locateKey();
-	if (! $objKey ) {
-		throw new Exception("We have no idea about the key");
-	}
-	$key = NULL;
-	
-	$objKeyInfo = XMLSecEnc::staticLocateKeyInfo($objKey, $objDSig);
-
-	if (! $objKeyInfo->key && empty($key)) {
-		$objKey->loadKey(dirname(__FILE__) . '/mycert.pem', TRUE);
-	}
-
-	print $testName.": ";
-	if ($objXMLSecDSig->verify($objKey)) {
-		print "Signature validated!";
-	} else {
-		print "Failure!!!!!!!!";
-	}
-	print "\n";
-}
-?>
---EXPECTF--
-SIGN_TEST: Signature validated!
+--TEST--
+Basic Verify
+--FILE--
+<?php
+require(dirname(__FILE__) . '/../xmlseclibs.php');
+
+$doc = new DOMDocument();
+$arTests = array('SIGN_TEST'=>'sign-basic-test.xml');
+
+foreach ($arTests AS $testName=>$testFile) {
+	$doc->load(dirname(__FILE__) . "/$testFile");
+	$objXMLSecDSig = new XMLSecurityDSig();
+	
+	$objDSig = $objXMLSecDSig->locateSignature($doc);
+	if (! $objDSig) {
+		throw new Exception("Cannot locate Signature Node");
+	}
+	$objXMLSecDSig->canonicalizeSignedInfo();
+	$objXMLSecDSig->idKeys = array('wsu:Id');
+	$objXMLSecDSig->idNS = array('wsu'=>'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd');
+	
+	$retVal = $objXMLSecDSig->validateReference();
+
+	if (! $retVal) {
+		throw new Exception("Reference Validation Failed");
+	}
+	
+	$objKey = $objXMLSecDSig->locateKey();
+	if (! $objKey ) {
+		throw new Exception("We have no idea about the key");
+	}
+	$key = NULL;
+	
+	$objKeyInfo = XMLSecEnc::staticLocateKeyInfo($objKey, $objDSig);
+
+	if (! $objKeyInfo->key && empty($key)) {
+		$objKey->loadKey(dirname(__FILE__) . '/mycert.pem', TRUE);
+	}
+
+	print $testName.": ";
+	if ($objXMLSecDSig->verify($objKey)) {
+		print "Signature validated!";
+	} else {
+		print "Failure!!!!!!!!";
+	}
+	print "\n";
+}
+?>
+--EXPECTF--
+SIGN_TEST: Signature validated!
diff --git a/vendor/simplesamlphp/xmlseclibs/xmlseclibs.php b/vendor/simplesamlphp/xmlseclibs/xmlseclibs.php
index 5fc561e..d3c462c 100644
--- a/vendor/simplesamlphp/xmlseclibs/xmlseclibs.php
+++ b/vendor/simplesamlphp/xmlseclibs/xmlseclibs.php
@@ -2,7 +2,7 @@
 /**
  * xmlseclibs.php
  *
- * Copyright (c) 2007-2013, Robert Richards <rrichards@cdatazone.org>.
+ * Copyright (c) 2007-2016, Robert Richards <rrichards@cdatazone.org>.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -34,1780 +34,13 @@
  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  *
- * @author     Robert Richards <rrichards@cdatazone.org>
- * @copyright  2007-2013 Robert Richards <rrichards@cdatazone.org>
- * @license    http://www.opensource.org/licenses/bsd-license.php  BSD License
- * @version    1.3.1
+ * @author    Robert Richards <rrichards@cdatazone.org>
+ * @copyright 2007-2016 Robert Richards <rrichards@cdatazone.org>
+ * @license   http://www.opensource.org/licenses/bsd-license.php  BSD License
+ * @version   1.4.2
  */
 
-/*
-Functions to generate simple cases of Exclusive Canonical XML - Callable function is C14NGeneral()
-i.e.: $canonical = C14NGeneral($domelement, TRUE);
-*/
-
-/* helper function */
-function sortAndAddAttrs($element, $arAtts) {
-   $newAtts = array();
-   foreach ($arAtts AS $attnode) {
-      $newAtts[$attnode->nodeName] = $attnode;
-   }
-   ksort($newAtts);
-   foreach ($newAtts as $attnode) {
-      $element->setAttribute($attnode->nodeName, $attnode->nodeValue);
-   }
-}
-
-/* helper function */
-function canonical($tree, $element, $withcomments) {
-    if ($tree->nodeType != XML_DOCUMENT_NODE) {
-        $dom = $tree->ownerDocument;
-    } else {
-        $dom = $tree;
-    }
-    if ($element->nodeType != XML_ELEMENT_NODE) {
-        if ($element->nodeType == XML_DOCUMENT_NODE) {
-            foreach ($element->childNodes AS $node) {
-                canonical($dom, $node, $withcomments);
-            }
-            return;
-        }
-        if ($element->nodeType == XML_COMMENT_NODE && ! $withcomments) {
-            return;
-        }
-        $tree->appendChild($dom->importNode($element, TRUE));
-        return;
-    }
-    $arNS = array();
-    if ($element->namespaceURI != "") {
-        if ($element->prefix == "") {
-            $elCopy = $dom->createElementNS($element->namespaceURI, $element->nodeName);
-        } else {
-            $prefix = $tree->lookupPrefix($element->namespaceURI);
-            if ($prefix == $element->prefix) {
-                $elCopy = $dom->createElementNS($element->namespaceURI, $element->nodeName);
-            } else {
-                $elCopy = $dom->createElement($element->nodeName);
-                $arNS[$element->namespaceURI] = $element->prefix;
-            }
-        }
-    } else {
-        $elCopy = $dom->createElement($element->nodeName);
-    }
-    $tree->appendChild($elCopy);
-
-    /* Create DOMXPath based on original document */
-    $xPath = new DOMXPath($element->ownerDocument);
-
-    /* Get namespaced attributes */
-    $arAtts = $xPath->query('attribute::*[namespace-uri(.) != ""]', $element);
-
-    /* Create an array with namespace URIs as keys, and sort them */
-    foreach ($arAtts AS $attnode) {
-        if (array_key_exists($attnode->namespaceURI, $arNS) &&
-            ($arNS[$attnode->namespaceURI] == $attnode->prefix)) {
-            continue;
-        }
-        $prefix = $tree->lookupPrefix($attnode->namespaceURI);
-        if ($prefix != $attnode->prefix) {
-           $arNS[$attnode->namespaceURI] = $attnode->prefix;
-        } else {
-            $arNS[$attnode->namespaceURI] = NULL;
-        }
-    }
-    if (count($arNS) > 0) {
-        asort($arNS);
-    }
-
-    /* Add namespace nodes */
-    foreach ($arNS AS $namespaceURI=>$prefix) {
-        if ($prefix != NULL) {
-              $elCopy->setAttributeNS("http://www.w3.org/2000/xmlns/",
-                               "xmlns:".$prefix, $namespaceURI);
-        }
-    }
-    if (count($arNS) > 0) {
-        ksort($arNS);
-    }
-
-    /* Get attributes not in a namespace, and then sort and add them */
-    $arAtts = $xPath->query('attribute::*[namespace-uri(.) = ""]', $element);
-    sortAndAddAttrs($elCopy, $arAtts);
-
-    /* Loop through the URIs, and then sort and add attributes within that namespace */
-    foreach ($arNS as $nsURI=>$prefix) {
-       $arAtts = $xPath->query('attribute::*[namespace-uri(.) = "'.$nsURI.'"]', $element);
-       sortAndAddAttrs($elCopy, $arAtts);
-    }
-
-    foreach ($element->childNodes AS $node) {
-        canonical($elCopy, $node, $withcomments);
-    }
-}
-
-/*
-$element - DOMElement for which to produce the canonical version of
-$exclusive - boolean to indicate exclusive canonicalization (must pass TRUE)
-$withcomments - boolean indicating wether or not to include comments in canonicalized form
-*/
-function C14NGeneral($element, $exclusive=FALSE, $withcomments=FALSE) {
-    /* IF PHP 5.2+ then use built in canonical functionality */
-    $php_version = explode('.', PHP_VERSION);
-    if (($php_version[0] > 5) || ($php_version[0] == 5 && $php_version[1] >= 2) ) {
-        return $element->C14N($exclusive, $withcomments);
-    }
-
-    /* Must be element or document */
-    if (! $element instanceof DOMElement && ! $element instanceof DOMDocument) {
-        return NULL;
-    }
-    /* Currently only exclusive XML is supported */
-    if ($exclusive == FALSE) {
-        throw new Exception("Only exclusive canonicalization is supported in this version of PHP");
-    }
-
-    $copyDoc = new DOMDocument();
-    canonical($copyDoc, $element, $withcomments);
-    return $copyDoc->saveXML($copyDoc->documentElement, LIBXML_NOEMPTYTAG);
-}
-
-class XMLSecurityKey {
-    const TRIPLEDES_CBC = 'http://www.w3.org/2001/04/xmlenc#tripledes-cbc';
-    const AES128_CBC = 'http://www.w3.org/2001/04/xmlenc#aes128-cbc';
-    const AES192_CBC = 'http://www.w3.org/2001/04/xmlenc#aes192-cbc';
-    const AES256_CBC = 'http://www.w3.org/2001/04/xmlenc#aes256-cbc';
-    const RSA_1_5 = 'http://www.w3.org/2001/04/xmlenc#rsa-1_5';
-    const RSA_OAEP_MGF1P = 'http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p';
-    const DSA_SHA1 = 'http://www.w3.org/2000/09/xmldsig#dsa-sha1';
-    const RSA_SHA1 = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';
-    const RSA_SHA256 = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256';
-    const RSA_SHA384 = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384';
-    const RSA_SHA512 = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512';
-
-    private $cryptParams = array();
-    public $type = 0;
-    public $key = NULL;
-    public $passphrase = "";
-    public $iv = NULL;
-    public $name = NULL;
-    public $keyChain = NULL;
-    public $isEncrypted = FALSE;
-    public $encryptedCtx = NULL;
-    public $guid = NULL;
-
-    /**
-     * This variable contains the certificate as a string if this key represents an X509-certificate.
-     * If this key doesn't represent a certificate, this will be NULL.
-     */
-    private $x509Certificate = NULL;
-
-    /* This variable contains the certificate thunbprint if we have loaded an X509-certificate. */
-    private $X509Thumbprint = NULL;
-
-    public function __construct($type, $params=NULL) {
-        srand();
-        switch ($type) {
-            case (XMLSecurityKey::TRIPLEDES_CBC):
-                $this->cryptParams['library'] = 'mcrypt';
-                $this->cryptParams['cipher'] = MCRYPT_TRIPLEDES;
-                $this->cryptParams['mode'] = MCRYPT_MODE_CBC;
-                $this->cryptParams['method'] = 'http://www.w3.org/2001/04/xmlenc#tripledes-cbc';
-                $this->cryptParams['keysize'] = 24;
-                break;
-            case (XMLSecurityKey::AES128_CBC):
-                $this->cryptParams['library'] = 'mcrypt';
-                $this->cryptParams['cipher'] = MCRYPT_RIJNDAEL_128;
-                $this->cryptParams['mode'] = MCRYPT_MODE_CBC;
-                $this->cryptParams['method'] = 'http://www.w3.org/2001/04/xmlenc#aes128-cbc';
-                $this->cryptParams['keysize'] = 16;
-                break;
-            case (XMLSecurityKey::AES192_CBC):
-                $this->cryptParams['library'] = 'mcrypt';
-                $this->cryptParams['cipher'] = MCRYPT_RIJNDAEL_128;
-                $this->cryptParams['mode'] = MCRYPT_MODE_CBC;
-                $this->cryptParams['method'] = 'http://www.w3.org/2001/04/xmlenc#aes192-cbc';
-                $this->cryptParams['keysize'] = 24;
-                break;
-            case (XMLSecurityKey::AES256_CBC):
-                $this->cryptParams['library'] = 'mcrypt';
-                $this->cryptParams['cipher'] = MCRYPT_RIJNDAEL_128;
-                $this->cryptParams['mode'] = MCRYPT_MODE_CBC;
-                $this->cryptParams['method'] = 'http://www.w3.org/2001/04/xmlenc#aes256-cbc';
-                $this->cryptParams['keysize'] = 32;
-                break;
-            case (XMLSecurityKey::RSA_1_5):
-                $this->cryptParams['library'] = 'openssl';
-                $this->cryptParams['padding'] = OPENSSL_PKCS1_PADDING;
-                $this->cryptParams['method'] = 'http://www.w3.org/2001/04/xmlenc#rsa-1_5';
-                if (is_array($params) && ! empty($params['type'])) {
-                    if ($params['type'] == 'public' || $params['type'] == 'private') {
-                        $this->cryptParams['type'] = $params['type'];
-                        break;
-                    }
-                }
-                throw new Exception('Certificate "type" (private/public) must be passed via parameters');
-                return;
-            case (XMLSecurityKey::RSA_OAEP_MGF1P):
-                $this->cryptParams['library'] = 'openssl';
-                $this->cryptParams['padding'] = OPENSSL_PKCS1_OAEP_PADDING;
-                $this->cryptParams['method'] = 'http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p';
-                $this->cryptParams['hash'] = NULL;
-                if (is_array($params) && ! empty($params['type'])) {
-                    if ($params['type'] == 'public' || $params['type'] == 'private') {
-                        $this->cryptParams['type'] = $params['type'];
-                        break;
-                    }
-                }
-                throw new Exception('Certificate "type" (private/public) must be passed via parameters');
-                return;
-            case (XMLSecurityKey::RSA_SHA1):
-                $this->cryptParams['library'] = 'openssl';
-                $this->cryptParams['method'] = 'http://www.w3.org/2000/09/xmldsig#rsa-sha1';
-                $this->cryptParams['padding'] = OPENSSL_PKCS1_PADDING;
-                if (is_array($params) && ! empty($params['type'])) {
-                    if ($params['type'] == 'public' || $params['type'] == 'private') {
-                        $this->cryptParams['type'] = $params['type'];
-                        break;
-                    }
-                }
-                throw new Exception('Certificate "type" (private/public) must be passed via parameters');
-                break;
-            case (XMLSecurityKey::RSA_SHA256):
-                $this->cryptParams['library'] = 'openssl';
-                $this->cryptParams['method'] = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256';
-                $this->cryptParams['padding'] = OPENSSL_PKCS1_PADDING;
-                $this->cryptParams['digest'] = 'SHA256';
-                if (is_array($params) && ! empty($params['type'])) {
-                    if ($params['type'] == 'public' || $params['type'] == 'private') {
-                        $this->cryptParams['type'] = $params['type'];
-                        break;
-                    }
-                }
-                throw new Exception('Certificate "type" (private/public) must be passed via parameters');
-                break;
-            case (XMLSecurityKey::RSA_SHA384):
-                $this->cryptParams['library'] = 'openssl';
-                $this->cryptParams['method'] = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384';
-                $this->cryptParams['padding'] = OPENSSL_PKCS1_PADDING;
-                $this->cryptParams['digest'] = 'SHA384';
-                if (is_array($params) && ! empty($params['type'])) {
-                    if ($params['type'] == 'public' || $params['type'] == 'private') {
-                        $this->cryptParams['type'] = $params['type'];
-                        break;
-                    }
-                }
-            case (XMLSecurityKey::RSA_SHA512):
-                $this->cryptParams['library'] = 'openssl';
-                $this->cryptParams['method'] = 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512';
-                $this->cryptParams['padding'] = OPENSSL_PKCS1_PADDING;
-                $this->cryptParams['digest'] = 'SHA512';
-                if (is_array($params) && ! empty($params['type'])) {
-                    if ($params['type'] == 'public' || $params['type'] == 'private') {
-                        $this->cryptParams['type'] = $params['type'];
-                        break;
-                    }
-                }
-            default:
-                throw new Exception('Invalid Key Type');
-                return;
-        }
-        $this->type = $type;
-    }
-
-    /**
-     * Retrieve the key size for the symmetric encryption algorithm..
-     *
-     * If the key size is unknown, or this isn't a symmetric encryption algorithm,
-     * NULL is returned.
-     *
-     * @return int|NULL  The number of bytes in the key.
-     */
-    public function getSymmetricKeySize() {
-        if (! isset($this->cryptParams['keysize'])) {
-            return NULL;
-        }
-        return $this->cryptParams['keysize'];
-    }
-      
-    public function generateSessionKey() {
-        if (!isset($this->cryptParams['keysize'])) {
-            throw new Exception('Unknown key size for type "' . $this->type . '".');
-        }
-        $keysize = $this->cryptParams['keysize'];
-        
-        if (function_exists('openssl_random_pseudo_bytes')) {
-            /* We have PHP >= 5.3 - use openssl to generate session key. */
-            $key = openssl_random_pseudo_bytes($keysize);
-        } else {
-            /* Generating random key using iv generation routines */
-            $key = mcrypt_create_iv($keysize, MCRYPT_RAND);
-        }
-        
-        if ($this->type === XMLSecurityKey::TRIPLEDES_CBC) {
-            /* Make sure that the generated key has the proper parity bits set.
-             * Mcrypt doesn't care about the parity bits, but others may care.
-            */
-            for ($i = 0; $i < strlen($key); $i++) {
-                $byte = ord($key[$i]) & 0xfe;
-                $parity = 1;
-                for ($j = 1; $j < 8; $j++) {
-                    $parity ^= ($byte >> $j) & 1;
-                }
-                $byte |= $parity;
-                $key[$i] = chr($byte);
-            }
-        }
-        
-        $this->key = $key;
-        return $key;
-    }
-
-    public static function getRawThumbprint($cert) {
-
-        $arCert = explode("\n", $cert);
-        $data = '';
-        $inData = FALSE;
-
-        foreach ($arCert AS $curData) {
-            if (! $inData) {
-                if (strncmp($curData, '-----BEGIN CERTIFICATE', 22) == 0) {
-                    $inData = TRUE;
-                }
-            } else {
-                if (strncmp($curData, '-----END CERTIFICATE', 20) == 0) {
-                    $inData = FALSE;
-                    break;
-                }
-                $data .= trim($curData);
-            }
-        }
-
-        if (! empty($data)) {
-            return strtolower(sha1(base64_decode($data)));
-        }
-
-        return NULL;
-    }
-
-    public function loadKey($key, $isFile=FALSE, $isCert = FALSE) {
-        if ($isFile) {
-            $this->key = file_get_contents($key);
-        } else {
-            $this->key = $key;
-        }
-        if ($isCert) {
-            $this->key = openssl_x509_read($this->key);
-            openssl_x509_export($this->key, $str_cert);
-            $this->x509Certificate = $str_cert;
-            $this->key = $str_cert;
-        } else {
-            $this->x509Certificate = NULL;
-        }
-        if ($this->cryptParams['library'] == 'openssl') {
-            if ($this->cryptParams['type'] == 'public') {
-                if ($isCert) {
-                    /* Load the thumbprint if this is an X509 certificate. */
-                    $this->X509Thumbprint = self::getRawThumbprint($this->key);
-                }
-                $this->key = openssl_get_publickey($this->key);
-            } else {
-                $this->key = openssl_get_privatekey($this->key, $this->passphrase);
-            }
-        } else if ($this->cryptParams['cipher'] == MCRYPT_RIJNDAEL_128) {
-            /* Check key length */
-            switch ($this->type) {
-                case (XMLSecurityKey::AES256_CBC):
-                    if (strlen($this->key) < 25) {
-                        throw new Exception('Key must contain at least 25 characters for this cipher');
-                    }
-                    break;
-                case (XMLSecurityKey::AES192_CBC):
-                    if (strlen($this->key) < 17) {
-                        throw new Exception('Key must contain at least 17 characters for this cipher');
-                    }
-                    break;
-            }
-        }
-    }
-
-    private function encryptMcrypt($data) {
-        $td = mcrypt_module_open($this->cryptParams['cipher'], '', $this->cryptParams['mode'], '');
-        $this->iv = mcrypt_create_iv (mcrypt_enc_get_iv_size($td), MCRYPT_RAND);
-        mcrypt_generic_init($td, $this->key, $this->iv);
-        if ($this->cryptParams['mode'] == MCRYPT_MODE_CBC) {
-            $bs = mcrypt_enc_get_block_size($td);
-            for ($datalen0=$datalen=strlen($data); (($datalen%$bs)!=($bs-1)); $datalen++)
-                $data.=chr(rand(1, 127));
-            $data.=chr($datalen-$datalen0+1);
-        }
-        $encrypted_data = $this->iv.mcrypt_generic($td, $data);
-        mcrypt_generic_deinit($td);
-        mcrypt_module_close($td);
-        return $encrypted_data;
-    }
-
-    private function decryptMcrypt($data) {
-        $td = mcrypt_module_open($this->cryptParams['cipher'], '', $this->cryptParams['mode'], '');
-        $iv_length = mcrypt_enc_get_iv_size($td);
-
-        $this->iv = substr($data, 0, $iv_length);
-        $data = substr($data, $iv_length);
-
-        mcrypt_generic_init($td, $this->key, $this->iv);
-        $decrypted_data = mdecrypt_generic($td, $data);
-        mcrypt_generic_deinit($td);
-        mcrypt_module_close($td);
-        if ($this->cryptParams['mode'] == MCRYPT_MODE_CBC) {
-            $dataLen = strlen($decrypted_data);
-            $paddingLength = substr($decrypted_data, $dataLen - 1, 1);
-            $decrypted_data = substr($decrypted_data, 0, $dataLen - ord($paddingLength));
-        }
-        return $decrypted_data;
-    }
-
-    private function encryptOpenSSL($data) {
-        if ($this->cryptParams['type'] == 'public') {
-            if (! openssl_public_encrypt($data, $encrypted_data, $this->key, $this->cryptParams['padding'])) {
-                throw new Exception('Failure encrypting Data');
-                return;
-            }
-        } else {
-            if (! openssl_private_encrypt($data, $encrypted_data, $this->key, $this->cryptParams['padding'])) {
-                throw new Exception('Failure encrypting Data');
-                return;
-            }
-        }
-        return $encrypted_data;
-    }
-
-    private function decryptOpenSSL($data) {
-        if ($this->cryptParams['type'] == 'public') {
-            if (! openssl_public_decrypt($data, $decrypted, $this->key, $this->cryptParams['padding'])) {
-                throw new Exception('Failure decrypting Data');
-                return;
-            }
-        } else {
-            if (! openssl_private_decrypt($data, $decrypted, $this->key, $this->cryptParams['padding'])) {
-                throw new Exception('Failure decrypting Data');
-                return;
-            }
-        }
-        return $decrypted;
-    }
-
-    private function signOpenSSL($data) {
-	    $algo = OPENSSL_ALGO_SHA1;
-	    if (! empty($this->cryptParams['digest'])) {
-	        $algo = $this->cryptParams['digest'];
-	    }
-        if (! openssl_sign ($data, $signature, $this->key, $algo)) {
-            throw new Exception('Failure Signing Data: ' . openssl_error_string() . ' - ' . $algo);
-            return;
-        }
-        return $signature;
-    }
-
-    private function verifyOpenSSL($data, $signature) {
-	    $algo = OPENSSL_ALGO_SHA1;
-	    if (! empty($this->cryptParams['digest'])) {
-	        $algo = $this->cryptParams['digest'];
-	    }
-        return openssl_verify ($data, $signature, $this->key, $algo);
-    }
-
-    public function encryptData($data) {
-        switch ($this->cryptParams['library']) {
-            case 'mcrypt':
-                return $this->encryptMcrypt($data);
-                break;
-            case 'openssl':
-                return $this->encryptOpenSSL($data);
-                break;
-        }
-    }
-
-    public function decryptData($data) {
-        switch ($this->cryptParams['library']) {
-            case 'mcrypt':
-                return $this->decryptMcrypt($data);
-                break;
-            case 'openssl':
-                return $this->decryptOpenSSL($data);
-                break;
-        }
-    }
-
-    public function signData($data) {
-        switch ($this->cryptParams['library']) {
-            case 'openssl':
-                return $this->signOpenSSL($data);
-                break;
-        }
-    }
-
-    public function verifySignature($data, $signature) {
-        switch ($this->cryptParams['library']) {
-            case 'openssl':
-                return $this->verifyOpenSSL($data, $signature);
-                break;
-        }
-    }
-
-    public function getAlgorith() {
-        return $this->cryptParams['method'];
-    }
-
-    static function makeAsnSegment($type, $string) {
-        switch ($type){
-            case 0x02:
-                if (ord($string) > 0x7f)
-                    $string = chr(0).$string;
-                break;
-            case 0x03:
-                $string = chr(0).$string;
-                break;
-        }
-
-        $length = strlen($string);
-
-        if ($length < 128){
-           $output = sprintf("%c%c%s", $type, $length, $string);
-        } else if ($length < 0x0100){
-           $output = sprintf("%c%c%c%s", $type, 0x81, $length, $string);
-        } else if ($length < 0x010000) {
-           $output = sprintf("%c%c%c%c%s", $type, 0x82, $length/0x0100, $length%0x0100, $string);
-        } else {
-            $output = NULL;
-        }
-        return($output);
-    }
-
-    /* Modulus and Exponent must already be base64 decoded */
-    static function convertRSA($modulus, $exponent) {
-        /* make an ASN publicKeyInfo */
-        $exponentEncoding = XMLSecurityKey::makeAsnSegment(0x02, $exponent);
-        $modulusEncoding = XMLSecurityKey::makeAsnSegment(0x02, $modulus);
-        $sequenceEncoding = XMLSecurityKey:: makeAsnSegment(0x30, $modulusEncoding.$exponentEncoding);
-        $bitstringEncoding = XMLSecurityKey::makeAsnSegment(0x03, $sequenceEncoding);
-        $rsaAlgorithmIdentifier = pack("H*", "300D06092A864886F70D0101010500");
-        $publicKeyInfo = XMLSecurityKey::makeAsnSegment (0x30, $rsaAlgorithmIdentifier.$bitstringEncoding);
-
-        /* encode the publicKeyInfo in base64 and add PEM brackets */
-        $publicKeyInfoBase64 = base64_encode($publicKeyInfo);
-        $encoding = "-----BEGIN PUBLIC KEY-----\n";
-        $offset = 0;
-        while ($segment=substr($publicKeyInfoBase64, $offset, 64)){
-           $encoding = $encoding.$segment."\n";
-           $offset += 64;
-        }
-        return $encoding."-----END PUBLIC KEY-----\n";
-    }
-
-    public function serializeKey($parent) {
-
-    }
-    
-
-
-    /**
-     * Retrieve the X509 certificate this key represents.
-     *
-     * Will return the X509 certificate in PEM-format if this key represents
-     * an X509 certificate.
-     *
-     * @return  The X509 certificate or NULL if this key doesn't represent an X509-certificate.
-     */
-    public function getX509Certificate() {
-        return $this->x509Certificate;
-    }
-
-    /* Get the thumbprint of this X509 certificate.
-     *
-     * Returns:
-     *  The thumbprint as a lowercase 40-character hexadecimal number, or NULL
-     *  if this isn't a X509 certificate.
-     */
-    public function getX509Thumbprint() {
-        return $this->X509Thumbprint;
-    }
-
-
-    /**
-     * Create key from an EncryptedKey-element.
-     *
-     * @param DOMElement $element  The EncryptedKey-element.
-     * @return XMLSecurityKey  The new key.
-     */
-    public static function fromEncryptedKeyElement(DOMElement $element) {
-
-        $objenc = new XMLSecEnc();
-        $objenc->setNode($element);
-        if (! $objKey = $objenc->locateKey()) {
-            throw new Exception("Unable to locate algorithm for this Encrypted Key");
-        }
-        $objKey->isEncrypted = TRUE;
-        $objKey->encryptedCtx = $objenc;
-        XMLSecEnc::staticLocateKeyInfo($objKey, $element);
-        return $objKey;
-    }
-
-}
-
-class XMLSecurityDSig {
-    const XMLDSIGNS = 'http://www.w3.org/2000/09/xmldsig#';
-    const SHA1 = 'http://www.w3.org/2000/09/xmldsig#sha1';
-    const SHA256 = 'http://www.w3.org/2001/04/xmlenc#sha256';
-    const SHA384 = 'http://www.w3.org/2001/04/xmldsig-more#sha384';
-    const SHA512 = 'http://www.w3.org/2001/04/xmlenc#sha512';
-    const RIPEMD160 = 'http://www.w3.org/2001/04/xmlenc#ripemd160';
-
-    const C14N = 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315';
-    const C14N_COMMENTS = 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments';
-    const EXC_C14N = 'http://www.w3.org/2001/10/xml-exc-c14n#';
-    const EXC_C14N_COMMENTS = 'http://www.w3.org/2001/10/xml-exc-c14n#WithComments';
-
-    const template = '<ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
-  <ds:SignedInfo>
-    <ds:SignatureMethod />
-  </ds:SignedInfo>
-</ds:Signature>';
-
-    public $sigNode = NULL;
-    public $idKeys = array();
-    public $idNS = array();
-    private $signedInfo = NULL;
-    private $xPathCtx = NULL;
-    private $canonicalMethod = NULL;
-    private $prefix = 'ds';
-    private $searchpfx = 'secdsig';
-
-    /* This variable contains an associative array of validated nodes. */
-    private $validatedNodes = NULL;
-
-    public function __construct() {
-        $sigdoc = new DOMDocument();
-        $sigdoc->loadXML(XMLSecurityDSig::template);
-        $this->sigNode = $sigdoc->documentElement;
-    }
-
-    private function resetXPathObj() {
-        $this->xPathCtx = NULL;
-    }
-	
-    private function getXPathObj() {
-        if (empty($this->xPathCtx) && ! empty($this->sigNode)) {
-            $xpath = new DOMXPath($this->sigNode->ownerDocument);
-            $xpath->registerNamespace('secdsig', XMLSecurityDSig::XMLDSIGNS);
-            $this->xPathCtx = $xpath;
-        }
-        return $this->xPathCtx;
-    }
-
-    static function generate_GUID($prefix='pfx') {
-        $uuid = md5(uniqid(rand(), true));
-        $guid =  $prefix.substr($uuid,0,8)."-".
-                substr($uuid,8,4)."-".
-                substr($uuid,12,4)."-".
-                substr($uuid,16,4)."-".
-                substr($uuid,20,12);
-        return $guid;
-    }
-
-    public function locateSignature($objDoc) {
-        if ($objDoc instanceof DOMDocument) {
-            $doc = $objDoc;
-        } else {
-            $doc = $objDoc->ownerDocument;
-        }
-        if ($doc) {
-            $xpath = new DOMXPath($doc);
-            $xpath->registerNamespace('secdsig', XMLSecurityDSig::XMLDSIGNS);
-            $query = ".//secdsig:Signature";
-            $nodeset = $xpath->query($query, $objDoc);
-            $this->sigNode = $nodeset->item(0);
-            return $this->sigNode;
-        }
-        return NULL;
-    }
-
-    public function createNewSignNode($name, $value=NULL) {
-        $doc = $this->sigNode->ownerDocument;
-        if (! is_null($value)) {
-            $node = $doc->createElementNS(XMLSecurityDSig::XMLDSIGNS, $this->prefix.':'.$name, $value);
-        } else {
-            $node = $doc->createElementNS(XMLSecurityDSig::XMLDSIGNS, $this->prefix.':'.$name);
-        }
-        return $node;
-    }
-
-    public function setCanonicalMethod($method) {
-        switch ($method) {
-            case 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315':
-            case 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments':
-            case 'http://www.w3.org/2001/10/xml-exc-c14n#':
-            case 'http://www.w3.org/2001/10/xml-exc-c14n#WithComments':
-                $this->canonicalMethod = $method;
-                break;
-            default:
-                throw new Exception('Invalid Canonical Method');
-        }
-        if ($xpath = $this->getXPathObj()) {
-            $query = './'.$this->searchpfx.':SignedInfo';
-            $nodeset = $xpath->query($query, $this->sigNode);
-            if ($sinfo = $nodeset->item(0)) {
-                $query = './'.$this->searchpfx.'CanonicalizationMethod';
-                $nodeset = $xpath->query($query, $sinfo);
-                if (! ($canonNode = $nodeset->item(0))) {
-                    $canonNode = $this->createNewSignNode('CanonicalizationMethod');
-                    $sinfo->insertBefore($canonNode, $sinfo->firstChild);
-                }
-                $canonNode->setAttribute('Algorithm', $this->canonicalMethod);
-            }
-        }
-    }
-
-    private function canonicalizeData($node, $canonicalmethod, $arXPath=NULL, $prefixList=NULL) {
-        $exclusive = FALSE;
-        $withComments = FALSE;
-        switch ($canonicalmethod) {
-            case 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315':
-                $exclusive = FALSE;
-                $withComments = FALSE;
-                break;
-            case 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments':
-                $withComments = TRUE;
-                break;
-            case 'http://www.w3.org/2001/10/xml-exc-c14n#':
-                $exclusive = TRUE;
-                break;
-            case 'http://www.w3.org/2001/10/xml-exc-c14n#WithComments':
-                $exclusive = TRUE;
-                $withComments = TRUE;
-                break;
-        }
-/* Support PHP versions < 5.2 not containing C14N methods in DOM extension */
-        $php_version = explode('.', PHP_VERSION);
-        if (($php_version[0] < 5) || ($php_version[0] == 5 && $php_version[1] < 2) ) {
-            if (! is_null($arXPath)) {
-                throw new Exception("PHP 5.2.0 or higher is required to perform XPath Transformations");
-            }
-            return C14NGeneral($node, $exclusive, $withComments);
-        }
-        $element = $node;
-        if ($node instanceof DOMNode && $node->ownerDocument !== NULL && $node->isSameNode($node->ownerDocument->documentElement)) {
-            $element = $node->ownerDocument;
-        }
-        return $element->C14N($exclusive, $withComments, $arXPath, $prefixList);
-    }
-
-    public function canonicalizeSignedInfo() {
-
-        $doc = $this->sigNode->ownerDocument;
-        $canonicalmethod = NULL;
-        if ($doc) {
-            $xpath = $this->getXPathObj();
-            $query = "./secdsig:SignedInfo";
-            $nodeset = $xpath->query($query, $this->sigNode);
-            if ($signInfoNode = $nodeset->item(0)) {
-                $query = "./secdsig:CanonicalizationMethod";
-                $nodeset = $xpath->query($query, $signInfoNode);
-                if ($canonNode = $nodeset->item(0)) {
-                    $canonicalmethod = $canonNode->getAttribute('Algorithm');
-                }
-                $this->signedInfo = $this->canonicalizeData($signInfoNode, $canonicalmethod);
-                return $this->signedInfo;
-            }
-        }
-        return NULL;
-    }
-
-    public function calculateDigest ($digestAlgorithm, $data) {
-        switch ($digestAlgorithm) {
-            case XMLSecurityDSig::SHA1:
-                $alg = 'sha1';
-                break;
-            case XMLSecurityDSig::SHA256:
-                $alg = 'sha256';
-                break;
-            case XMLSecurityDSig::SHA384:
-                $alg = 'sha384';
-                break;
-            case XMLSecurityDSig::SHA512:
-                $alg = 'sha512';
-                break;
-            case XMLSecurityDSig::RIPEMD160:
-                $alg = 'ripemd160';
-                break;
-            default:
-                throw new Exception("Cannot validate digest: Unsupported Algorith <$digestAlgorithm>");
-        }
-        if (function_exists('hash')) {
-            return base64_encode(hash($alg, $data, TRUE));
-        } elseif (function_exists('mhash')) {
-            $alg = "MHASH_" . strtoupper($alg);
-            return base64_encode(mhash(constant($alg), $data));
-        } elseif ($alg === 'sha1') {
-            return base64_encode(sha1($data, TRUE));
-        } else {
-            throw new Exception('xmlseclibs is unable to calculate a digest. Maybe you need the mhash library?');
-        }
-    }
-
-    public function validateDigest($refNode, $data) {
-        $xpath = new DOMXPath($refNode->ownerDocument);
-        $xpath->registerNamespace('secdsig', XMLSecurityDSig::XMLDSIGNS);
-        $query = 'string(./secdsig:DigestMethod/@Algorithm)';
-        $digestAlgorithm = $xpath->evaluate($query, $refNode);
-        $digValue = $this->calculateDigest($digestAlgorithm, $data);
-        $query = 'string(./secdsig:DigestValue)';
-        $digestValue = $xpath->evaluate($query, $refNode);
-        return ($digValue == $digestValue);
-    }
-
-    public function processTransforms($refNode, $objData, $includeCommentNodes = TRUE) {
-        $data = $objData;
-        $xpath = new DOMXPath($refNode->ownerDocument);
-        $xpath->registerNamespace('secdsig', XMLSecurityDSig::XMLDSIGNS);
-        $query = './secdsig:Transforms/secdsig:Transform';
-        $nodelist = $xpath->query($query, $refNode);
-        $canonicalMethod = 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315';
-        $arXPath = NULL;
-        $prefixList = NULL;
-        foreach ($nodelist AS $transform) {
-            $algorithm = $transform->getAttribute("Algorithm");
-            switch ($algorithm) {
-                case 'http://www.w3.org/2001/10/xml-exc-c14n#':
-                case 'http://www.w3.org/2001/10/xml-exc-c14n#WithComments':
-
-                    if(!$includeCommentNodes) {
-                        /* We remove comment nodes by forcing it to use a canonicalization
-                         * without comments.
-                         */
-                        $canonicalMethod = 'http://www.w3.org/2001/10/xml-exc-c14n#';
-                    } else {
-                        $canonicalMethod = $algorithm;
-                    }
-
-                    $node = $transform->firstChild;
-                    while ($node) {
-                        if ($node->localName == 'InclusiveNamespaces') {
-                            if ($pfx = $node->getAttribute('PrefixList')) {
-                                $arpfx = array();
-                                $pfxlist = explode(" ", $pfx);
-                                foreach ($pfxlist AS $pfx) {
-                                    $val = trim($pfx);
-                                    if (! empty($val)) {
-                                        $arpfx[] = $val;
-                                    }
-                                }
-                                if (count($arpfx) > 0) {
-                                    $prefixList = $arpfx;
-                                }
-                            }
-                            break;
-                        }
-                        $node = $node->nextSibling;
-                    }
-		    break;
-                case 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315':
-                case 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments':
-                    if(!$includeCommentNodes) {
-                        /* We remove comment nodes by forcing it to use a canonicalization
-                         * without comments.
-                         */
-                        $canonicalMethod = 'http://www.w3.org/TR/2001/REC-xml-c14n-20010315';
-                    } else {
-                        $canonicalMethod = $algorithm;
-                    }
-
-                    break;
-                case 'http://www.w3.org/TR/1999/REC-xpath-19991116':
-                    $node = $transform->firstChild;
-                    while ($node) {
-                        if ($node->localName == 'XPath') {
-                            $arXPath = array();
-                            $arXPath['query'] = '(.//. | .//@* | .//namespace::*)['.$node->nodeValue.']';
-                            $arXpath['namespaces'] = array();
-                            $nslist = $xpath->query('./namespace::*', $node);
-                            foreach ($nslist AS $nsnode) {
-                                if ($nsnode->localName != "xml") {
-                                    $arXPath['namespaces'][$nsnode->localName] = $nsnode->nodeValue;
-                                }
-                            }
-                            break;
-                        }
-                        $node = $node->nextSibling;
-                    }
-                    break;
-            }
-        }
-        if ($data instanceof DOMNode) {
-            $data = $this->canonicalizeData($objData, $canonicalMethod, $arXPath, $prefixList);
-        }
-        return $data;
-    }
-
-    public function processRefNode($refNode) {
-        $dataObject = NULL;
-
-        /*
-         * Depending on the URI, we may not want to include comments in the result
-         * See: http://www.w3.org/TR/xmldsig-core/#sec-ReferenceProcessingModel
-         */
-        $includeCommentNodes = TRUE;
-
-        if ($uri = $refNode->getAttribute("URI")) {
-            $arUrl = parse_url($uri);
-            if (empty($arUrl['path'])) {
-                if ($identifier = $arUrl['fragment']) {
-
-                    /* This reference identifies a node with the given id by using
-                     * a URI on the form "#identifier". This should not include comments.
-                     */
-                    $includeCommentNodes = FALSE;
-
-                    $xPath = new DOMXPath($refNode->ownerDocument);
-                    if ($this->idNS && is_array($this->idNS)) {
-                        foreach ($this->idNS AS $nspf=>$ns) {
-                            $xPath->registerNamespace($nspf, $ns);
-                        }
-                    }
-                    $iDlist = '@Id="'.$identifier.'"';
-                    if (is_array($this->idKeys)) {
-                        foreach ($this->idKeys AS $idKey) {
-                            $iDlist .= " or @$idKey='$identifier'";
-                        }
-                    }
-                    $query = '//*['.$iDlist.']';
-                    $dataObject = $xPath->query($query)->item(0);
-                } else {
-                    $dataObject = $refNode->ownerDocument;
-                }
-            } else {
-                $dataObject = file_get_contents($arUrl);
-            }
-        } else {
-            /* This reference identifies the root node with an empty URI. This should
-             * not include comments.
-             */
-            $includeCommentNodes = FALSE;
-
-            $dataObject = $refNode->ownerDocument;
-        }
-        $data = $this->processTransforms($refNode, $dataObject, $includeCommentNodes);
-        if (!$this->validateDigest($refNode, $data)) {
-            return FALSE;
-        }
-
-        if ($dataObject instanceof DOMNode) {
-            /* Add this node to the list of validated nodes. */
-            if(! empty($identifier)) {
-                $this->validatedNodes[$identifier] = $dataObject;
-            } else {
-                $this->validatedNodes[] = $dataObject;
-            }
-        }
-
-        return TRUE;
-    }
-
-    public function getRefNodeID($refNode) {
-        if ($uri = $refNode->getAttribute("URI")) {
-            $arUrl = parse_url($uri);
-            if (empty($arUrl['path'])) {
-                if ($identifier = $arUrl['fragment']) {
-                    return $identifier;
-                }
-            }
-        }
-        return null;
-    }
-
-    public function getRefIDs() {
-        $refids = array();
-        $doc = $this->sigNode->ownerDocument;
-
-        $xpath = $this->getXPathObj();
-        $query = "./secdsig:SignedInfo/secdsig:Reference";
-        $nodeset = $xpath->query($query, $this->sigNode);
-        if ($nodeset->length == 0) {
-            throw new Exception("Reference nodes not found");
-        }
-        foreach ($nodeset AS $refNode) {
-            $refids[] = $this->getRefNodeID($refNode);
-        }
-        return $refids;
-    }
-
-    public function validateReference() {
-        $doc = $this->sigNode->ownerDocument;
-        if (! $doc->isSameNode($this->sigNode)) {
-            $this->sigNode->parentNode->removeChild($this->sigNode);
-        }
-        $xpath = $this->getXPathObj();
-        $query = "./secdsig:SignedInfo/secdsig:Reference";
-        $nodeset = $xpath->query($query, $this->sigNode);
-        if ($nodeset->length == 0) {
-            throw new Exception("Reference nodes not found");
-        }
-        
-        /* Initialize/reset the list of validated nodes. */
-        $this->validatedNodes = array();
-        
-        foreach ($nodeset AS $refNode) {
-            if (! $this->processRefNode($refNode)) {
-                /* Clear the list of validated nodes. */
-                $this->validatedNodes = NULL;
-                throw new Exception("Reference validation failed");
-            }
-        }
-        return TRUE;
-    }
-
-    private function addRefInternal($sinfoNode, $node, $algorithm, $arTransforms=NULL, $options=NULL) {
-        $prefix = NULL;
-        $prefix_ns = NULL;
-        $id_name = 'Id';
-        $overwrite_id  = TRUE;
-        $force_uri = FALSE;
-
-        if (is_array($options)) {
-            $prefix = empty($options['prefix'])?NULL:$options['prefix'];
-            $prefix_ns = empty($options['prefix_ns'])?NULL:$options['prefix_ns'];
-            $id_name = empty($options['id_name'])?'Id':$options['id_name'];
-            $overwrite_id = !isset($options['overwrite'])?TRUE:(bool)$options['overwrite'];
-            $force_uri = !isset($options['force_uri'])?FALSE:(bool)$options['force_uri'];
-        }
-
-        $attname = $id_name;
-        if (! empty($prefix)) {
-            $attname = $prefix.':'.$attname;
-        }
-
-        $refNode = $this->createNewSignNode('Reference');
-        $sinfoNode->appendChild($refNode);
-
-        if (! $node instanceof DOMDocument) {
-            $uri = NULL;
-            if (! $overwrite_id) {
-                $uri = $node->getAttributeNS($prefix_ns, $id_name);
-            }
-            if (empty($uri)) {
-                $uri = XMLSecurityDSig::generate_GUID();
-                $node->setAttributeNS($prefix_ns, $attname, $uri);
-            }
-            $refNode->setAttribute("URI", '#'.$uri);
-        } elseif ($force_uri) {
-            $refNode->setAttribute("URI", '');
-        }
-
-        $transNodes = $this->createNewSignNode('Transforms');
-        $refNode->appendChild($transNodes);
-
-        if (is_array($arTransforms)) {
-            foreach ($arTransforms AS $transform) {
-                $transNode = $this->createNewSignNode('Transform');
-                $transNodes->appendChild($transNode);
-                if (is_array($transform) && 
-                    (! empty($transform['http://www.w3.org/TR/1999/REC-xpath-19991116'])) && 
-                    (! empty($transform['http://www.w3.org/TR/1999/REC-xpath-19991116']['query']))) {
-                    $transNode->setAttribute('Algorithm', 'http://www.w3.org/TR/1999/REC-xpath-19991116');
-                    $XPathNode = $this->createNewSignNode('XPath', $transform['http://www.w3.org/TR/1999/REC-xpath-19991116']['query']);
-                    $transNode->appendChild($XPathNode);
-                    if (! empty($transform['http://www.w3.org/TR/1999/REC-xpath-19991116']['namespaces'])) {
-                        foreach ($transform['http://www.w3.org/TR/1999/REC-xpath-19991116']['namespaces'] AS $prefix => $namespace) {
-                            $XPathNode->setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:$prefix", $namespace);
-                        }
-                    }
-                } else {
-                    $transNode->setAttribute('Algorithm', $transform);
-                }
-            }
-        } elseif (! empty($this->canonicalMethod)) {
-            $transNode = $this->createNewSignNode('Transform');
-            $transNodes->appendChild($transNode);
-            $transNode->setAttribute('Algorithm', $this->canonicalMethod);
-        }
-
-        $canonicalData = $this->processTransforms($refNode, $node);
-        $digValue = $this->calculateDigest($algorithm, $canonicalData);
-
-        $digestMethod = $this->createNewSignNode('DigestMethod');
-        $refNode->appendChild($digestMethod);
-        $digestMethod->setAttribute('Algorithm', $algorithm);
-
-        $digestValue = $this->createNewSignNode('DigestValue', $digValue);
-        $refNode->appendChild($digestValue);
-    }
-
-    public function addReference($node, $algorithm, $arTransforms=NULL, $options=NULL) {
-        if ($xpath = $this->getXPathObj()) {
-            $query = "./secdsig:SignedInfo";
-            $nodeset = $xpath->query($query, $this->sigNode);
-            if ($sInfo = $nodeset->item(0)) {
-                $this->addRefInternal($sInfo, $node, $algorithm, $arTransforms, $options);
-            }
-        }
-    }
-
-    public function addReferenceList($arNodes, $algorithm, $arTransforms=NULL, $options=NULL) {
-        if ($xpath = $this->getXPathObj()) {
-            $query = "./secdsig:SignedInfo";
-            $nodeset = $xpath->query($query, $this->sigNode);
-            if ($sInfo = $nodeset->item(0)) {
-                foreach ($arNodes AS $node) {
-                    $this->addRefInternal($sInfo, $node, $algorithm, $arTransforms, $options);
-                }
-            }
-        }
-    }
-
-   public function addObject($data, $mimetype=NULL, $encoding=NULL) {
-      $objNode = $this->createNewSignNode('Object');
-      $this->sigNode->appendChild($objNode);
-      if (! empty($mimetype)) {
-         $objNode->setAtribute('MimeType', $mimetype);
-      }
-      if (! empty($encoding)) {
-         $objNode->setAttribute('Encoding', $encoding);
-      }
-
-      if ($data instanceof DOMElement) {
-         $newData = $this->sigNode->ownerDocument->importNode($data, TRUE);
-      } else {
-         $newData = $this->sigNode->ownerDocument->createTextNode($data);
-      }
-      $objNode->appendChild($newData);
-
-      return $objNode;
-   }
-
-    public function locateKey($node=NULL) {
-        if (empty($node)) {
-            $node = $this->sigNode;
-        }
-        if (! $node instanceof DOMNode) {
-            return NULL;
-        }
-        if ($doc = $node->ownerDocument) {
-            $xpath = new DOMXPath($doc);
-            $xpath->registerNamespace('secdsig', XMLSecurityDSig::XMLDSIGNS);
-            $query = "string(./secdsig:SignedInfo/secdsig:SignatureMethod/@Algorithm)";
-            $algorithm = $xpath->evaluate($query, $node);
-            if ($algorithm) {
-                try {
-                    $objKey = new XMLSecurityKey($algorithm, array('type'=>'public'));
-                } catch (Exception $e) {
-                    return NULL;
-                }
-                return $objKey;
-            }
-        }
-        return NULL;
-    }
-
-    public function verify($objKey) {
-        $doc = $this->sigNode->ownerDocument;
-        $xpath = new DOMXPath($doc);
-        $xpath->registerNamespace('secdsig', XMLSecurityDSig::XMLDSIGNS);
-        $query = "string(./secdsig:SignatureValue)";
-        $sigValue = $xpath->evaluate($query, $this->sigNode);
-        if (empty($sigValue)) {
-            throw new Exception("Unable to locate SignatureValue");
-        }
-        return $objKey->verifySignature($this->signedInfo, base64_decode($sigValue));
-    }
-
-    public function signData($objKey, $data) {
-        return $objKey->signData($data);
-    }
-
-    public function sign($objKey, $appendToNode = NULL) {
-        // If we have a parent node append it now so C14N properly works
-        if ($appendToNode != NULL) {
-            $this->resetXPathObj();
-            $this->appendSignature($appendToNode);
-            $this->sigNode = $appendToNode->lastChild;
-        }
-        if ($xpath = $this->getXPathObj()) {
-            $query = "./secdsig:SignedInfo";
-            $nodeset = $xpath->query($query, $this->sigNode);
-            if ($sInfo = $nodeset->item(0)) {
-                $query = "./secdsig:SignatureMethod";
-                $nodeset = $xpath->query($query, $sInfo);
-                $sMethod = $nodeset->item(0);
-                $sMethod->setAttribute('Algorithm', $objKey->type);
-                $data = $this->canonicalizeData($sInfo, $this->canonicalMethod);
-                $sigValue = base64_encode($this->signData($objKey, $data));
-                $sigValueNode = $this->createNewSignNode('SignatureValue', $sigValue);
-                if ($infoSibling = $sInfo->nextSibling) {
-                    $infoSibling->parentNode->insertBefore($sigValueNode, $infoSibling);
-                } else {
-                    $this->sigNode->appendChild($sigValueNode);
-                }
-            }
-        }
-    }
-
-    public function appendCert() {
-
-    }
-
-    public function appendKey($objKey, $parent=NULL) {
-        $objKey->serializeKey($parent);
-    }
-
-
-    /**
-     * This function inserts the signature element.
-     *
-     * The signature element will be appended to the element, unless $beforeNode is specified. If $beforeNode
-     * is specified, the signature element will be inserted as the last element before $beforeNode.
-     *
-     * @param $node  The node the signature element should be inserted into.
-     * @param $beforeNode  The node the signature element should be located before.
-     * 
-     * @return DOMNode The signature element node
-     */
-    public function insertSignature($node, $beforeNode = NULL) {
-
-        $document = $node->ownerDocument;
-        $signatureElement = $document->importNode($this->sigNode, TRUE);
-
-        if($beforeNode == NULL) {
-            return $node->insertBefore($signatureElement);
-        } else {
-            return $node->insertBefore($signatureElement, $beforeNode);
-        }
-    }
-
-    public function appendSignature($parentNode, $insertBefore = FALSE) {
-        $beforeNode = $insertBefore ? $parentNode->firstChild : NULL;
-        return $this->insertSignature($parentNode, $beforeNode);
-    }
-
-    static function get509XCert($cert, $isPEMFormat=TRUE) {
-        $certs = XMLSecurityDSig::staticGet509XCerts($cert, $isPEMFormat);
-        if (! empty($certs)) {
-            return $certs[0];
-        }
-        return '';
-    }
-
-    static function staticGet509XCerts($certs, $isPEMFormat=TRUE) {
-        if ($isPEMFormat) {
-            $data = '';
-            $certlist = array();
-            $arCert = explode("\n", $certs);
-            $inData = FALSE;
-            foreach ($arCert AS $curData) {
-                if (! $inData) {
-                    if (strncmp($curData, '-----BEGIN CERTIFICATE', 22) == 0) {
-                        $inData = TRUE;
-                    }
-                } else {
-                    if (strncmp($curData, '-----END CERTIFICATE', 20) == 0) {
-                        $inData = FALSE;
-                        $certlist[] = $data;
-                        $data = '';
-                        continue;
-                    }
-                    $data .= trim($curData);
-                }
-            }
-            return $certlist;
-        } else {
-            return array($certs);
-        }
-    }
-
-    static function staticAdd509Cert($parentRef, $cert, $isPEMFormat=TRUE, $isURL=False, $xpath=NULL, $options=NULL) {
-        if ($isURL) {
-            $cert = file_get_contents($cert);
-        }
-        if (! $parentRef instanceof DOMElement) {
-            throw new Exception('Invalid parent Node parameter');
-        }
-        $baseDoc = $parentRef->ownerDocument;
-        
-        if (empty($xpath)) {
-            $xpath = new DOMXPath($parentRef->ownerDocument);
-            $xpath->registerNamespace('secdsig', XMLSecurityDSig::XMLDSIGNS);
-        }
-        
-        $query = "./secdsig:KeyInfo";
-        $nodeset = $xpath->query($query, $parentRef);
-        $keyInfo = $nodeset->item(0);
-        if (! $keyInfo) {
-            $inserted = FALSE;
-            $keyInfo = $baseDoc->createElementNS(XMLSecurityDSig::XMLDSIGNS, 'ds:KeyInfo');
-        
-            $query = "./secdsig:Object";
-            $nodeset = $xpath->query($query, $parentRef);
-            if ($sObject = $nodeset->item(0)) {
-                $sObject->parentNode->insertBefore($keyInfo, $sObject);
-                $inserted = TRUE;
-            }
-        
-            if (! $inserted) {
-                $parentRef->appendChild($keyInfo);
-            }
-        }
-        
-        // Add all certs if there are more than one
-        $certs = XMLSecurityDSig::staticGet509XCerts($cert, $isPEMFormat);
-
-        // Attach X509 data node
-        $x509DataNode = $baseDoc->createElementNS(XMLSecurityDSig::XMLDSIGNS, 'ds:X509Data');
-        $keyInfo->appendChild($x509DataNode);
-
-        $issuerSerial = FALSE;
-        $subjectName = FALSE;
-        if (is_array($options)) {
-            if (! empty($options['issuerSerial'])) {
-                $issuerSerial = TRUE;
-            }
-        }
-        
-        // Attach all certificate nodes and any additional data
-        foreach ($certs as $X509Cert){
-            if ($issuerSerial) {
-                if ($certData = openssl_x509_parse("-----BEGIN CERTIFICATE-----\n".chunk_split($X509Cert, 64, "\n")."-----END CERTIFICATE-----\n")) {
-                    if ($issuerSerial && ! empty($certData['issuer']) && ! empty($certData['serialNumber'])) {
-                        if (is_array($certData['issuer'])) {
-                            $parts = array();
-                            foreach ($certData['issuer'] AS $key => $value) {
-                                array_unshift($parts, "$key=$value" . $issuer);
-                            }
-                            $issuerName = implode(',', $parts);
-                        } else {
-                            $issuerName = $certData['issuer'];
-                        }
-                        
-                        $x509IssuerNode = $baseDoc->createElementNS(XMLSecurityDSig::XMLDSIGNS, 'ds:X509IssuerSerial');
-                        $x509DataNode->appendChild($x509IssuerNode);
-                        
-                        $x509Node = $baseDoc->createElementNS(XMLSecurityDSig::XMLDSIGNS, 'ds:X509IssuerName', $issuerName);
-                        $x509IssuerNode->appendChild($x509Node);
-                        $x509Node = $baseDoc->createElementNS(XMLSecurityDSig::XMLDSIGNS, 'ds:X509SerialNumber', $certData['serialNumber']);
-                        $x509IssuerNode->appendChild($x509Node);
-                    }
-                }
-                
-            }
-            $x509CertNode = $baseDoc->createElementNS(XMLSecurityDSig::XMLDSIGNS, 'ds:X509Certificate', $X509Cert);
-            $x509DataNode->appendChild($x509CertNode);
-        }
-    }
-
-    public function add509Cert($cert, $isPEMFormat=TRUE, $isURL=False, $options=NULL) {
-         if ($xpath = $this->getXPathObj()) {
-            self::staticAdd509Cert($this->sigNode, $cert, $isPEMFormat, $isURL, $xpath, $options);
-         }
-    }
-    
-    /* This function retrieves an associative array of the validated nodes.
-     *
-     * The array will contain the id of the referenced node as the key and the node itself
-     * as the value.
-     *
-     * Returns:
-     *  An associative array of validated nodes or NULL if no nodes have been validated.
-     */
-    public function getValidatedNodes() {
-        return $this->validatedNodes;
-    }
-}
-
-class XMLSecEnc {
-    const template = "<xenc:EncryptedData xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'>
-   <xenc:CipherData>
-      <xenc:CipherValue></xenc:CipherValue>
-   </xenc:CipherData>
-</xenc:EncryptedData>";
-
-    const Element = 'http://www.w3.org/2001/04/xmlenc#Element';
-    const Content = 'http://www.w3.org/2001/04/xmlenc#Content';
-    const URI = 3;
-    const XMLENCNS = 'http://www.w3.org/2001/04/xmlenc#';
-
-    private $encdoc = NULL;
-    private $rawNode = NULL;
-    public $type = NULL;
-    public $encKey = NULL;
-    private $references = array();
-
-    public function __construct() {
-        $this->_resetTemplate();
-    }
-
-    private function _resetTemplate(){
-        $this->encdoc = new DOMDocument();
-        $this->encdoc->loadXML(XMLSecEnc::template);
-    }
-
-    public function addReference($name, $node, $type) {
-	    if (! $node instanceOf DOMNode) {
-	        throw new Exception('$node is not of type DOMNode');
-	    }
-        $curencdoc = $this->encdoc;
-        $this->_resetTemplate();
-        $encdoc = $this->encdoc;
-        $this->encdoc = $curencdoc;
-        $refuri = XMLSecurityDSig::generate_GUID();
-        $element = $encdoc->documentElement;
-        $element->setAttribute("Id", $refuri);
-	    $this->references[$name] = array("node" => $node, "type" => $type, "encnode" => $encdoc, "refuri" => $refuri);
-    }
-
-    public function setNode($node) {
-        $this->rawNode = $node;
-    }
-
-    /**
-     * Encrypt the selected node with the given key.
-     *
-     * @param XMLSecurityKey $objKey  The encryption key and algorithm.
-     * @param bool $replace  Whether the encrypted node should be replaced in the original tree. Default is TRUE.
-     * @return DOMElement  The <xenc:EncryptedData>-element.
-     */
-    public function encryptNode($objKey, $replace=TRUE) {
-        $data = '';
-        if (empty($this->rawNode)) {
-            throw new Exception('Node to encrypt has not been set');
-        }
-        if (! $objKey instanceof XMLSecurityKey) {
-            throw new Exception('Invalid Key');
-        }
-        $doc = $this->rawNode->ownerDocument;
-        $xPath = new DOMXPath($this->encdoc);
-        $objList = $xPath->query('/xenc:EncryptedData/xenc:CipherData/xenc:CipherValue');
-        $cipherValue = $objList->item(0);
-        if ($cipherValue == NULL) {
-            throw new Exception('Error locating CipherValue element within template');
-        }
-        switch ($this->type) {
-            case (XMLSecEnc::Element):
-                $data = $doc->saveXML($this->rawNode);
-                $this->encdoc->documentElement->setAttribute('Type', XMLSecEnc::Element);
-                break;
-            case (XMLSecEnc::Content):
-                $children = $this->rawNode->childNodes;
-                foreach ($children AS $child) {
-                    $data .= $doc->saveXML($child);
-                }
-                $this->encdoc->documentElement->setAttribute('Type', XMLSecEnc::Content);
-                break;
-            default:
-                throw new Exception('Type is currently not supported');
-                return;
-        }
-
-        $encMethod = $this->encdoc->documentElement->appendChild($this->encdoc->createElementNS(XMLSecEnc::XMLENCNS, 'xenc:EncryptionMethod'));
-        $encMethod->setAttribute('Algorithm', $objKey->getAlgorith());
-        $cipherValue->parentNode->parentNode->insertBefore($encMethod, $cipherValue->parentNode->parentNode->firstChild);
-
-        $strEncrypt = base64_encode($objKey->encryptData($data));
-        $value = $this->encdoc->createTextNode($strEncrypt);
-        $cipherValue->appendChild($value);
-
-        if ($replace) {
-            switch ($this->type) {
-                case (XMLSecEnc::Element):
-                    if ($this->rawNode->nodeType == XML_DOCUMENT_NODE) {
-                        return $this->encdoc;
-                    }
-                    $importEnc = $this->rawNode->ownerDocument->importNode($this->encdoc->documentElement, TRUE);
-                    $this->rawNode->parentNode->replaceChild($importEnc, $this->rawNode);
-                    return $importEnc;
-                    break;
-                case (XMLSecEnc::Content):
-                    $importEnc = $this->rawNode->ownerDocument->importNode($this->encdoc->documentElement, TRUE);
-                    while($this->rawNode->firstChild) {
-                        $this->rawNode->removeChild($this->rawNode->firstChild);
-                    }
-                    $this->rawNode->appendChild($importEnc);
-                    return $importEnc;
-                    break;
-            }
-        } else {
-            return $this->encdoc->documentElement;
-        }
-    }
-
-    public function encryptReferences($objKey) {
-        $curRawNode = $this->rawNode;
-        $curType = $this->type;
-        foreach ($this->references AS $name=>$reference) {
-            $this->encdoc = $reference["encnode"];
-            $this->rawNode = $reference["node"];
-            $this->type = $reference["type"];
-            try {
-                $encNode = $this->encryptNode($objKey);
-                $this->references[$name]["encnode"] = $encNode;
-            } catch (Exception $e) {
-                $this->rawNode = $curRawNode;
-                $this->type = $curType;
-                throw $e;
-            }
-        }
-        $this->rawNode = $curRawNode;
-        $this->type = $curType;
-    }
-
-    /**
-     * Retrieve the CipherValue text from this encrypted node.
-     *
-     * @return string|NULL  The Ciphervalue text, or NULL if no CipherValue is found.
-     */
-    public function getCipherValue() {
-        if (empty($this->rawNode)) {
-            throw new Exception('Node to decrypt has not been set');
-        }
-
-        $doc = $this->rawNode->ownerDocument;
-        $xPath = new DOMXPath($doc);
-        $xPath->registerNamespace('xmlencr', XMLSecEnc::XMLENCNS);
-        /* Only handles embedded content right now and not a reference */
-        $query = "./xmlencr:CipherData/xmlencr:CipherValue";
-        $nodeset = $xPath->query($query, $this->rawNode);
-        $node = $nodeset->item(0);
-
-        if (!$node) {
-                return NULL;
-        }
-
-        return base64_decode($node->nodeValue);
-    }
-
-    /**
-     * Decrypt this encrypted node.
-     *
-     * The behaviour of this function depends on the value of $replace.
-     * If $replace is FALSE, we will return the decrypted data as a string.
-     * If $replace is TRUE, we will insert the decrypted element(s) into the
-     * document, and return the decrypted element(s).
-     *
-     * @params XMLSecurityKey $objKey  The decryption key that should be used when decrypting the node.
-     * @params boolean $replace  Whether we should replace the encrypted node in the XML document with the decrypted data. The default is TRUE.
-     * @return string|DOMElement  The decrypted data.
-     */     
-    public function decryptNode($objKey, $replace=TRUE) {
-        if (! $objKey instanceof XMLSecurityKey) {
-            throw new Exception('Invalid Key');
-        }
-
-        $encryptedData = $this->getCipherValue();
-        if ($encryptedData) {
-            $decrypted = $objKey->decryptData($encryptedData);
-            if ($replace) {
-                switch ($this->type) {
-                    case (XMLSecEnc::Element):
-                        $newdoc = new DOMDocument();
-                        $newdoc->loadXML($decrypted);
-                        if ($this->rawNode->nodeType == XML_DOCUMENT_NODE) {
-                            return $newdoc;
-                        }
-                        $importEnc = $this->rawNode->ownerDocument->importNode($newdoc->documentElement, TRUE);
-                        $this->rawNode->parentNode->replaceChild($importEnc, $this->rawNode);
-                        return $importEnc;
-                        break;
-                    case (XMLSecEnc::Content):
-                        if ($this->rawNode->nodeType == XML_DOCUMENT_NODE) {
-                            $doc = $this->rawNode;
-                        } else {
-                            $doc = $this->rawNode->ownerDocument;
-                        }
-                        $newFrag = $doc->createDocumentFragment();
-                        $newFrag->appendXML($decrypted);
-                        $parent = $this->rawNode->parentNode;
-                        $parent->replaceChild($newFrag, $this->rawNode);
-                        return $parent;
-                        break;
-                    default:
-                        return $decrypted;
-                }
-            } else {
-                return $decrypted;
-            }
-        } else {
-            throw new Exception("Cannot locate encrypted data");
-        }
-    }
-
-    public function encryptKey($srcKey, $rawKey, $append=TRUE) {
-        if ((! $srcKey instanceof XMLSecurityKey) || (! $rawKey instanceof XMLSecurityKey)) {
-            throw new Exception('Invalid Key');
-        }
-        $strEncKey = base64_encode($srcKey->encryptData($rawKey->key));
-        $root = $this->encdoc->documentElement;
-        $encKey = $this->encdoc->createElementNS(XMLSecEnc::XMLENCNS, 'xenc:EncryptedKey');
-        if ($append) {
-            $keyInfo = $root->insertBefore($this->encdoc->createElementNS('http://www.w3.org/2000/09/xmldsig#', 'dsig:KeyInfo'), $root->firstChild);
-            $keyInfo->appendChild($encKey);
-        } else {
-            $this->encKey = $encKey;
-        }
-        $encMethod = $encKey->appendChild($this->encdoc->createElementNS(XMLSecEnc::XMLENCNS, 'xenc:EncryptionMethod'));
-        $encMethod->setAttribute('Algorithm', $srcKey->getAlgorith());
-        if (! empty($srcKey->name)) {
-            $keyInfo = $encKey->appendChild($this->encdoc->createElementNS('http://www.w3.org/2000/09/xmldsig#', 'dsig:KeyInfo'));
-            $keyInfo->appendChild($this->encdoc->createElementNS('http://www.w3.org/2000/09/xmldsig#', 'dsig:KeyName', $srcKey->name));
-        }
-        $cipherData = $encKey->appendChild($this->encdoc->createElementNS(XMLSecEnc::XMLENCNS, 'xenc:CipherData'));
-        $cipherData->appendChild($this->encdoc->createElementNS(XMLSecEnc::XMLENCNS, 'xenc:CipherValue', $strEncKey));
-        if (is_array($this->references) && count($this->references) > 0) {
-           $refList =  $encKey->appendChild($this->encdoc->createElementNS(XMLSecEnc::XMLENCNS, 'xenc:ReferenceList'));
-            foreach ($this->references AS $name=>$reference) {
-                $refuri = $reference["refuri"];
-                $dataRef = $refList->appendChild($this->encdoc->createElementNS(XMLSecEnc::XMLENCNS, 'xenc:DataReference'));
-                $dataRef->setAttribute("URI", '#' . $refuri);
-            }
-        }
-        return;
-    }
-
-    public function decryptKey($encKey) {
-        if (! $encKey->isEncrypted) {
-            throw new Exception("Key is not Encrypted");
-        }
-        if (empty($encKey->key)) {
-            throw new Exception("Key is missing data to perform the decryption");
-        }
-        return $this->decryptNode($encKey, FALSE);
-    }
-
-    public function locateEncryptedData($element) {
-        if ($element instanceof DOMDocument) {
-            $doc = $element;
-        } else {
-            $doc = $element->ownerDocument;
-        }
-        if ($doc) {
-            $xpath = new DOMXPath($doc);
-            $query = "//*[local-name()='EncryptedData' and namespace-uri()='".XMLSecEnc::XMLENCNS."']";
-            $nodeset = $xpath->query($query);
-            return $nodeset->item(0);
-        }
-        return NULL;
-    }
-
-    public function locateKey($node=NULL) {
-        if (empty($node)) {
-            $node = $this->rawNode;
-        }
-        if (! $node instanceof DOMNode) {
-            return NULL;
-        }
-        if ($doc = $node->ownerDocument) {
-            $xpath = new DOMXPath($doc);
-            $xpath->registerNamespace('xmlsecenc', XMLSecEnc::XMLENCNS);
-            $query = ".//xmlsecenc:EncryptionMethod";
-            $nodeset = $xpath->query($query, $node);
-            if ($encmeth = $nodeset->item(0)) {
-                   $attrAlgorithm = $encmeth->getAttribute("Algorithm");
-                try {
-                    $objKey = new XMLSecurityKey($attrAlgorithm, array('type'=>'private'));
-                } catch (Exception $e) {
-                    return NULL;
-                }
-                return $objKey;
-            }
-        }
-        return NULL;
-    }
-
-    static function staticLocateKeyInfo($objBaseKey=NULL, $node=NULL) {
-        if (empty($node) || (! $node instanceof DOMNode)) {
-            return NULL;
-        }
-        $doc = $node->ownerDocument;
-        if (!$doc) {
-            return NULL;
-        }
-
-        $xpath = new DOMXPath($doc);
-        $xpath->registerNamespace('xmlsecenc', XMLSecEnc::XMLENCNS);
-        $xpath->registerNamespace('xmlsecdsig', XMLSecurityDSig::XMLDSIGNS);
-        $query = "./xmlsecdsig:KeyInfo";
-        $nodeset = $xpath->query($query, $node);
-        $encmeth = $nodeset->item(0);
-        if (!$encmeth) {
-            /* No KeyInfo in EncryptedData / EncryptedKey. */
-            return $objBaseKey;
-        }
-
-        foreach ($encmeth->childNodes AS $child) {
-            switch ($child->localName) {
-                case 'KeyName':
-                    if (! empty($objBaseKey)) {
-                        $objBaseKey->name = $child->nodeValue;
-                    }
-                    break;
-                case 'KeyValue':
-                    foreach ($child->childNodes AS $keyval) {
-                        switch ($keyval->localName) {
-                            case 'DSAKeyValue':
-                                throw new Exception("DSAKeyValue currently not supported");
-                                break;
-                            case 'RSAKeyValue':
-                                $modulus = NULL;
-                                $exponent = NULL;
-                                if ($modulusNode = $keyval->getElementsByTagName('Modulus')->item(0)) {
-                                    $modulus = base64_decode($modulusNode->nodeValue);
-                                }
-                                if ($exponentNode = $keyval->getElementsByTagName('Exponent')->item(0)) {
-                                    $exponent = base64_decode($exponentNode->nodeValue);
-                                }
-                                if (empty($modulus) || empty($exponent)) {
-                                    throw new Exception("Missing Modulus or Exponent");
-                                }
-                                $publicKey = XMLSecurityKey::convertRSA($modulus, $exponent);
-                                $objBaseKey->loadKey($publicKey);
-                                break;
-                        }
-                    }
-                    break;
-                case 'RetrievalMethod':
-                    $type = $child->getAttribute('Type');
-                    if ($type !== 'http://www.w3.org/2001/04/xmlenc#EncryptedKey') {
-                        /* Unsupported key type. */
-                        break;
-                    }
-                    $uri = $child->getAttribute('URI');
-                    if ($uri[0] !== '#') {
-                        /* URI not a reference - unsupported. */
-                        break;
-                    }
-                    $id = substr($uri, 1);
-
-                    $query = "//xmlsecenc:EncryptedKey[@Id='$id']";
-                    $keyElement = $xpath->query($query)->item(0);
-                    if (!$keyElement) {
-                        throw new Exception("Unable to locate EncryptedKey with @Id='$id'.");
-                    }
-
-                    return XMLSecurityKey::fromEncryptedKeyElement($keyElement);
-                case 'EncryptedKey':
-                    return XMLSecurityKey::fromEncryptedKeyElement($child);
-                case 'X509Data':
-                    if ($x509certNodes = $child->getElementsByTagName('X509Certificate')) {
-                        if ($x509certNodes->length > 0) {
-                            $x509cert = $x509certNodes->item(0)->textContent;
-                            $x509cert = str_replace(array("\r", "\n"), "", $x509cert);
-                            $x509cert = "-----BEGIN CERTIFICATE-----\n".chunk_split($x509cert, 64, "\n")."-----END CERTIFICATE-----\n";
-                            $objBaseKey->loadKey($x509cert, FALSE, TRUE);
-                        }
-                    }
-                    break;
-            }
-        }
-        return $objBaseKey;
-    }
-
-    public function locateKeyInfo($objBaseKey=NULL, $node=NULL) {
-        if (empty($node)) {
-            $node = $this->rawNode;
-        }
-        return XMLSecEnc::staticLocateKeyInfo($objBaseKey, $node);
-    }
-}
+$xmlseclibs_srcdir = dirname(__FILE__) . '/src/';
+require $xmlseclibs_srcdir . '/XMLSecurityKey.php';
+require $xmlseclibs_srcdir . '/XMLSecurityDSig.php';
+require $xmlseclibs_srcdir . '/XMLSecEnc.php';
